import * as fs from 'fs';
import fs__default from 'fs';
import * as path from 'path';
import path__default from 'path';
import os from 'os';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports$3 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule$3(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var arrayLikeToArray$2 = createCommonjsModule$3(function (module) {
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$3(arrayLikeToArray$2);

var arrayWithoutHoles$2 = createCommonjsModule$3(function (module) {
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray$2(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$3(arrayWithoutHoles$2);

var iterableToArray$2 = createCommonjsModule$3(function (module) {
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$3(iterableToArray$2);

var unsupportedIterableToArray$2 = createCommonjsModule$3(function (module) {
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray$2(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$3(unsupportedIterableToArray$2);

var nonIterableSpread$2 = createCommonjsModule$3(function (module) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$3(nonIterableSpread$2);

var toConsumableArray$2 = createCommonjsModule$3(function (module) {
function _toConsumableArray(arr) {
  return arrayWithoutHoles$2(arr) || iterableToArray$2(arr) || unsupportedIterableToArray$2(arr) || nonIterableSpread$2();
}

module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _toConsumableArray$2 = unwrapExports$3(toConsumableArray$2);

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray_1 = isArray;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal || freeSelf || Function('return this')();

var _root = root;

/** Built-in value references. */
var Symbol$1 = _root.Symbol;

var _Symbol = Symbol$1;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$6.toString;

/** Built-in value references. */
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$5.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$5.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? _getRawTag(value)
    : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
}

var isSymbol_1 = isSymbol;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray_1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol_1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject_1(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = _baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction;

/** Used to detect overreaching core-js shims. */
var coreJsData = _root['__core-js_shared__'];

var _coreJsData = coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$4 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty$4).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject_1(value) || _isMasked(value)) {
    return false;
  }
  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}

var _baseIsNative = baseIsNative;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}

var _getNative = getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate = _getNative(Object, 'create');

var _nativeCreate = nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}

var _hashClear = hashClear;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? undefined : result;
  }
  return hasOwnProperty$3.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$2.call(data, key);
}

var _hashHas = hashHas;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

var _hashSet = hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;

var _Hash = Hash;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return _assocIndexOf(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClear;
ListCache.prototype['delete'] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;

var _ListCache = ListCache;

/* Built-in method references that are verified to be native. */
var Map = _getNative(_root, 'Map');

var _Map = Map;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash,
    'map': new (_Map || _ListCache),
    'string': new _Hash
  };
}

var _mapCacheClear = mapCacheClear;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return _isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = _getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return _getMapData(this, key).get(key);
}

var _mapCacheGet = mapCacheGet;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return _getMapData(this, key).has(key);
}

var _mapCacheHas = mapCacheHas;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = _getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype['delete'] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;

var _MapCache = MapCache;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || _MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = _MapCache;

var memoize_1 = memoize;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize_1(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = _memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }
  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray_1(value)) {
    return value;
  }
  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
}

var _castPath = castPath;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol_1(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

var _toKey = toKey;

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = _castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[_toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

var _baseGet = baseGet;

var defineProperty$1 = (function() {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty$1 = defineProperty$1;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty$1) {
    _defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$1.call(object, key) && eq_1(objValue, value)) ||
      (value === undefined && !(key in object))) {
    _baseAssignValue(object, key, value);
  }
}

var _assignValue = assignValue;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex;

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject_1(object)) {
    return object;
  }
  path = _castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = _toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject_1(objValue)
          ? objValue
          : (_isIndex(path[index + 1]) ? [] : {});
      }
    }
    _assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

var _baseSet = baseSet;

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = _baseGet(object, path);

    if (predicate(value, path)) {
      _baseSet(result, _castPath(path, object), value);
    }
  }
  return result;
}

var _basePickBy = basePickBy;

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

var _baseHasIn = baseHasIn;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
}

var _baseIsArguments = baseIsArguments;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
  return isObjectLike_1(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

var isArguments_1 = isArguments;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

var isLength_1 = isLength;

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = _castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = _toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength_1(length) && _isIndex(key, length) &&
    (isArray_1(object) || isArguments_1(object));
}

var _hasPath = hasPath;

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && _hasPath(object, path, _baseHasIn);
}

var hasIn_1 = hasIn;

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return _basePickBy(object, paths, function(value, path) {
    return hasIn_1(object, path);
  });
}

var _basePick = basePick;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

var _arrayPush = arrayPush;

/** Built-in value references. */
var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray_1(value) || isArguments_1(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

var _isFlattenable = isFlattenable;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = _isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        _arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

var _baseFlatten = baseFlatten;

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? _baseFlatten(array, 1) : [];
}

var flatten_1 = flatten;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

var _apply = apply;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return _apply(func, this, otherArgs);
  };
}

var _overRest = overRest;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

var constant_1 = constant;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

var identity_1 = identity;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !_defineProperty$1 ? identity_1 : function(func, string) {
  return _defineProperty$1(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant_1(string),
    'writable': true
  });
};

var _baseSetToString = baseSetToString;

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

var _shortOut = shortOut;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = _shortOut(_baseSetToString);

var _setToString = setToString;

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return _setToString(_overRest(func, undefined, flatten_1), func + '');
}

var _flatRest = flatRest;

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
_flatRest(function(object, paths) {
  return object == null ? {} : _basePick(object, paths);
});

function unwrapExports$2 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule$2(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classCallCheck$1 = createCommonjsModule$2(function (module) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _classCallCheck$1 = unwrapExports$2(classCallCheck$1);

var createClass$1 = createCommonjsModule$2(function (module) {
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _createClass$1 = unwrapExports$2(createClass$1);

function unwrapExports$1 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule$1(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classCallCheck = createCommonjsModule$1(function (module) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _classCallCheck = unwrapExports$1(classCallCheck);

var createClass = createCommonjsModule$1(function (module) {
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _createClass = unwrapExports$1(createClass);

var defineProperty = createCommonjsModule$1(function (module) {
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _defineProperty = unwrapExports$1(defineProperty);

function _createForOfIteratorHelper$5(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }

function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var paramRe = /(^|[ (!&=|+-])([A-Z_][A-Z0-9_]*)/g; // start with: (, number, bool, or unary op !
// at least on space or param
// then maybe 0+ safe stuff
// Note that this RE relies on the intentional spacing
// TODO: we could lock down further by requring expressions on eithre side of dual operators

var safeEvalRe = /^ *(\(|[0-9]+|false|true|!)(( |\()+([0-9]+|true|false|!|&&|[|]{2}|==|!=|\+|-|%|\*|<|>|<=|>=)( |\)*))* *$/;
/**
* A safe-ish (TODO: developed based on a Stackexchange post; find and link?) boolean expression evaluator.
*/

var Evaluator = /*#__PURE__*/function () {
  // declare recognized internal parameters

  /**
  * Recogrizes 'parameters' and 'zeroRes' field.
  *
  * 'parameters' maps strings to values. E.g.: parameters `{ "IS_CONTRACTOR": 1 }` would cause the condition
  * `IS_CONTRACTOR` to evaluate true.
  *
  * 'zeroRes' is an array of RegExps used to match against a condition string *after* resolving all the parameters. If a
  *    match is made, then that value is set to zero. I.e., `zeroRes` determines which parameters are default zero.
  */
  function Evaluator(settings) {
    _classCallCheck(this, Evaluator);

    _defineProperty(this, "parameters", void 0);

    _defineProperty(this, "zeroRes", void 0);

    Object.assign(this, settings);
    this.parameters = this.parameters || {};
    this.zeroRes = this.zeroRes || [];
  }

  _createClass(Evaluator, [{
    key: "evalTruth",
    value: function evalTruth(origExpression) {
      var _this = this;

      if (typeof origExpression !== 'string') {
        throw new Error("Expression must be a string. Got: '".concat(origExpression, "'."));
      }

      var expression = origExpression; // save original expression in case we need to reflect to user on error
      // replace all the parameters in the expression

      var results = expression.matchAll(paramRe);

      var _iterator = _createForOfIteratorHelper$5(results),
          _step;

      try {
        var _loop = function _loop() {
          var result = _step.value;
          var param = result[2];
          var val = _this.parameters[param]; // look on the parameter object

          if (val === undefined) {
            // if not defined, look on process.env
            val = process.env[param];
          }

          if (val === undefined) {
            if (_this.zeroRes.some(function (re) {
              return param.match(re);
            })) {
              val = 0;
            } else {
              throw new Error("Condition parameter '".concat(param, "' is not defined. Update settings and/or check expression."));
            }
          } // 'replaceAll' not supported on node (TODO: add Babel tform); though 'replace' does replace all *if* first arg is
          // RE... so... maybe not necessary?)


          expression = expression.replace(new RegExp("(^|[^A-Z0-9_])".concat(param, "([^A-Z0-9_]|$)"), 'g'), "$1 ".concat(val, " $2"));
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        } // check that everything is save

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (!expression.match(safeEvalRe)) {
        throw new Error("Invalid expression does not fully resolve or has unsafe code: ".concat(origExpression, " => ").concat(expression));
      } // else, let's eval it


      return Function("\"use strict\";return (".concat(expression, ") ? true : false"))(); // eslint-disable-line no-new-func
    }
  }]);

  return Evaluator;
}();

var arrayWithHoles = createCommonjsModule$2(function (module) {
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(arrayWithHoles);

var iterableToArrayLimit = createCommonjsModule$2(function (module) {
function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(iterableToArrayLimit);

var arrayLikeToArray$1 = createCommonjsModule$2(function (module) {
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(arrayLikeToArray$1);

var unsupportedIterableToArray$1 = createCommonjsModule$2(function (module) {
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray$1(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(unsupportedIterableToArray$1);

var nonIterableRest = createCommonjsModule$2(function (module) {
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(nonIterableRest);

var slicedToArray = createCommonjsModule$2(function (module) {
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray$1(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _slicedToArray = unwrapExports$2(slicedToArray);

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof_1$1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _typeof$1 = unwrapExports(_typeof_1$1);

var arrayLikeToArray = createCommonjsModule(function (module) {
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(arrayLikeToArray);

var arrayWithoutHoles$1 = createCommonjsModule(function (module) {
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(arrayWithoutHoles$1);

var iterableToArray$1 = createCommonjsModule(function (module) {
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(iterableToArray$1);

var unsupportedIterableToArray = createCommonjsModule(function (module) {
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(unsupportedIterableToArray);

var nonIterableSpread$1 = createCommonjsModule(function (module) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(nonIterableSpread$1);

var toConsumableArray$1 = createCommonjsModule(function (module) {
function _toConsumableArray(arr) {
  return arrayWithoutHoles$1(arr) || iterableToArray$1(arr) || unsupportedIterableToArray(arr) || nonIterableSpread$1();
}

module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _toConsumableArray$1 = unwrapExports(toConsumableArray$1);

function _createForOfIteratorHelper$1$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1$1(o, minLen); }

function _arrayLikeToArray$1$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
* Package internal utility functions.
*/
var replaceRE = /\$\{([A-Za-z_][A-Za-z0-9_]*)\}/g;
/**
* Replaces constructs like '${FOO}' with the environment value of 'FOO' (or whatever key is used). Will raise an
* exception if no value is found for a given key.
*/

var envTemplateString = function envTemplateString(path) {
  var origPath = path; // used for error messages

  var matches; // A replaced var may itself reference vars, so we keep processing until everything is resolved.

  while ((matches = _toConsumableArray$1(path.matchAll(replaceRE))).length > 0) {
    // const matches = [...path.matchAll(replaceRE)]
    matches.reverse(); // The reverse allows us to use the start and end indexes without messing up the string.

    var _iterator = _createForOfIteratorHelper$1$1(matches),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var matchInfo = _step.value;
        var match = matchInfo[0];
        var key = matchInfo[1];
        var value = process.env[key];
        var matchStart = matchInfo.index;

        if (value === undefined) {
          throw new Error("No such environment parameter '".concat(key, "' found in path replacement: '").concat(origPath, "'."));
        }

        path = path.substring(0, matchStart) + value + path.substring(matchStart + match.length);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return path;
};
/**
* Returns true if pathA is on pathB. I.e., if pathB is or under pathA. E.g.:
* - ('.', '.foo') => true
* - ('.foo', '.') => false
* - ('.foo', '.foo') => true
*
* Note, this function assumes the paths are valid JSON paths.
*/


var testJsonPaths = function testJsonPaths(pathA, pathB) {
  if (typeof pathA !== 'string' && !(pathA instanceof String) || typeof pathB !== 'string' && !(pathB instanceof String)) {
    throw new Error("Unexpected non-string input: '".concat(pathA, "', '").concat(pathB, "'"));
  }

  var pathABits = pathA.split('.');
  var pathBBits = pathB.split('.');

  if (pathABits.length > pathBBits.length) {
    return false;
  }

  while (pathABits[0] === '') {
    pathABits.shift();
  }

  while (pathBBits[0] === '') {
    pathBBits.shift();
  }

  if (pathABits.length > pathBBits.length) {
    return false;
  }

  while (pathABits.length > 0) {
    var aBit = pathABits.shift();
    var bBit = pathBBits.shift();

    if (bBit !== aBit) {
      return false;
    }
  }

  return true;
};

function _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var FJSON_META_DATA_KEY = 'com.liquid-labs.federated-json';

var jsonRE = /\.json$/;
/**
* Reads a JSON file and processes for federated mount points to construct a composite JSON object from one or more
* files.
*/

var readFJSON = function readFJSON(filePath, options) {
  if (!filePath) {
    throw new Error("File path invalid. (".concat(filePath, ")"));
  }

  var _ref = options || {},
      rememberSource = _ref.rememberSource;

  var processedPath = envTemplateString(filePath);

  if (!fs.existsSync(processedPath)) {
    var msg = "No such file: '".concat(filePath, "'") + (filePath !== processedPath ? " ('".concat(processedPath, "')") : '');
    throw new Error(msg);
  }

  var dataBits = fs.readFileSync(processedPath);
  var data; // actually, would love 'const', but need to set inside try block and don'w want to expand scope of the try.

  try {
    data = JSON.parse(dataBits);
  } catch (e) {
    if (e instanceof SyntaxError) {
      throw new SyntaxError("".concat(e.message, " while processing ").concat(filePath));
    }
  }

  if (rememberSource) {
    setSource(data, filePath);
  }

  var _iterator = _createForOfIteratorHelper$4(getMountSpecs(data) || []),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var mntSpec = _step.value;

      var _processMountSpec = processMountSpec({
        mntSpec: mntSpec,
        data: data
      }),
          dataFile = _processMountSpec.dataFile,
          dataDir = _processMountSpec.dataDir,
          mountPoint = _processMountSpec.mountPoint,
          finalKey = _processMountSpec.finalKey;

      if (dataFile) {
        var subData = readFJSON(dataFile);
        mountPoint[finalKey] = subData;
      } else {
        // 'dataDir' is good because we expect processMountSpec() to raise an exception if neither specified.
        var mntObj = {};
        mountPoint[finalKey] = mntObj;
        var files = fs.readdirSync(dataDir, {
          withFileTypes: true
        }).filter(function (item) {
          return !item.isDirectory() && jsonRE.test(item.name);
        }).map(function (item) {
          return item.name;
        }); // note 'name' is the simple/basename, not the whole path.

        var _iterator3 = _createForOfIteratorHelper$4(files),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var dirFile = _step3.value;
            var mntPnt = dirFile.replace(jsonRE, '');

            var _subData = readFJSON(path.join(dataDir, dirFile));

            mntObj[mntPnt] = _subData;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = _createForOfIteratorHelper$4(getLinkSpecs(data) || []),
      _step2;

  try {
    var _loop = function _loop() {
      var lnkSpec = _step2.value;

      var _processLinkSpec = processLinkSpec(lnkSpec, data),
          finalRef = _processLinkSpec.finalRef,
          source = _processLinkSpec.source,
          keyName = _processLinkSpec.keyName,
          penultimateRef = _processLinkSpec.penultimateRef,
          finalKey = _processLinkSpec.finalKey;

      var getRealItem = function getRealItem(soure, keyName, key) {
        return source.find(function (candidate) {
          return candidate[keyName] === key;
        }) || function (e) {
          throw e;
        }(new Error("Cannot find link '".concat(key, "' in '").concat(lnkSpec.linkTo, "'.")));
      };

      if (Array.isArray(finalRef)) {
        // replace the contents
        var realItems = finalRef.map(function (key) {
          return getRealItem(source, keyName, key);
        });
        finalRef.splice.apply(finalRef, [0, finalRef.length].concat(_toConsumableArray$1(realItems)));
      } else if (_typeof$1(finalRef) === 'object') {
        for (var _i = 0, _Object$keys = Object.keys(finalRef); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          finalRef[key] = getRealItem(source, keyName, key);
        }
      } else {
        // it's a single key
        penultimateRef[finalKey] = getRealItem(source, keyName, finalRef);
      }
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return data;
};
/**
* Set's the meta source information.
*/


var setSource = function setSource(data, filePath) {
  var myMeta = ensureMyMeta(data);
  myMeta.sourceFile = filePath;
};
/**
* Writes a standard or federated JSON file by analysing the objects meta data and breaking the saved files up
* accourding to the configuration.
*/


var writeFJSON = function writeFJSON(_ref2) {
  var data = _ref2.data,
      filePath = _ref2.filePath,
      saveFrom = _ref2.saveFrom,
      jsonPathToSelf = _ref2.jsonPathToSelf;

  if (filePath === undefined) {
    var myMeta = getMyMeta(data);
    filePath = myMeta && myMeta.sourceFile;

    if (!filePath) {
      throw new Error('File was not provided and no \'meta.sourceFile\' defined (or invalid).');
    }
  }

  var doSave = saveFrom === undefined || jsonPathToSelf && testJsonPaths(saveFrom, jsonPathToSelf);

  if (doSave && !filePath) {
    throw new Error('No explicit filePath provided and no source found in object meta data.');
  }

  var mountSpecs = getMountSpecs(data);

  if (mountSpecs) {
    var _iterator4 = _createForOfIteratorHelper$4(mountSpecs),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var mntSpec = _step4.value;

        var _processMountSpec2 = processMountSpec({
          mntSpec: mntSpec,
          data: data,
          preserveOriginal: true
        }),
            dataFile = _processMountSpec2.dataFile,
            dataDir = _processMountSpec2.dataDir,
            dataPath = _processMountSpec2.dataPath,
            mountPoint = _processMountSpec2.mountPoint,
            finalKey = _processMountSpec2.finalKey,
            newData = _processMountSpec2.newData;

        data = newData;
        var subData = mountPoint[finalKey];
        mountPoint[finalKey] = null; // What's our save scheme? Single data file, or a scan dir?

        if (dataFile) {
          writeFJSON({
            data: subData,
            filePath: dataFile,
            saveFrom: saveFrom,
            jsonPathToSelf: updatejsonPathToSelf(dataPath, jsonPathToSelf)
          });
        } else {
          // processMountSpec will raise an exception if neither dataFile nor dataDir is defined.
          // We don't bother to test what 'dataDir' is. If it exists, we won't overwrite, so the subsequent attempt to
          // write a file into it can just fail if it's not of an appropriate type.
          fs.existsSync(dataDir) || fs.mkdirSync(dataDir);

          for (var _i2 = 0, _Object$keys2 = Object.keys(subData); _i2 < _Object$keys2.length; _i2++) {
            var subKey = _Object$keys2[_i2];
            writeFJSON({
              data: subData[subKey],
              filePath: path.join(dataDir, "".concat(subKey, ".json")),
              saveFrom: saveFrom,
              jsonPathToSelf: updatejsonPathToSelf("".concat(dataPath, ".").concat(subKey), jsonPathToSelf)
            });
          }
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  }

  if (doSave) {
    var dataString = JSON.stringify(data, null, '  ');
    var processedPath = envTemplateString(filePath);
    fs.writeFileSync(processedPath, dataString);
  }
};

var getMyMeta = function getMyMeta(data) {
  return data._meta && data._meta[FJSON_META_DATA_KEY];
};

var ensureMyMeta = function ensureMyMeta(data) {
  var myMeta = getMyMeta(data);

  if (!myMeta) {
    if (data._meta === undefined) {
      data._meta = {};
    }

    if (data._meta[FJSON_META_DATA_KEY] === undefined) {
      data._meta[FJSON_META_DATA_KEY] = {};
    }

    myMeta = getMyMeta(data);
  }

  return myMeta;
};
/**
* Updates (by returning) the new dynamic path given the current data path (relative to a data mount or link point) and
* previous dynamic path.
*/


var updatejsonPathToSelf = function updatejsonPathToSelf(jsonMountPath, jsonPathToSelf) {
  if (jsonMountPath !== undefined) {
    return jsonPathToSelf === undefined ? jsonMountPath : "".concat(jsonPathToSelf).concat(jsonMountPath);
  } else {
    return undefined;
  }
};
/**
* Internal function to test for and extract mount specs from the provided JSON object.
*/


var getMountSpecs = function getMountSpecs(data) {
  var _getMyMeta;

  return (_getMyMeta = getMyMeta(data)) === null || _getMyMeta === void 0 ? void 0 : _getMyMeta.mountSpecs;
};
/**
* Internal function to process a mount spec into useful components utilized by the `readFJSON` and `writeFJSON`.
*/


var processMountSpec = function processMountSpec(_ref3) {
  var mntSpec = _ref3.mntSpec,
      data = _ref3.data,
      preserveOriginal = _ref3.preserveOriginal;
  var dataPath = mntSpec.dataPath,
      dataFile = mntSpec.dataFile,
      dataDir = mntSpec.dataDir;
  dataFile && dataDir // eslint-disable-line no-unused-expressions
  && function (e) {
    throw e;
  }(new Error("Bad mount spec; cannot specify both data file (".concat(dataFile, ") and directory (").concat(dataDir, ")")));
  !dataFile && !dataDir // eslint-disable-line no-unused-expressions
  && function (e) {
    throw e;
  }(new Error('Bad mount spec; neither data file nor directory.'));
  dataFile && (dataFile = envTemplateString(dataFile));
  dataDir && (dataDir = envTemplateString(dataDir));

  var _processJSONPath = processJSONPath({
    path: dataPath,
    data: data,
    preserveOriginal: preserveOriginal
  }),
      mountPoint = _processJSONPath.penultimateRef,
      finalKey = _processJSONPath.finalKey,
      newData = _processJSONPath.newData;

  return {
    dataFile: dataFile,
    dataDir: dataDir,
    dataPath: dataPath,
    mountPoint: mountPoint,
    finalKey: finalKey,
    newData: newData
  };
};
/**
* Internal function to test for and extract link specs from the provided JSON object.
*/


var getLinkSpecs = function getLinkSpecs(data) {
  var _getMyMeta2;

  return (_getMyMeta2 = getMyMeta(data)) === null || _getMyMeta2 === void 0 ? void 0 : _getMyMeta2.linkSpecs;
};
/**
* Internal function to process a link spec into useful components utilized by the `readFJSON` and `writeFJSON`.
*/


var processLinkSpec = function processLinkSpec(lnkSpec, data) {
  var linkRefs = lnkSpec.linkRefs,
      linkTo = lnkSpec.linkTo,
      keyName = lnkSpec.linkKey;

  var _processJSONPath2 = processJSONPath({
    path: linkRefs,
    data: data
  }),
      finalRef = _processJSONPath2.finalRef,
      penultimateRef = _processJSONPath2.penultimateRef,
      finalKey = _processJSONPath2.finalKey;

  var _processJSONPath3 = processJSONPath({
    path: linkTo,
    data: data
  }),
      source = _processJSONPath3.finalRef;

  return {
    finalRef: finalRef,
    source: source,
    keyName: keyName,
    penultimateRef: penultimateRef,
    finalKey: finalKey
  };
};

var shallowCopy = function shallowCopy(input) {
  return Array.isArray(input) ? input.slice() : _typeof$1(input) === 'object' && input !== null ? Object.assign({}, input) : input;
};

var processJSONPath = function processJSONPath(_ref4) {
  var path = _ref4.path,
      data = _ref4.data,
      preserveOriginal = _ref4.preserveOriginal;

  if (!path) {
    throw new Error("No 'dataPath' specified for mount spec mount point.");
  }

  var pathTrail = path.split('.');
  pathTrail.shift();
  var finalKey = pathTrail.pop();
  var newData = preserveOriginal ? shallowCopy(data) : data;
  var penultimateRef = newData; // not necessarily penultimate yet, but will be...

  var _iterator5 = _createForOfIteratorHelper$4(pathTrail),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var key = _step5.value;

      if (preserveOriginal) {
        var result = shallowCopy(penultimateRef[key]);
        penultimateRef[key] = result;
        penultimateRef = result;
      } else {
        penultimateRef = penultimateRef[key];
      }
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  return {
    finalRef: penultimateRef[finalKey],
    penultimateRef: penultimateRef,
    finalKey: finalKey,
    newData: newData
  };
}; // aliases for 'import * as fjson; fjson.write()' style


var write = writeFJSON;
var read = readFJSON;

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/**
* Basic methods for accessing the audit record data. Note that functionality is split up like this to make these
* functions easier to unit test.
*/

/**
* Retrieves a single audit record entry by name <audit name>/<target>.
*/

var get$2 = function get(data, id) {
  var _data$auditRecords, _data$auditRecords$au;

  var _splitId = splitId(id),
      _splitId2 = _slicedToArray(_splitId, 2),
      auditName = _splitId2[0],
      targetId = _splitId2[1];

  return (data === null || data === void 0 ? void 0 : (_data$auditRecords = data.auditRecords) === null || _data$auditRecords === void 0 ? void 0 : (_data$auditRecords$au = _data$auditRecords[auditName]) === null || _data$auditRecords$au === void 0 ? void 0 : _data$auditRecords$au[targetId]) && toStandalone$2(data, auditName, targetId);
};

var list$2 = function list(data, _ref) {
  var domain = _ref.domain,
      auditName = _ref['audit name'];

  if (data.auditRecords === undefined) {
    return [];
  }

  var domainKeys = domain === undefined ? Object.keys(data.auditRecords || {}) : [domain];
  return domainKeys.reduce(function (acc, domainName) {
    var domainRecs = data.auditRecords[domainName] || {};
    var auditNames = auditName === undefined ? Object.keys(domainRecs) : [auditName];

    var _iterator = _createForOfIteratorHelper$3(auditNames),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _auditName = _step.value;
        var auditRecs = domainRecs[_auditName] || {};

        for (var _i = 0, _Object$keys = Object.keys(auditRecs); _i < _Object$keys.length; _i++) {
          var targetId = _Object$keys[_i];
          acc.push(toStandalone$2(data, _auditName, targetId));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return acc;
  }, []).sort(function (a, b) {
    return a.id.localeCompare(b.id);
  });
};

var persist = function persist(data, _ref2) {
  var domain = _ref2.domain,
      domains = _ref2.domains;

  if (!domains && domain) {
    domains = [domain];
  }

  if (domains && domains.length > 0) {
    var _iterator2 = _createForOfIteratorHelper$3(domains),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        domain = _step2.value;
        write({
          data: data,
          saveFrom: ".auditRecords.".concat(domain)
        });
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } else {
    write({
      data: data,
      saveFrom: '.auditRecords'
    });
  }
};

var update = function update(data, auditRecord) {
  var id = auditRecord.id;

  var _splitId3 = splitId(id),
      _splitId4 = _slicedToArray(_splitId3, 2),
      auditName = _splitId4[0],
      targetId = _splitId4[1];

  var _auditName$split = auditName.split('-'),
      _auditName$split2 = _slicedToArray(_auditName$split, 1),
      domain = _auditName$split2[0];

  if (!data.auditRecords[domain]) {
    data.auditRecords[domain] = {};
  }

  if (!data.auditRecords[domain][auditName]) {
    data.auditRecords[domain][auditName] = {};
  }

  var auditRecCopy = Object.assign({}, auditRecord);
  delete auditRecCopy.id;
  delete auditRecCopy.weight;
  delete auditRecCopy.auditName;
  data.auditRecords[domain][auditName][targetId] = auditRecCopy;
}; // helper/non-exported items


var splitId = function splitId(id) {
  if (id === undefined) {
    throw new Error('Must provide id in call to get audit records.');
  }

  var _id$split = id.split(/\/(.+)/),
      _id$split2 = _slicedToArray(_id$split, 2),
      auditName = _id$split2[0],
      targetId = _id$split2[1];

  if (auditName === undefined || targetId === undefined) {
    throw new Error("Malformed audit record ID '".concat(id, "'. Should have form '<audit name>/<target ID>'."));
  }

  return [auditName, targetId];
};
/**
* Since our data is complete as is, this just makes a copy for safety's sake.
*/


var toStandalone$2 = function toStandalone(data, auditName, targetId) {
  var _auditName$split3 = auditName.split(/-(.+)/),
      _auditName$split4 = _slicedToArray(_auditName$split3, 1),
      domain = _auditName$split4[0];

  return Object.assign({
    id: "".concat(auditName, "/").concat(targetId),
    domain: domain
  }, data.auditRecords[domain][auditName][targetId]);
};

/**
* Public API for managing third-party account records. Uses the `Accounts` library, which actually implements the
* functions. The library is split like this to make testing easier.
*/

var AuditRecordsAPI = /*#__PURE__*/function () {
  function AuditRecordsAPI(org) {
    _classCallCheck$1(this, AuditRecordsAPI);

    this.org = org;
    this.checkCondition = AuditRecordsAPI.checkCondition;
    this.key = 'id';
  }

  _createClass$1(AuditRecordsAPI, [{
    key: "get",
    value: function get(id) {
      return get$2(this.org.innerState, id);
    }
  }, {
    key: "list",
    value: function list(options) {
      return list$2(this.org.innerState, options);
    }
  }, {
    key: "persist",
    value: function persist$1(options) {
      return persist(this.org.innerState, options);
    }
  }, {
    key: "update",
    value: function update$1(auditRecord) {
      return update(this.org.innerState, auditRecord);
    }
  }]);

  return AuditRecordsAPI;
}();
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Account targets in
* an audit. We do this weird 'defineProperty' thing because it effectively gives us a 'static const'
*/


var checkCondition$4 = function checkCondition(condition, productRec) {
  var parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0,
    NONE: 0,
    LOW: 1,
    MODERATE: 2,
    HIGH: 3,
    EXISTENTIAL: 4
  }, productRec.parameters);
  var zeroRes = [];
  var evaluator = new Evaluator({
    parameters: parameters,
    zeroRes: zeroRes
  });
  return evaluator.evalTruth(condition);
};

Object.defineProperty(AuditRecordsAPI, 'checkCondition', {
  value: checkCondition$4,
  writable: false,
  enumerable: true,
  configurable: false
});

var _typeof_1 = createCommonjsModule$2(function (module) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _typeof = unwrapExports$2(_typeof_1);

var arrayWithoutHoles = createCommonjsModule$2(function (module) {
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray$1(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(arrayWithoutHoles);

var iterableToArray = createCommonjsModule$2(function (module) {
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(iterableToArray);

var nonIterableSpread = createCommonjsModule$2(function (module) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(nonIterableSpread);

var toConsumableArray = createCommonjsModule$2(function (module) {
function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray$1(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _toConsumableArray = unwrapExports$2(toConsumableArray);

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Node = /*#__PURE__*/function () {
  function Node(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        name = _ref2[0],
        primaryManagerNodeName = _ref2[1],
        possibleMngrNames = _ref2[2];

    var implied = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck$1(this, Node);

    this.name = name;
    this.implied = implied;
    this.primaryManagerNodeName = primaryManagerNodeName;
    this.primaryManagerNode = undefined;
    this.possibleMngrNames = possibleMngrNames || [];
    if (primaryManagerNodeName) this.possibleMngrNames.unshift(primaryManagerNodeName);
    this.possibleManagerNodes = [];
    this.children = [];
  }

  _createClass$1(Node, [{
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "getPrimaryManagerNode",
    value: function getPrimaryManagerNode() {
      return this.primaryManagerNode;
    }
  }, {
    key: "getPossibleManagerNodes",
    value: function getPossibleManagerNodes() {
      return this.possibleManagerNodes;
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      return this.children;
    }
  }, {
    key: "getDescendents",
    value: function getDescendents() {
      return this.children.reduce(function (desc, child) {
        return desc.concat(child.getDescendents());
      }, _toConsumableArray(this.children));
    }
  }, {
    key: "getTreeNodes",
    value: function getTreeNodes() {
      return this.children.reduce(function (desc, child) {
        return desc.concat(child.getTreeNodes());
      }, [this]);
    }
  }]);

  return Node;
}();

var OrgStructure = /*#__PURE__*/function () {
  function OrgStructure(fileName, roles) {
    var _this = this;

    _classCallCheck$1(this, OrgStructure);

    var nodes = JSON.parse(fs.readFileSync(fileName)).map(function (r) {
      return new Node(r);
    });
    this.roots = [];

    var processNode = function processNode(node) {
      if (node.primaryManagerNodeName === null) {
        node.primaryManagerNode = null; // which is not undefined, but positively null

        _this.roots.push(node);
      } else {
        var primaryManagerNode = nodes.find(function (n) {
          return n.name === node.primaryManagerNodeName;
        });

        if (primaryManagerNode === undefined) {
          throw new Error("Invalid org structure. Role '".concat(node.name, "' references ") + "non-existent primary manager role '".concat(node.primaryManagerNodeName, "'."));
        }

        node.primaryManagerNode = primaryManagerNode; // console.error(`Adding ${node.name} as child of ${primaryManagerNode.name}`) // DEBUG

        primaryManagerNode.children.push(node);
        node.possibleMngrNames.forEach(function (mngrName) {
          var mngr = nodes.find(function (n) {
            return n.name === mngrName;
          });

          if (mngr === undefined) {
            throw new Error("Invalid org structure. Role '".concat(node.name, "' references ") + "non-existent possible manager role '".concat(mngrName, "'."));
          }

          node.possibleManagerNodes.push(mngr);
        });
      }

      var role = roles.get(node.name, {
        required: true,
        errMsgGen: function errMsgGen(name) {
          return "Could not find ".concat(node.implied ? 'implied ' : '', "role '").concat(name, "' while building org structure.");
        }
      });
      node.singular = role.singular;

      var _iterator = _createForOfIteratorHelper$2(role.implies || []),
          _step;

      try {
        var _loop = function _loop() {
          var _step$value = _step.value,
              impliedRoleName = _step$value.name,
              mngrProtocol = _step$value.mngrProtocol;
          // implied roles are handled by inserting the implied roles as managed by the super-role. When the org chart is
          // generated, these will collapse into a single entry listing multiple roles and using the super role as the
          // title.
          // TODO: this is a little messy
          var impRole = roles.get(impliedRoleName, {
            required: true,
            errMsgGen: function errMsgGen(name) {
              return "Could not find implied role '".concat(name, "' while building org structure.");
            }
          }); // console.error(`Processing implied role: ${impRole.name}...`) // DEBUG

          if (impRole.isTitular() && !nodes.find(function (n) {
            return n.name === impRole.name;
          })) {
            // only titular roles not already defined are implied into the org structure
            // console.error("I'm in!") // DEBUG
            // TODO: in theroy, I believe if the current node has no manager, then implied role's don't either.
            // Otheriwse, the primary manager is effectively one's self, in the 'super' role or the same manager as the
            // super role, depending on the manager protocol.
            // console.error("\n\nHey:\n", role, node, "\n\n")// DEBUG
            var managingRoleName = mngrProtocol === 'self' ? role.name : mngrProtocol === 'same' ? node.primaryManagerNodeName : function (e) {
              throw e;
            }(new Error("Unkown (or undefined?) manager protocol '".concat(mngrProtocol, "' found while processing org structure."))); // TODO: support optional managers.

            processNode(new Node([impliedRoleName, managingRoleName, null], true));
          }
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }; // end func processNode


    var _iterator2 = _createForOfIteratorHelper$2(nodes),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var node = _step2.value;
        processNode(node);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var orgRoles = this.getNodes().map(function (n) {
      return n.getName();
    }); // check all org role names reference defined roles

    var undefinedRoles = orgRoles.filter(function (roleName) {
      return roles.get(roleName) === undefined;
    });

    if (undefinedRoles.length > 0) {
      throw new Error('Found undefined role reference' + "".concat(undefinedRoles.length > 1 ? 's' : '', ": ").concat(undefinedRoles.join(', ')));
    } // check for duplicate org roles


    var dupeRoles = orgRoles.filter(function (name, index) {
      return orgRoles.indexOf(name) !== index;
    });

    if (dupeRoles.length > 0) {
      throw new Error("Found non-unique role".concat(dupeRoles.length > 1 ? 's' : '', " ") + "references in org structure: ".concat(dupeRoles.join(', ')));
    }
  }

  _createClass$1(OrgStructure, [{
    key: "getRoots",
    value: function getRoots() {
      return _toConsumableArray(this.roots);
    }
  }, {
    key: "getNodes",
    value: function getNodes() {
      return this.roots.reduce(function (nodes, root) {
        return nodes.concat(root.getTreeNodes());
      }, []);
    }
  }, {
    key: "getNodeByRoleName",
    value: function getNodeByRoleName(name) {
      return this.getNodes().find(function (n) {
        return n.getName() === name;
      });
    }
  }]);

  return OrgStructure;
}();

// JSONLoop is a trivial rework of https://github.com/dabeng/JSON-Loop cc9bf8d3ec9d366160
var nodes = []; // used as temp workpad

var JSONLoop = /*#__PURE__*/function () {
  function JSONLoop(obj, idPropertyName, childrenPropertyName) {
    _classCallCheck$1(this, JSONLoop);

    this.id = idPropertyName;
    this.children = childrenPropertyName;
    this.count = 0;
    this.countNodes(obj);
    this.total = this.count + 0;
  }

  _createClass$1(JSONLoop, [{
    key: "isEmpty",
    value: function isEmpty(obj) {
      return Object.keys(obj).length === 0;
    }
  }, {
    key: "countNodes",
    value: function countNodes(obj) {
      var that = this;
      this.count++;
      return function () {
        if (!obj || that.isEmpty(obj)) {
          return false;
        } else {
          if (obj[that.children]) {
            obj[that.children].forEach(function (child) {
              that.countNodes(child);
            });
          }
        }
      }();
    }
  }, {
    key: "generateClone",
    value: function generateClone(obj) {
      var target = {};

      for (var i in obj) {
        if (i !== this.children) {
          target[i] = obj[i];
        }
      }

      return target;
    }
  }, {
    key: "findNodeById",
    value: function findNodeById(obj, id, callback) {
      if (obj[this.id] === id || obj.ids.some(function (testId) {
        return testId === id;
      })) {
        this.count = this.total + 0;
        callback(null, obj);
      } else {
        if (this.count === 1) {
          this.count = this.total + 0;
          callback(new Error('the node does not exist'));
        }

        this.count--;

        if (obj[this.children]) {
          var that = this;
          obj[this.children].forEach(function (node) {
            that.findNodeById(node, id, callback);
          });
        }
      }
    }
  }, {
    key: "matchConditions",
    value: function matchConditions(obj, conditions) {
      var flag = true;
      Object.keys(conditions).forEach(function (item) {
        if (typeof conditions[item] === 'string' || typeof conditions[item] === 'number') {
          if (obj[item] !== conditions[item]) {
            flag = false;
            return false;
          }
        } else if (conditions[item] instanceof RegExp) {
          if (!conditions[item].test(obj[item])) {
            flag = false;
            return false;
          }
        } else if (_typeof(conditions[item]) === 'object') {
          Object.keys(conditions[item]).forEach(function (subitem) {
            switch (subitem) {
              case '>':
                {
                  if (!(obj[item] > conditions[item][subitem])) {
                    flag = false;
                    return false;
                  }

                  break;
                }

              case '<':
                {
                  if (!(obj[item] < conditions[item][subitem])) {
                    flag = false;
                    return false;
                  }

                  break;
                }

              case '>=':
                {
                  if (!(obj[item] >= conditions[item][subitem])) {
                    flag = false;
                    return false;
                  }

                  break;
                }

              case '<=':
                {
                  if (!(obj[item] <= conditions[item][subitem])) {
                    flag = false;
                    return false;
                  }

                  break;
                }

              case '!==':
                {
                  if (!(obj[item] !== conditions[item][subitem])) {
                    flag = false;
                    return false;
                  }

                  break;
                }
            }
          });

          if (!flag) {
            return false;
          }
        }
      });

      if (!flag) {
        return false;
      }

      return true;
    }
  }, {
    key: "findNodes",
    value: function findNodes(obj, conditions, callback) {
      var that = this;
      var copy = []; // ths shallow copy of nodes array

      return function (obj, conditions, callback) {
        if (that.matchConditions(obj, conditions)) {
          nodes.push(obj);

          if (that.count === 1) {
            that.count = that.total + 0;
            copy = nodes.slice(0);
            nodes = [];
            callback(null, copy);
          }

          that.count--;
        } else {
          if (that.count === 1) {
            that.count = that.total + 0;
            copy = nodes.slice(0);
            nodes = [];
            callback(null, copy);
          }

          that.count--;

          if (obj[that.children]) {
            obj[that.children].forEach(function (child) {
              that.findNodes(child, conditions, callback);
            });
          }
        }
      }(obj, conditions, callback);
    }
  }, {
    key: "findParent",
    value: function findParent(obj, node, callback, needCleanNode) {
      var that = this;
      this.findNodeById(obj, node.parent_id, function (err, parent) {
        if (err) callback(new Error("Could not find parent. ".concat(err)));else {
          if (needCleanNode) {
            callback(null, that.generateClone(parent));
          } else {
            callback(null, parent);
          }
        }
      });
    }
  }, {
    key: "findSiblings",
    value: function findSiblings(obj, node, callback) {
      var that = this;
      this.findParent(obj, node, function (err, parent) {
        if (err) {
          callback(new Error('its sibling nodes do not exist'));
        } else {
          var siblings = [];
          parent[that.children].forEach(function (item) {
            if (item[that.id] !== node[that.id]) {
              siblings.push(that.generateClone(item));
            }
          });
          callback(null, siblings);
        }
      }, false);
    }
  }, {
    key: "findAncestors",
    value: function findAncestors(obj, node, callback) {
      var that = this;

      if (node[this.id] === obj[this.id]) {
        var copy = nodes.slice(0);
        nodes = [];
        callback(null, copy);
      } else {
        this.findParent(obj, node, function (err, parent) {
          if (err) {
            callback(new Error('its ancestor nodes do not exist'));
          } else {
            nodes.push(parent);
            that.findAncestors(obj, parent, callback);
          }
        });
      }
    }
  }]);

  return JSONLoop;
}();

/**
* Basic methods for accessing the accounts data. Note that functionality is split up like this to make these functions
* easier to unit test.
*/

/**
* Retrieves a single account entry by name.
*/
var get$1 = function get(data, name) {
  var _data$thirdPartyAccou;

  return (data === null || data === void 0 ? void 0 : (_data$thirdPartyAccou = data.thirdPartyAccounts) === null || _data$thirdPartyAccou === void 0 ? void 0 : _data$thirdPartyAccou[name]) && toStandalone$1(data, name);
};

var list$1 = function list(data) {
  return Object.keys((data === null || data === void 0 ? void 0 : data.thirdPartyAccounts) || {}).sort().map(function (key) {
    return toStandalone$1(data, key);
  });
}; // helper/non-exported items

/**
* Creates a new/copy of the account data with an additional 'name' field. The name should be the key value which
* pointed to the account data.
*/


var toStandalone$1 = function toStandalone(data, name) {
  return Object.assign({}, data.thirdPartyAccounts[name], {
    name: name
  });
};

/**
* Public API for managing third-party account records. Uses the `Accounts` library, which actually implements the
* functions. The library is split like this to make testing easier.
*/

var AccountsAPI = /*#__PURE__*/function () {
  function AccountsAPI(org) {
    _classCallCheck$1(this, AccountsAPI);

    this.org = org;
    this.checkCondition = AccountsAPI.checkCondition;
    this.key = 'name';
  }

  _createClass$1(AccountsAPI, [{
    key: "get",
    value: function get(name) {
      return get$1(this.org.innerState, name);
    }
  }, {
    key: "list",
    value: function list() {
      return list$1(this.org.innerState);
    }
  }]);

  return AccountsAPI;
}();
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Account targets in
* an audit. We do this weird 'defineProperty' thing because it effectively gives us a 'static const'
*/


var checkCondition$3 = function checkCondition(condition, acct) {
  var parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0,
    NONE: 0,
    LOW: 1,
    MODERATE: 2,
    HIGH: 3,
    EXISTENTIAL: 4
  }, acct.parameters); // TODO: create a handly conversion class/lib for the sensitivity codes; SensitivityCode?

  var sensitivityCode = acct.sensitivity || 'EXISTENTIAL';

  switch (sensitivityCode) {
    case 'NONE':
      parameters.SENSITIVITY = 0;
      break;

    case 'LOW':
      parameters.SENSITIVITY = 1;
      break;

    case 'MODERATE':
      parameters.SENSITIVITY = 2;
      break;

    case 'HIGH':
      parameters.SENSITIVITY = 3;
      break;

    case 'EXISTENTIAL':
      parameters.SENSITIVITY = 4;
      break;

    default:
      throw new Error("Unknown sensitivity code: '".concat(sensitivityCode, "'."));
  } // configure the non-existent tags to 'zero' out


  var zeroRes = [/BUSINESS|NETWORKING/];
  var evaluator = new Evaluator({
    parameters: parameters,
    zeroRes: zeroRes
  });
  return evaluator.evalTruth(condition);
};

Object.defineProperty(AccountsAPI, 'checkCondition', {
  value: checkCondition$3,
  writable: false,
  enumerable: true,
  configurable: false
});

var assertThisInitialized = createCommonjsModule$2(function (module) {
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _assertThisInitialized = unwrapExports$2(assertThisInitialized);

var setPrototypeOf = createCommonjsModule$2(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports$2(setPrototypeOf);

var inherits = createCommonjsModule$2(function (module) {
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _inherits = unwrapExports$2(inherits);

var possibleConstructorReturn = createCommonjsModule$2(function (module) {
var _typeof = _typeof_1["default"];



function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _possibleConstructorReturn = unwrapExports$2(possibleConstructorReturn);

var getPrototypeOf = createCommonjsModule$2(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _getPrototypeOf = unwrapExports$2(getPrototypeOf);

var Role = /*#__PURE__*/function () {
  function Role(rec) {
    _classCallCheck$1(this, Role);

    Object.assign(this, rec);
  }

  _createClass$1(Role, [{
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "isTitular",
    value: function isTitular() {
      return !!this.titular;
    }
  }, {
    key: "isDesignated",
    value: function isDesignated() {
      return !!this.designated;
    }
  }, {
    key: "isQualifiable",
    value: function isQualifiable() {
      return !!this.qualifiable;
    }
  }]);

  return Role;
}();

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AttachedRole = /*#__PURE__*/function (_Role) {
  _inherits(AttachedRole, _Role);

  var _super = _createSuper(AttachedRole);

  function AttachedRole(baseRole, rec, manager, staffMember) {
    var _this;

    _classCallCheck$1(this, AttachedRole);

    _this = _super.call(this, baseRole);

    if (!baseRole.isQualifiable() && rec.qualifier !== undefined) {
      throw new Error("Attempt to qualify non-qualifiable role '".concat(baseRole.getName(), "' ") + "for staff member '".concat(staffMember.getEmail(), "'."));
    }

    Object.assign(_assertThisInitialized(_this), rec);
    _this.manager = manager;
    return _this;
  }

  _createClass$1(AttachedRole, [{
    key: "getManager",
    value: function getManager() {
      return this.manager;
    }
  }, {
    key: "getManagerRole",
    value: function getManagerRole() {
      return this.managerRole;
    }
  }, {
    key: "getQualifier",
    value: function getQualifier() {
      return this.qualifier ? this.qualifier : null;
    }
  }, {
    key: "getQualifiedName",
    value: function getQualifiedName() {
      return "".concat(this.getQualifier(), " ").concat(this.getName());
    }
  }, {
    key: "isActing",
    value: function isActing() {
      return !!this.acting;
    }
  }]);

  return AttachedRole;
}(Role);

var Roles = /*#__PURE__*/function () {
  function Roles(org, rolesData) {
    _classCallCheck$1(this, Roles);

    this.org = org;
    this.items = rolesData.map(function (rec) {
      return new Role(rec);
    });
    this.map = this.items.reduce(function (acc, role, i) {
      if (acc[role.getName()] !== undefined) {
        throw new Error("Role with name '".concat(role.name, "' already exists at entry ").concat(i, "."));
      }

      acc[role.getName()] = role;
      return acc;
    }, {});
    this.checkCondition = checkCondition$2;
    this.key = 'name';
  } // TODO: deprecated


  _createClass$1(Roles, [{
    key: "getAll",
    value: function getAll() {
      return this.items.slice();
    }
  }, {
    key: "list",
    value: function list() {
      return this.items.slice();
    }
  }, {
    key: "get",
    value: function get(name, opts) {
      var _ref = opts || {},
          required = _ref.required,
          fuzzy = _ref.fuzzy,
          errMsgGen = _ref.errMsgGen; // we always try an exact match first


      var result = this.map[name]; // now fuzzy match if desired

      if (result === undefined && fuzzy === true) {
        var matchingRoles = this.items.filter(function (role) {
          var _role$matcher;

          if (name === 'Chief admin officer') console.log("Testing ".concat(role.name, ": ").concat((_role$matcher = role.matcher) === null || _role$matcher === void 0 ? void 0 : _role$matcher.pattern)); // DEBUG

          return role.matcher !== undefined && name.match(new RegExp(role.matcher.pattern, 'i')) && !(role.matcher.antiPattern && name.match(new RegExp(role.matcher.antiPattern, 'i')));
        });

        if (matchingRoles.length === 1) {
          result = matchingRoles[0];
        } else if (matchingRoles.length > 1) {
          throw new Error("Ambiguous role '".concat(name, "' matched to '").concat(matchingRoles.map(function (r) {
            return r.name;
          }).join("', '"), "'"));
        }
      }

      if (result === undefined && required) {
        throw new Error((errMsgGen === null || errMsgGen === void 0 ? void 0 : errMsgGen(name)) || "Did not find requried role '".concat(name, "'."));
      }

      return result;
    }
  }, {
    key: "getStaffInRole",
    value: function getStaffInRole(roleName) {
      return this.org.staff.list().filter(function (s) {
        return s.roles.some(function (r) {
          return r.name === roleName;
        });
      });
    }
    /**
    * Swaps out the 'super role' name for the actual super role object.
    */

  }, {
    key: "hydrate",
    value: function hydrate() {
      var _this = this;

      this.items.forEach(function (role, i) {
        if (role.superRole !== undefined) {
          var superRole = _this.get(role.superRole);

          if (superRole === undefined) {
            throw new Error("Could not find super-role '".concat(role.superRole, "' for role '").concat(role.getName(), "' (entry ").concat(i, ")."));
          }

          role.superRole = superRole;
        }
      });
      return this;
    }
  }]);

  return Roles;
}();
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Roles targets in
* an audit.
*/


var checkCondition$2 = function checkCondition(condition, role) {
  var parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0
  }, role.parameters); // TODO: test if leaving it 'true'/'false' works.

  parameters.DESIGNATED = role.designated ? 1 : 0;
  parameters.SINGULAR = role.singular ? 1 : 0;
  var zeroRes = [];
  var evaluator = new Evaluator({
    parameters: parameters,
    zeroRes: zeroRes
  });
  return evaluator.evalTruth(condition);
};

var StaffMember = /*#__PURE__*/function () {
  function StaffMember(record) {
    _classCallCheck$1(this, StaffMember);

    Object.assign(this, record);
    this.attachedRolesByName = {};
    this.reportsByReportRole = {}; // roles keyed to reports role names
  }

  _createClass$1(StaffMember, [{
    key: "getEmail",
    value: function getEmail() {
      return this.email;
    }
  }, {
    key: "setEmail",
    value: function setEmail(v) {
      this.email = v;
    }
    /**
    * Combines the given and family name (if any) to produce the full name. The default is to display using 'common
    * format'. Supports option field 'officialFormat'. The function does NOT currently support i18n variations, so for
    * now 'common format' is '<first> <last>' and 'officialFormat' is '<last>, <first>'.
    */

  }, {
    key: "getFullName",
    value: function getFullName() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // TODO: i18n the display order
      var _options$officialForm = options.officialFormat,
          officialFormat = _options$officialForm === void 0 ? false : _options$officialForm;
      var givenName = this.getGivenName();
      var familyName = this.getFamilyName();

      if (familyName && givenName) {
        if (officialFormat === true) {
          return "".concat(familyName, ", ").concat(givenName);
        } else {
          return "".concat(givenName, " ").concat(familyName);
        }
      } else if (familyName) {
        return familyName;
      } else {
        return givenName;
      }
    }
  }, {
    key: "getFamilyName",
    value: function getFamilyName() {
      return this.familyName;
    }
  }, {
    key: "setFamilyName",
    value: function setFamilyName(v) {
      this.familyName = v;
    }
  }, {
    key: "getGivenName",
    value: function getGivenName() {
      return this.givenName;
    }
  }, {
    key: "setGivenName",
    value: function setGivenName(v) {
      this.givenName = v;
    }
  }, {
    key: "getStartDate",
    value: function getStartDate() {
      return this.startDate;
    }
  }, {
    key: "setStartDate",
    value: function setStartDate(v) {
      this.startDate = v;
    }
  }, {
    key: "getEmploymentStatus",
    value: function getEmploymentStatus() {
      return this.employmentStatus;
    }
  }, {
    key: "setEmploymentStatus",
    value: function setEmploymentStatus(v) {
      this.employmentStatus = v;
    }
  }, {
    key: "getRoleNames",
    value: function getRoleNames() {
      return this.roles.map(function (r) {
        return r.name;
      });
    }
  }, {
    key: "hasRole",
    value: function hasRole(roleName) {
      return !!this.attachedRolesByName[roleName];
    }
  }, {
    key: "getAttachedRoles",
    value: function getAttachedRoles() {
      return this.roles.slice();
    }
  }, {
    key: "getAttachedRole",
    value: function getAttachedRole(roleName) {
      return this.attachedRolesByName[roleName];
    }
  }, {
    key: "getManagers",
    value: function getManagers() {
      return this.roles.map(function (r) {
        return r.manager;
      });
    }
  }, {
    key: "getReportsByRoleName",
    value: function getReportsByRoleName(roleName) {
      return this.reportsByReportRole[roleName] || [];
    }
  }, {
    key: "getReports",
    value: function getReports() {
      var _this = this;

      return Object.values(this.reportsByReportRole).reduce(function (acc, reps) {
        return acc.concat(reps);
      }, []).filter(function (rep) {
        return rep.getEmail() !== _this.getEmail();
      });
    }
  }, {
    key: "getParameters",
    value: function getParameters() {
      return this.parameters;
    }
  }]);

  return StaffMember;
}();

function _createForOfIteratorHelper$1$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1$2(o, minLen); }

function _arrayLikeToArray$1$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Staff = /*#__PURE__*/function () {
  function Staff(fileName) {
    _classCallCheck$1(this, Staff);

    this.fileName = fileName;
    var data = JSON.parse(fs.readFileSync(fileName));
    this.members = data.map(function (rec) {
      return new StaffMember(rec);
    });
    this.checkCondition = checkCondition$1;
    this.key = 'email';
  } // TODO: depracated


  _createClass$1(Staff, [{
    key: "getAll",
    value: function getAll() {
      return this.members.slice();
    }
  }, {
    key: "list",
    value: function list() {
      return this.members.slice();
    }
  }, {
    key: "get",
    value: function get(email) {
      return this.map[email];
    }
  }, {
    key: "getByRoleName",
    value: function getByRoleName(roleName) {
      return this.members.filter(function (s) {
        return s.hasRole(roleName);
      });
    }
  }, {
    key: "addData",
    value: function addData(memberData, _ref) {
      var _ref$deferHydration = _ref.deferHydration,
          deferHydration = _ref$deferHydration === void 0 ? false : _ref$deferHydration;
      this.members.push(new StaffMember(memberData));
      if (!deferHydration) this.hydrate(this.org);
    }
  }, {
    key: "remove",
    value: function remove(email) {
      email = email.toLowerCase();
      var matches = this.getAll().filter(function (member) {
        return member.email === email;
      }); // TODO: also need to check if this person is a manager and refuse to remove until that's changed

      if (matches.length === 0) {
        throw new Error("Could not find staff member with email ".concat(email, "."));
      } else if (matches.length > 1) {
        throw new Error("Staff database consistency error. Found multiple entires for '".concat(email, "'."));
      }

      this.members = this.members.filter(function (member) {
        return member.email !== email;
      });
    }
  }, {
    key: "write",
    value: function write() {
      fs.writeFileSync(this.fileName, this.toString());
    }
    /**
     * Swaps out references to roles and managers by name and email (respectively) with the actual role and manager
     * objects.
     */

  }, {
    key: "hydrate",
    value: function hydrate(org) {
      var _this = this;

      this.org = org;
      this.map = this.members.reduce(function (acc, member, i) {
        if (acc[member.getEmail()] !== undefined) {
          throw new Error("Staff member with email '".concat(member.getEmail(), "' already exists at entry ").concat(i, "."));
        }

        acc[member.getEmail()] = member;
        return acc;
      }, {});
      this.members.forEach(function (s) {
        s.roles = s.roles.reduce(function (roles, rec) {
          // Yes, both maps AND has side effects. Suck it!
          if (rec instanceof AttachedRole) {
            roles.push(rec);
            return roles;
          }

          if (typeof rec === 'string') {
            rec = {
              name: rec
            };
          } // Verify rec references a good role. Note, we check the 'orgStructure' because there may be a role defined
          // globally that isn't in use in the org.


          var role = org.getRoles().get(rec.name, {
            required: true,
            errMsgGen: function errMsgGen(name) {
              return "Staff member '".concat(s.getEmail(), "' claims unknown role '").concat(name, "'.");
            }
          });
          roles.push(convertRoleToAttached({
            staffMember: s,
            rec: rec,
            role: role,
            org: _this.org
          }));
          processImpliedRoles(roles, s, rec, role, _this.org);
          return roles;
        }, []); // StaffMember roles reduce
      }); // StaffMember iteration
      // we need to determine the manager role after everything else has been set up because the manager's role is not
      // determined strictly by the abstract org chart alone, since there may be multiple candidates

      this.members.forEach(function (s) {
        s.getAttachedRoles().forEach(function (attachedRole) {
          var roleManager = attachedRole.getManager();

          if (attachedRole.isTitular()) {
            // if there's only one possible manager, let's set it
            if (roleManager === null) {
              var possibleManagerNodes = _this.org.orgStructure.getNodeByRoleName(attachedRole.name).getPossibleManagerNodes();

              console.log("for ".concat(s.email, "/").concat(attachedRole.getName(), ", possible nodes: ").concat(possibleManagerNodes.map(function (n) {
                return n.name;
              }).join(', '))); // DEBUG

              var possibleManagers = possibleManagerNodes.reduce(function (list, node) {
                list.push.apply(list, _toConsumableArray(org.staff.getByRoleName(node.name)));
                return list;
              }, []);
              console.log("possible managers: ".concat(possibleManagers.map(function (m) {
                return m.email;
              }).join(', '))); // DEBUG

              if (possibleManagers.length === 1) {
                var managerEmail = possibleManagers[0].email;
                var managedRoleName = attachedRole.getName();
                roleManager = hydrateManager({
                  org: org,
                  staffMember: s,
                  managerEmail: managerEmail,
                  managedRoleName: managedRoleName
                });
                attachedRole.manager = roleManager;
              }
            }

            if (roleManager !== null) {
              var managerRole = null;
              var node = org.orgStructure.getNodeByRoleName(attachedRole.name);

              if (node === undefined) {
                throw new Error("Did not find org structure node for '".concat(attachedRole.name, "'."));
              }

              if (node.primaryManagerNodeName) {
                if (roleManager.hasRole(node.primaryManagerNodeName)) {
                  managerRole = roleManager.getAttachedRole(node.primaryManagerNodeName);
                } else {
                  node.possibleMngrNames.some(function (name) {
                    return managerRole = roleManager.getAttachedRole(name);
                  });
                }
              }

              attachedRole.managerRole = managerRole;
            } // has manager check

          } // titular check

        });
      });
      return this;
    }
    /**
    * Returns the JSON string of the de-hydrated data structure.
    */

  }, {
    key: "toString",
    value: function toString() {
      var flatJson = this.members.map(function (s) {
        var data = {
          email: s.getEmail(),
          familyName: s.getFamilyName(),
          givenName: s.getGivenName(),
          startDate: s.getStartDate(),
          roles: [],
          employmentStatus: s.getEmploymentStatus(),
          parameters: s.getParameters(),
          tbd: s.tbd
        };
        s.roles.forEach(function (attachedRole) {
          if (attachedRole.impliedBy === undefined) {
            var _attachedRole$getMana;

            var roleData = {
              name: attachedRole.getName(),
              manager: (_attachedRole$getMana = attachedRole.getManager()) === null || _attachedRole$getMana === void 0 ? void 0 : _attachedRole$getMana.getEmail(),
              qualifier: attachedRole.qualifier,
              acting: attachedRole.acting,
              layout: attachedRole.layout
            };
            data.roles.push(roleData);
          }
        });
        return data;
      });
      return JSON.stringify(flatJson, null, '  ');
    }
  }]);

  return Staff;
}();

var convertRoleToAttached = function convertRoleToAttached(_ref2) {
  var staffMember = _ref2.staffMember,
      rec = _ref2.rec,
      role = _ref2.role,
      org = _ref2.org,
      impliedBy = _ref2.impliedBy,
      display = _ref2.display;

  if (role.isTitular()) {
    // notice we check 'rec', not 'role'; role may be implied.
    var orgNode = org.orgStructure.getNodeByRoleName(rec.name);

    if (orgNode === undefined) {
      throw new Error("Staff member '".concat(staffMember.getEmail(), "' claims role '").concat(rec.name, "' not used in this org."));
    } // TODO: check the prim manager from the org structure persective
    // orgNode.getPrimaryManagerNode() !== null

  } // TODO: this is only valid for titular roles, yeah? nest this if...


  var roleManager = null;

  if (role.titular === true) {
    if (rec.manager && typeof rec.manager === 'string') {
      roleManager = hydrateManager({
        org: org,
        staffMember: staffMember,
        managerEmail: rec.manager,
        managedRoleName: role.name
      });
    }
  } // TODO: have constructor take an object and include 'impliedBy'


  var attachedRole = new AttachedRole(role, rec, roleManager, staffMember);
  attachedRole.display = display;

  if (impliedBy !== undefined) {
    attachedRole.impliedBy = impliedBy;
  }

  staffMember.attachedRolesByName[role.name] = attachedRole;
  return attachedRole;
}; // Replace manager ID with manager object and add ourselves to their reports


var hydrateManager = function hydrateManager(_ref3) {
  var org = _ref3.org,
      managerEmail = _ref3.managerEmail,
      managedRoleName = _ref3.managedRoleName,
      staffMember = _ref3.staffMember;
  var roleManager = org.getStaff().get(managerEmail);

  if (roleManager === undefined) {
    throw new Error("No such manager '".concat(managerEmail, "' found while loading staff member '").concat(staffMember.getEmail(), "'."));
  } // Add ourselves to the manager's reports


  if (roleManager.reportsByReportRole[managedRoleName] === undefined) {
    roleManager.reportsByReportRole[managedRoleName] = [];
  }

  roleManager.reportsByReportRole[managedRoleName].push(staffMember);
  return roleManager;
};

var processImpliedRoles = function processImpliedRoles(roles, s, rec, role, org) {
  var _iterator = _createForOfIteratorHelper$1$2(role.implies || []),
      _step;

  try {
    var _loop = function _loop() {
      var _step$value = _step.value,
          impliedRoleName = _step$value.name,
          mngrProtocol = _step$value.mngrProtocol,
          display = _step$value.display;

      // An implied role can come from multiple sources, so let's check if it's already in place
      if (!roles.some(function (r) {
        return r.name === impliedRoleName;
      })) {
        var impliedRole = org.getRoles().get(impliedRoleName, {
          required: true,
          errMsgGen: function errMsgGen(name) {
            return "Staff member '".concat(s.getEmail(), "' claims unknown role '").concat(name, "' (by implication).");
          }
        }); // console.error(`Processing staff implied role: ${s.getEmail()}/${impliedRoleName}`) // DEBUG

        var manager = mngrProtocol === 'self' ? s.getEmail() : mngrProtocol === 'same' ? rec.manager : function (e) {
          throw e;
        }(new Error("Unkown (or undefined?) manager protocol '".concat(mngrProtocol, "' found while processing staff.")));
        var impliedRec = {
          name: impliedRoleName,
          manager: manager
        };
        roles.push(convertRoleToAttached({
          staffMember: s,
          rec: impliedRec,
          role: impliedRole,
          org: org,
          impliedBy: role,
          display: display
        }));
        processImpliedRoles(roles, s, impliedRec, impliedRole, org);
      } // duplicate test

    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    } // implies loop

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}; // Setup 'zeroRes' matchers for 'checkCondition'. If matching parameters are missing, treated as false rather than an
// error


var roleRe = /^HAS_[A-Z_]+_ROLE$/;
var staffParameters = ['^USES_CENTRALIZED_ANTIVIRUS$', '^USES_CENTRALIZED_FIREWALL$'];
var zeroRes = staffParameters.map(function (p) {
  return new RegExp(p);
});
zeroRes.push(roleRe);
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Staff targets in
* an audit.
*/

var checkCondition$1 = function checkCondition(condition, member) {
  var parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0
  }, member.parameters); // TODO: test if leaving it 'true'/'false' works.

  parameters.IS_EMPLOYEE = member.getEmploymentStatus() === 'employee' ? 1 : 0;
  parameters.IS_CONTRACTOR = member.getEmploymentStatus() === 'contractor' ? 1 : 0;
  member.getRoleNames().forEach(function (role) {
    parameters["HAS_".concat(role.toUpperCase().replace(/ /g, '_'), "_ROLE")] = 1;
  });
  var evaluator = new Evaluator({
    parameters: parameters,
    zeroRes: zeroRes
  });
  return evaluator.evalTruth(condition);
};

Staff.checkCondition = checkCondition$1;

/**
* Basic methods for accessing the vendors/product data. Note that functionality is split up like this to make these
* functions easier to unit test.
*/

/**
* Retrieves a single vendor/product entry by name.
*/
var get = function get(data, name) {
  var _data$vendors;

  return (data === null || data === void 0 ? void 0 : (_data$vendors = data.vendors) === null || _data$vendors === void 0 ? void 0 : _data$vendors[name]) && toStandalone(data, name);
};

var list = function list(data) {
  return Object.keys((data === null || data === void 0 ? void 0 : data.vendors) || {}).sort().map(function (key) {
    return toStandalone(data, key);
  });
}; // helper/non-exported items

/**
* Since our data is complete as is, this just makes a copy for safety's sake.
*/


var toStandalone = function toStandalone(data, name) {
  return Object.assign({
    id: name
  }, data.vendors[name]);
};

/**
* Public API for managing vendor/product records. Uses the `Vendors` library, which actually implements the functions.
* The library is split like this to make testing easier.
*/

var VendorsAPI = /*#__PURE__*/function () {
  function VendorsAPI(org) {
    _classCallCheck$1(this, VendorsAPI);

    this.org = org;
    this.checkCondition = VendorsAPI.checkCondition;
    this.key = 'Name';
  }

  _createClass$1(VendorsAPI, [{
    key: "get",
    value: function get$1(name) {
      return get(this.org.innerState, name);
    }
  }, {
    key: "list",
    value: function list$1() {
      return list(this.org.innerState);
    }
  }]);

  return VendorsAPI;
}();
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Account targets in
* an audit. We do this weird 'defineProperty' thing because it effectively gives us a 'static const'
*/


var checkCondition = function checkCondition(condition, productRec) {
  var parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0,
    NONE: 0,
    LOW: 1,
    MODERATE: 2,
    HIGH: 3,
    EXISTENTIAL: 4
  }, productRec.parameters); // TODO: create a handly conversion class/lib for the sensitivity codes; SensitivityCode?

  var sensitivityCode = productRec['Sensitivity approval'] || 'quarantined only';

  switch (sensitivityCode) {
    case 'top secret use':
      parameters.SENSITIVITY = 0;
      break;

    case 'secret use':
      parameters.SENSITIVITY = 1;
      break;

    case 'sensitive use':
      parameters.SENSITIVITY = 2;
      break;

    case 'general use':
      parameters.SENSITIVITY = 3;
      break;

    case 'quarantined only':
      parameters.SENSITIVITY = 4;
      break;

    default:
      throw new Error("Unknown sensitivity approval code: '".concat(sensitivityCode, "'."));
  } // configure the non-existent tags to 'zero' out
  // const zeroRes = [/BUSINESS|NETWORKING/]


  var zeroRes = [];
  var evaluator = new Evaluator({
    parameters: parameters,
    zeroRes: zeroRes
  });
  return evaluator.evalTruth(condition);
};

Object.defineProperty(VendorsAPI, 'checkCondition', {
  value: checkCondition,
  writable: false,
  enumerable: true,
  configurable: false
});

/* @flow */
/*::

type DotenvParseOptions = {
  debug?: boolean
}

// keys and values from src
type DotenvParseOutput = { [string]: string }

type DotenvConfigOptions = {
  path?: string, // path to .env file
  encoding?: string, // encoding of .env file
  debug?: string // turn on logging for debugging purposes
}

type DotenvConfigOutput = {
  parsed?: DotenvParseOutput,
  error?: Error
}

*/





function log (message /*: string */) {
  console.log(`[dotenv][DEBUG] ${message}`);
}

const NEWLINE = '\n';
const RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
const RE_NEWLINES = /\\n/g;
const NEWLINES_MATCH = /\r\n|\n|\r/;

// Parses src into an Object
function parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {
  const debug = Boolean(options && options.debug);
  const obj = {};

  // convert Buffers before splitting into lines and processing
  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {
    // matching "KEY' and 'VAL' in 'KEY=VAL'
    const keyValueArr = line.match(RE_INI_KEY_VAL);
    // matched?
    if (keyValueArr != null) {
      const key = keyValueArr[1];
      // default undefined or missing values to empty string
      let val = (keyValueArr[2] || '');
      const end = val.length - 1;
      const isDoubleQuoted = val[0] === '"' && val[end] === '"';
      const isSingleQuoted = val[0] === "'" && val[end] === "'";

      // if single or double quoted, remove quotes
      if (isSingleQuoted || isDoubleQuoted) {
        val = val.substring(1, end);

        // if double quoted, expand newlines
        if (isDoubleQuoted) {
          val = val.replace(RE_NEWLINES, NEWLINE);
        }
      } else {
        // remove surrounding whitespace
        val = val.trim();
      }

      obj[key] = val;
    } else if (debug) {
      log(`did not match key and value when parsing line ${idx + 1}: ${line}`);
    }
  });

  return obj
}

function resolveHome (envPath) {
  return envPath[0] === '~' ? path__default.join(os.homedir(), envPath.slice(1)) : envPath
}

// Populates process.env from .env file
function config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {
  let dotenvPath = path__default.resolve(process.cwd(), '.env');
  let encoding /*: string */ = 'utf8';
  let debug = false;

  if (options) {
    if (options.path != null) {
      dotenvPath = resolveHome(options.path);
    }
    if (options.encoding != null) {
      encoding = options.encoding;
    }
    if (options.debug != null) {
      debug = true;
    }
  }

  try {
    // specifying an encoding returns a string instead of a buffer
    const parsed = parse(fs__default.readFileSync(dotenvPath, { encoding }), { debug });

    Object.keys(parsed).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
        process.env[key] = parsed[key];
      } else if (debug) {
        log(`"${key}" is already defined in \`process.env\` and will not be overwritten`);
      }
    });

    return { parsed }
  } catch (e) {
    return { error: e }
  }
}

var config_1 = config;
var parse_1 = parse;

var main = {
	config: config_1,
	parse: parse_1
};

var loadBashSettings = function loadBashSettings(settingsPath) {
  if (!fs.existsSync(settingsPath)) {
    throw new Error("Did not find expected settings file: '".concat(settingsPath, "'"));
  } // else continue


  var envResult = main.config({
    path: settingsPath
  });

  if (envResult.error) {
    throw envResult.error;
  }

  for (var _len = arguments.length, requiredParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    requiredParams[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _requiredParams = requiredParams; _i < _requiredParams.length; _i++) {
    var reqParam = _requiredParams[_i];

    if (process.env[reqParam] === undefined) {
      throw new Error("Did not find expected '".concat(reqParam, "' value in settings file: ").concat(settingsPath));
    }
  }
};

var loadOrgState = function loadOrgState(dataPath) {
  var liqSettingsPath = "".concat(process.env.HOME, "/.liq/settings.sh");
  loadBashSettings(liqSettingsPath, 'LIQ_PLAYGROUND'); // first, we handle the original bash-centric approach, centered on individual settings

  var orgSettingsPath = "".concat(dataPath, "/orgs/settings.sh"); // TODO: the 'ORG_ID' is expected to be set from the old style settings.sh; we should take this in the constructor

  loadBashSettings(orgSettingsPath, 'ORG_ID'); // the 'settings.sh' values are now availale on process.env
  // and here's the prototype new approach; the read function handles the 'exists' check

  return read("".concat(dataPath, "/orgs/").concat(process.env.ORG_ID, ".json"));
};

function _createForOfIteratorHelper$6(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$6(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$6(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen); }

function _arrayLikeToArray$6(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Organization = /*#__PURE__*/function () {
  function Organization(dataPath, staffJsonPath) {
    _classCallCheck$1(this, Organization);

    // innerState defines:
    // * thirdPartyAccounts
    this.innerState = loadOrgState(dataPath); // TODO: Move all this to 'innerState' (for roles and staff, by loading all with the federated json used in
    // 'loadOrgState') and just use the global hydration.

    this.dataPath = dataPath;
    this.roles = new Roles(this, this.innerState.roles);
    this.roles.hydrate();
    this.orgStructure = new OrgStructure("".concat(dataPath, "/orgs/org_structure.json"), this.roles);
    this.staff = new Staff(staffJsonPath);
    this.staff.hydrate(this); // hydrate(this)

    this.accounts = new AccountsAPI(this);
    this.auditRecords = new AuditRecordsAPI(this);
    this.audits = this.innerState.audits;
    this.vendors = new VendorsAPI(this);
  } // TODO: deprecated; just use 'org.roles'


  _createClass$1(Organization, [{
    key: "getRoles",
    value: function getRoles() {
      return this.roles;
    } // TODO: deprecated; just use 'org.staff'

  }, {
    key: "getStaff",
    value: function getStaff() {
      return this.staff;
    }
  }, {
    key: "getSetting",
    value: function getSetting(key) {
      return process.env[key];
    }
  }, {
    key: "requireSetting",
    value: function requireSetting(key) {
      var value = this.getSetting(key);

      if (value === undefined) {
        throw new Error("No such company setting '".concat(key, "'."));
      }

      return value;
    }
  }, {
    key: "hasStaffInRole",
    value: function hasStaffInRole(email, roleName) {
      return this.getStaff().getByRoleName(roleName).some(function (s) {
        return s.getEmail() === email;
      });
    }
  }, {
    key: "getManagingRolesByManagedRoleName",
    value: function getManagingRolesByManagedRoleName(roleName) {
      return this.orgStructure.getNodeByRoleName(roleName).getPossibleManagerNodes();
    }
  }, {
    key: "generateOrgChartData",
    value: function generateOrgChartData() {
      var _this = this;

      var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'debang/OrgChart';

      // Implementation notes:
      // The overall structure is generated per the 'google-chart' style by processing each role of each titular role of
      // each staff member. At the moment, 'google-chart' style is more of an intermediate step than a final format as it
      // does not support the full range of desired features. The resulting data format is:
      //
      //    [ '<individual email>/role', '<manager email>/role', '<role qualifier>' ]
      if (style === 'google-chart') {
        var result = []; // luckily, the google org chart doesn't care whether we specify the nodes in order or not, so it's a simple
        // transform

        Object.values(this.getStaff().getAll()).forEach(function (s) {
          s.getAttachedRoles().forEach(function (r) {
            if (r.isTitular() && r.display !== false) {
              var myKey = "".concat(s.getEmail(), "/").concat(r.getName());
              var manager = s.getAttachedRole(r.getName()).getManager();
              if (!manager) result.push([myKey, '', r.getQualifier()]);else {
                var mngrEmail = manager.getEmail();

                var managingRoles = _this.getManagingRolesByManagedRoleName(r.getName());

                var managingRole = managingRoles.find(function (mngrRole) {
                  return _this.hasStaffInRole(mngrEmail, mngrRole.getName());
                });
                /* `${mngrEmail}/${r.getName()}` === myKey
                  ? r
                  : this.getManagingRolesByManagedRoleName(r.getName()).find(mngrRole =>
                      this.hasStaffInRole(mngrEmail, mngrRole.getName())
                    ) */

                if (!managingRole) {
                  throw new Error("Could not find manager ".concat(managingRoles.map(function (r) {
                    return "".concat(mngrEmail, "/").concat(r.name);
                  }).join('|'), " for ").concat(myKey, "."));
                }

                var managerKey = "".concat(mngrEmail, "/").concat(managingRole.getName());
                result.push([myKey, managerKey, r.getQualifier()]);
              }
            }
          });
        }); // console.error(result) // DEBUG

        return result;
      } else if (style === 'debang/OrgChart') {
        var _ret = function () {
          // Converts array-based/tabular '[staff, manager, qualifier] to a JSON tree, allowing for the same staff member
          // to appear at multiple nodes using conversion algorithm from debang demos: https://codepen.io/dabeng/pen/mRZpLK
          var seedData = _this.generateOrgChartData('google-chart').map(function (row) {
            var _row$0$split = row[0].split(/\//),
                _row$0$split2 = _slicedToArray(_row$0$split, 2),
                email = _row$0$split2[0],
                roleName = _row$0$split2[1]; // if there's a qualifier, we create the 'effective' role name here


            var qualifier = row[2];
            var title = qualifier ? roleName.replace(/^(Senior )?/, "$1".concat(qualifier, " ")) : roleName;

            var role = _this.roles.get(roleName);

            var staffMember = _this.getStaff().get(email);

            var acting = staffMember.getAttachedRole(roleName).acting;
            var tbd = staffMember.getAttachedRole(roleName).tbd;
            return {
              id: row[0],
              ids: [row[0]],
              parent_id: row[1],
              email: email,
              name: staffMember.getFullName(),
              titles: [title],
              roles: [role],
              acting: acting,
              tbd: tbd
            };
          });

          var data = {};
          var childNodes = []; // build out the full tree with each titualar role being it's own thing

          var item;

          while ((item = seedData.shift()) !== undefined) {
            if (!item.parent_id) {
              Object.assign(data, item);
            } else {
              var jsonloop = new JSONLoop(data, 'id', 'children');
              jsonloop.findNodeById(data, item.parent_id, function (err, node) {
                if (err) {
                  // try deferring the processing till the needed node is defined...
                  if (item._deferredMarker === true) {
                    throw new Error("Error finding '".concat(item.parent_id, "'; ").concat(err));
                  } else {
                    item._deferredMarker = true;
                    seedData.push(item);
                  }
                } else {
                  childNodes.push(item);

                  if (node.children) {
                    node.children.push(item);
                  } else {
                    node.children = [item];
                  }
                }
              });
            }
          }

          var mergeNodes = function mergeNodes(target, source) {
            var _target$titles, _target$ids, _target$roles;

            (_target$titles = target.titles).push.apply(_target$titles, _toConsumableArray(source.titles));

            (_target$ids = target.ids).push.apply(_target$ids, _toConsumableArray(source.ids));

            (_target$roles = target.roles).push.apply(_target$roles, _toConsumableArray(source.roles));
          }; // collapse/merge nodes where appropriate


          childNodes.forEach(function (node) {
            var jsonloop = new JSONLoop(data, 'id', 'children');
            jsonloop.findParent(data, node, function (err, parent) {
              if (err) throw new Error("Could not find parent for '".concat(node.id, "'; is chart valid?"));

              if (parent) {
                // merge sideways
                var _iterator = _createForOfIteratorHelper$6(node.roles),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var role = _step.value;

                    /* OK, wanted to do:
                    const sibblingsRoleNamesToMerge = role.implies?.filter(impSpec =>
                        impSpec.mngrProtocol === 'same' && node.ids.indexOf(`${node.email}/${impSpec.mergeWith}`) >= 0 )
                      .map(i => i.name)
                     But eslint chokes... on the question mark? It's not clear. It talks about an undefined range.
                    Tried updating eslint and babel components 2021-03-28 with no success.
                    TODO: look into this and report bug if nothing found.
                    */
                    var sibblingsRoleNamesToMerge = role.implies && role.implies.filter(function (impSpec) {
                      return impSpec.display !== false && impSpec.mngrProtocol === 'same' && node.ids.indexOf("".concat(node.email, "/").concat(impSpec.mergeWith)) >= 0;
                    }).map(function (i) {
                      return i.name;
                    }); // const trimRoles = (n) => { const { roles, ...rest } = n; return rest; } // DEBUG

                    /* if (sibblingsRoleNamesToMerge) {// DEBUG
                      console.error(`Side merging to ${node.titles[0]}\n`, sibblingsRoleNamesToMerge)
                    } */

                    var _iterator2 = _createForOfIteratorHelper$6(sibblingsRoleNamesToMerge || []),
                        _step2;

                    try {
                      var _loop = function _loop() {
                        var mergeMeName = _step2.value;
                        var key = "".concat(node.email, "/").concat(mergeMeName); // console.error(`Looking for '${key}' to merge in: `, parent.children.map(trimRoles))// DEBUG

                        var mergeMeNode = parent.children.find(function (c) {
                          return c.ids.find(function (id) {
                            return id === key;
                          });
                        });

                        if (mergeMeNode) {
                          // console.error('Found: ', trimRoles(mergeMeNode)) // DEBUG
                          mergeNodes(node, mergeMeNode);
                          parent.children.splice(parent.children.findIndex(function (t) {
                            return t === mergeMeNode;
                          }), 1);
                        }
                      };

                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                        _loop();
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                  } // merge up

                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                if (node.email === parent.email) {
                  // It may be the case that we have a node with multiple roles and a sub-role has reports. The sub-node
                  // will be rendered in order to clarify the nature of the reports, but we hide the email which is
                  // appearent in the parent node.
                  node.hideName = true; // collapse staff member roles to same staff in parent role if only child or sub-node has no children.

                  if (parent.children.length === 1 || node.children === undefined) {
                    mergeNodes(parent, node); // If 'node' is only child collapsing into parrent, just cut it out

                    if (parent.children.length === 1) parent.children = node.children;else {
                      // Else, just cut the child out
                      parent.children.splice(parent.children.findIndex(function (t) {
                        return t === node;
                      }), 1);
                    }
                  }
                }
              }
            });
          });
          return {
            v: data
          };
        }();

        if (_typeof(_ret) === "object") return _ret.v;
      } else throw new Error("Org chart style '".concat(style, "' is not supported."));
    }
  }]);

  return Organization;
}();

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var nameSorter = function nameSorter(name) {
  return function (a, b) {
    return a[name].toLowerCase().localeCompare(b[name].toLowerCase());
  };
};

var getPrimaryRole = function getPrimaryRole(staff) {
  return staff.roles[0].getName();
};

var staffRef = function staffRef(staff) {
  return "".concat(staff.familyName, ", ").concat(staff.givenName, " _").concat(staff.email, "_");
};

var roleRef = function roleRef(roleName) {
  var roleLink = roleName.toLowerCase().replace(/[^a-z ]*/g, '').replace(/ /g, '-');
  return "[".concat(roleName, "](#").concat(roleLink, ")");
};

var noteManager = function noteManager(staff, role) {
  var attachedRole = staff.getAttachedRole(role.name);
  var manager = attachedRole.getManager();

  if (manager !== null && attachedRole.managerRole === undefined) {
    throw new Error("Did not find expected 'manager role' for '".concat(staff.email, "' as '").concat(role.name, "'."));
  }

  var managerRef = manager === null && 'self' || manager.email === staff.email && "self as ".concat(roleRef(attachedRole.managerRole.getName())) || "".concat(staffRef(manager), " as ").concat(roleRef(attachedRole.managerRole.getName()));
  return "(managed by ".concat(managerRef, ")");
};

var noteDesignationSource = function noteDesignationSource(staff, role) {
  // It's possible to be designatd through multiple routes. I.e., the "Head of Administration" and "Head of Human
  // Resources" could be the same individual.
  var attachedRoles = staff.getAttachedRoles().filter(function (r) {
    return r.name === role.name;
  });
  var implications = attachedRoles // reduce to list of implied role names
  .map(function (r) {
    return r.impliedBy;
  }).filter(function (ir) {
    return ir !== undefined;
  }).map(function (ir) {
    return roleRef(ir.getName());
  });

  if (implications.length > 0) {
    return "(implied by ".concat(implications.join(', '), ")");
  } else {
    return "(as ".concat(getPrimaryRole(staff), ")");
  }
};

var genDoc = function genDoc(dataPath, staffPath) {
  var org = new Organization(dataPath, staffPath);
  var companyRoles = org.orgStructure.getNodes().reduce(function (acc, node) {
    if (!node.implied) {
      acc.push(node.name);
    }
    /* else { // DEBUG
      console.error(`skipping role ${node.name}`)
    } */


    return acc;
  }, []);
  companyRoles.sort(function (a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase());
  }); // console.error(companyRoles) // DEBUG

  var getRole = function getRole(roleName) {
    return org.roles.get(roleName, {
      required: true,
      errMsgGen: function errMsgGen(name) {
        return "Role '".concat(name, "' defined in organization structure is not defined.");
      }
    });
  };

  var processImpliedRoles = function processImpliedRoles(role, duties) {
    var _iterator = _createForOfIteratorHelper$1(role.implies || []),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var impName = _step.value.name;
        var impRole = getRole(impName);
        duties = duties.concat(impRole.duties || []);
        duties = processImpliedRoles(impRole, duties);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return duties;
  };

  var sb = []; // Note: we expect each line to be terminated with a '\n' when output, so the ending '\n' has the effect of adding an
  // empty line.

  sb.push('# Company Jobs and Roles Reference\n');
  sb.push('## Purpose and scope\n');
  sb.push('Here we find all Company job descriptions.\n');
  sb.push('## Job descriptions\n');

  var _iterator2 = _createForOfIteratorHelper$1(companyRoles),
      _step2;

  try {
    var _loop = function _loop() {
      var roleName = _step2.value;
      var role = getRole(roleName);
      sb.push("### ".concat(role.name, "\n"));
      sb.push("".concat(role.description, "\n"));
      var duties = role.duties || [];
      duties = processImpliedRoles(role, duties);

      if (duties) {
        var origCount = duties.length;
        duties.slice().reverse().forEach(function (duty, rI) {
          var expectI = origCount - rI - 1;
          var foundI = duties.findIndex(function (td) {
            return td.description === duty.description;
          });

          if (expectI !== foundI) {
            duties.splice(expectI, 1);
          }
        });
        sb.push('Duties:');

        var _iterator4 = _createForOfIteratorHelper$1(duties || []),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var duty = _step4.value;
            sb.push("* ".concat(duty.description));
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        sb.push('');
      }

      var staffInRole = org.roles.getStaffInRole(role.name).sort(nameSorter('familyName'));
      var hasMembers = staffInRole && staffInRole.length > 0;

      if (role.singular) {
        var staff = staffInRole[0]; // TODO: check that we don't have multiples.

        hasMembers ? sb.push("".concat(staffRef(staff), " is the current ").concat(role.name, " ").concat(noteManager(staff, role), "\n")) : sb.push('_*This position is currently vacant.*_\n');
      } else {
        sb.push('#### Members\n'); // TODO: something like '${role.namePluralized}'

        if (hasMembers) {
          var _iterator5 = _createForOfIteratorHelper$1(staffInRole),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _staff = _step5.value;
              sb.push("* ".concat(staffRef(_staff), " ").concat(noteManager(_staff, role)));
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }

          sb.push('');
        } else {
          sb.push('_*NONE*_\n');
        }
      }
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  sb.push('## Designated roles:\n');

  var designationsReducer = function designationsReducer(designations, role) {
    if (role.designated) {
      designations.push(role);
    }

    return designations;
  };

  var _iterator3 = _createForOfIteratorHelper$1(org.roles.list().reduce(designationsReducer, []).sort(nameSorter('name'))),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var role = _step3.value;
      sb.push("### ".concat(role.name, "\n"));
      sb.push("".concat(role.description, "\n"));
      sb.push('#### Members\n');
      var staffInRole = org.roles.getStaffInRole(role.name).sort(nameSorter('familyName'));

      if (staffInRole && staffInRole.length > 0) {
        var _iterator6 = _createForOfIteratorHelper$1(staffInRole),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var staff = _step6.value;
            sb.push("* ".concat(staffRef(staff), " ").concat(noteDesignationSource(staff, role)));
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        sb.push('');
      } else {
        sb.push('_*NONE*_\n');
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return sb;
};

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _iterator = _createForOfIteratorHelper(genDoc.apply(void 0, _toConsumableArray$2(process.argv.slice(2)))),
    _step;

try {
  for (_iterator.s(); !(_step = _iterator.n()).done;) {
    var line = _step.value;
    console.log(line);
  }
} catch (err) {
  _iterator.e(err);
} finally {
  _iterator.f();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
