import fs from 'fs';
import path from 'path';
import os from 'os';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var defineProperty = createCommonjsModule(function (module) {
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _defineProperty = unwrapExports(defineProperty);

var orgsModel = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });





const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  const n = Object.create(null);
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const fs__namespace = /*#__PURE__*/_interopNamespace(fs);
const fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
const fsPath__namespace = /*#__PURE__*/_interopNamespace(path);
const fsPath__default = /*#__PURE__*/_interopDefaultLegacy(path);
const os__default = /*#__PURE__*/_interopDefaultLegacy(os);

function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }

  return descriptor.value;
}

function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }

  return privateMap.get(receiver);
}

function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}

function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }

    descriptor.value = value;
  }
}

function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  _classApplyDescriptorSet(receiver, descriptor, value);
  return value;
}

var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

function createCommonjsModule$2(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global_1 =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof commonjsGlobal$1 == 'object' && commonjsGlobal$1) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();

var fails = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

var functionBindNative = !fails(function () {
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

var FunctionPrototype$2 = Function.prototype;
var bind$1 = FunctionPrototype$2.bind;
var call$2 = FunctionPrototype$2.call;
var uncurryThis = functionBindNative && bind$1.bind(call$2, call$2);

var functionUncurryThis = functionBindNative ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call$2.apply(fn, arguments);
  };
};

var toString$1 = functionUncurryThis({}.toString);
var stringSlice = functionUncurryThis(''.slice);

var classofRaw = function (it) {
  return stringSlice(toString$1(it), 8, -1);
};

var Object$6 = global_1.Object;
var split = functionUncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var indexedObject = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object$6('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classofRaw(it) == 'String' ? split(it, '') : Object$6(it);
} : Object$6;

var TypeError$d = global_1.TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
var requireObjectCoercible = function (it) {
  if (it == undefined) throw TypeError$d("Can't call method on " + it);
  return it;
};

// toObject with fallback for non-array-like ES3 strings



var toIndexedObject = function (it) {
  return indexedObject(requireObjectCoercible(it));
};

var iterators = {};

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
var isCallable = function (argument) {
  return typeof argument == 'function';
};

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty$7 = Object.defineProperty;

var setGlobal = function (key, value) {
  try {
    defineProperty$7(global_1, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global_1[key] = value;
  } return value;
};

var SHARED = '__core-js_shared__';
var store$1 = global_1[SHARED] || setGlobal(SHARED, {});

var sharedStore = store$1;

var functionToString = functionUncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(sharedStore.inspectSource)) {
  sharedStore.inspectSource = function (it) {
    return functionToString(it);
  };
}

var inspectSource = sharedStore.inspectSource;

var WeakMap$2 = global_1.WeakMap;

var nativeWeakMap = isCallable(WeakMap$2) && /native code/.test(inspectSource(WeakMap$2));

var isObject = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};

// Detect IE8's incomplete defineProperty implementation
var descriptors = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});

var document$1 = global_1.document;
// typeof document.createElement is 'object' in old IE
var EXISTS$1 = isObject(document$1) && isObject(document$1.createElement);

var documentCreateElement = function (it) {
  return EXISTS$1 ? document$1.createElement(it) : {};
};

// Thanks to IE8 for its funny defineProperty
var ie8DomDefine = !descriptors && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(documentCreateElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
var v8PrototypeDefineBug = descriptors && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});

var String$4 = global_1.String;
var TypeError$c = global_1.TypeError;

// `Assert: Type(argument) is Object`
var anObject = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError$c(String$4(argument) + ' is not an object');
};

var call$1 = Function.prototype.call;

var functionCall = functionBindNative ? call$1.bind(call$1) : function () {
  return call$1.apply(call$1, arguments);
};

var path$1 = {};

var aFunction = function (variable) {
  return isCallable(variable) ? variable : undefined;
};

var getBuiltIn = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path$1[namespace]) || aFunction(global_1[namespace])
    : path$1[namespace] && path$1[namespace][method] || global_1[namespace] && global_1[namespace][method];
};

var objectIsPrototypeOf = functionUncurryThis({}.isPrototypeOf);

var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

var process$1 = global_1.process;
var Deno = global_1.Deno;
var versions = process$1 && process$1.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && engineUserAgent) {
  match = engineUserAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = engineUserAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

var engineV8Version = version;

/* eslint-disable es/no-symbol -- required for testing */



// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && engineV8Version && engineV8Version < 41;
});

/* eslint-disable es/no-symbol -- required for testing */


var useSymbolAsUid = nativeSymbol
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';

var Object$5 = global_1.Object;

var isSymbol = useSymbolAsUid ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && objectIsPrototypeOf($Symbol.prototype, Object$5(it));
};

var String$3 = global_1.String;

var tryToString = function (argument) {
  try {
    return String$3(argument);
  } catch (error) {
    return 'Object';
  }
};

var TypeError$b = global_1.TypeError;

// `Assert: IsCallable(argument) is true`
var aCallable = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError$b(tryToString(argument) + ' is not a function');
};

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
var getMethod = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};

var TypeError$a = global_1.TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
var ordinaryToPrimitive = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = functionCall(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = functionCall(fn, input))) return val;
  throw TypeError$a("Can't convert object to primitive value");
};

var isPure = true;

var shared = createCommonjsModule$2(function (module) {
(module.exports = function (key, value) {
  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.21.1',
  mode: 'pure' ,
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});
});

var Object$4 = global_1.Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
var toObject = function (argument) {
  return Object$4(requireObjectCoercible(argument));
};

var hasOwnProperty = functionUncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};

var id = 0;
var postfix = Math.random();
var toString = functionUncurryThis(1.0.toString);

var uid = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};

var WellKnownSymbolsStore = shared('wks');
var Symbol$1 = global_1.Symbol;
var symbolFor = Symbol$1 && Symbol$1['for'];
var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

var wellKnownSymbol = function (name) {
  if (!hasOwnProperty_1(WellKnownSymbolsStore, name) || !(nativeSymbol || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (nativeSymbol && hasOwnProperty_1(Symbol$1, name)) {
      WellKnownSymbolsStore[name] = Symbol$1[name];
    } else if (useSymbolAsUid && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};

var TypeError$9 = global_1.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
var toPrimitive = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = functionCall(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError$9("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
var toPropertyKey = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

var TypeError$8 = global_1.TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE$1 = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
var f$5 = descriptors ? v8PrototypeDefineBug ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor$1(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (ie8DomDefine) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError$8('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

var objectDefineProperty = {
	f: f$5
};

var createPropertyDescriptor = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var createNonEnumerableProperty = descriptors ? function (object, key, value) {
  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var keys = shared('keys');

var sharedKey = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

var hiddenKeys$1 = {};

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError$7 = global_1.TypeError;
var WeakMap$1 = global_1.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor$1 = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError$7('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (nativeWeakMap || sharedStore.state) {
  var store = sharedStore.state || (sharedStore.state = new WeakMap$1());
  var wmget = functionUncurryThis(store.get);
  var wmhas = functionUncurryThis(store.has);
  var wmset = functionUncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError$7(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys$1[STATE] = true;
  set = function (it, metadata) {
    if (hasOwnProperty_1(it, STATE)) throw new TypeError$7(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwnProperty_1(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwnProperty_1(it, STATE);
  };
}

var internalState = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor$1
};

var FunctionPrototype$1 = Function.prototype;
var apply = FunctionPrototype$1.apply;
var call = FunctionPrototype$1.call;

// eslint-disable-next-line es/no-reflect -- safe
var functionApply = typeof Reflect == 'object' && Reflect.apply || (functionBindNative ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
var f$4 = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$1(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

var objectPropertyIsEnumerable = {
	f: f$4
};

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
var f$3 = descriptors ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (ie8DomDefine) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwnProperty_1(O, P)) return createPropertyDescriptor(!functionCall(objectPropertyIsEnumerable.f, O, P), O[P]);
};

var objectGetOwnPropertyDescriptor = {
	f: f$3
};

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

var isForced_1 = isForced;

var bind = functionUncurryThis(functionUncurryThis.bind);

// optional / simple context binding
var functionBindContext = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : functionBindNative ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;






var wrapConstructor = function (NativeConstructor) {
  var Wrapper = function (a, b, c) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0: return new NativeConstructor();
        case 1: return new NativeConstructor(a);
        case 2: return new NativeConstructor(a, b);
      } return new NativeConstructor(a, b, c);
    } return functionApply(NativeConstructor, this, arguments);
  };
  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
var _export = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var PROTO = options.proto;

  var nativeSource = GLOBAL ? global_1 : STATIC ? global_1[TARGET] : (global_1[TARGET] || {}).prototype;

  var target = GLOBAL ? path$1 : path$1[TARGET] || createNonEnumerableProperty(path$1, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;

  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

  for (key in source) {
    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contains in native
    USE_NATIVE = !FORCED && nativeSource && hasOwnProperty_1(nativeSource, key);

    targetProperty = target[key];

    if (USE_NATIVE) if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(nativeSource, key);
      nativeProperty = descriptor && descriptor.value;
    } else nativeProperty = nativeSource[key];

    // export native or implementation
    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;

    // bind timers to global for call from export context
    if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global_1);
    // wrap global constructors for prevent changs in this version
    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
    // make static versions for prototype methods
    else if (PROTO && isCallable(sourceProperty)) resultProperty = functionUncurryThis(sourceProperty);
    // default case
    else resultProperty = sourceProperty;

    // add a flag to not completely full polyfills
    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(resultProperty, 'sham', true);
    }

    createNonEnumerableProperty(target, key, resultProperty);

    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
      if (!hasOwnProperty_1(path$1, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty(path$1, VIRTUAL_PROTOTYPE, {});
      }
      // export virtual prototype methods
      createNonEnumerableProperty(path$1[VIRTUAL_PROTOTYPE], key, sourceProperty);
      // export real prototype methods
      if (options.real && targetPrototype && !targetPrototype[key]) {
        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
      }
    }
  }
};

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = descriptors && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwnProperty_1(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!descriptors || (descriptors && getDescriptor(FunctionPrototype, 'name').configurable));

var functionName = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

var ceil = Math.ceil;
var floor = Math.floor;

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
var toIntegerOrInfinity = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- safe
  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
};

var max$1 = Math.max;
var min$1 = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
var toAbsoluteIndex = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max$1(integer + length, 0) : min$1(integer, length);
};

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
var toLength = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
var lengthOfArrayLike = function (obj) {
  return toLength(obj.length);
};

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod$1 = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

var arrayIncludes = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod$1(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod$1(false)
};

var indexOf = arrayIncludes.indexOf;


var push$2 = functionUncurryThis([].push);

var objectKeysInternal = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwnProperty_1(hiddenKeys$1, key) && hasOwnProperty_1(O, key) && push$2(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwnProperty_1(O, key = names[i++])) {
    ~indexOf(result, key) || push$2(result, key);
  }
  return result;
};

// IE8- don't enum bug keys
var enumBugKeys = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
var objectKeys$1 = Object.keys || function keys(O) {
  return objectKeysInternal(O, enumBugKeys);
};

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
var f$2 = descriptors && !v8PrototypeDefineBug ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys$1(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) objectDefineProperty.f(O, key = keys[index++], props[key]);
  return O;
};

var objectDefineProperties = {
	f: f$2
};

var html = getBuiltIn('document', 'documentElement');

/* global ActiveXObject -- old IE, WSH */








var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO$1 = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys$1[IE_PROTO$1] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
var objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : objectDefineProperties.f(result, Properties);
};

var correctPrototypeGetter = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

var IE_PROTO = sharedKey('IE_PROTO');
var Object$3 = global_1.Object;
var ObjectPrototype = Object$3.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
var objectGetPrototypeOf = correctPrototypeGetter ? Object$3.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwnProperty_1(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof Object$3 ? ObjectPrototype : null;
};

var redefine = function (target, key, value, options) {
  if (options && options.enumerable) target[key] = value;
  else createNonEnumerableProperty(target, key, value);
};

var ITERATOR$3 = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS$1 = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype$1, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$1 == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype$1[ITERATOR$3].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$1 = {};
else IteratorPrototype$1 = objectCreate(IteratorPrototype$1);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype$1[ITERATOR$3])) {
  redefine(IteratorPrototype$1, ITERATOR$3, function () {
    return this;
  });
}

var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$1,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};

var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG$2] = 'z';

var toStringTagSupport = String(test) === '[object z]';

var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
var Object$2 = global_1.Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
var classof = toStringTagSupport ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object$2(it), TO_STRING_TAG$1)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
var objectToString = toStringTagSupport ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

var defineProperty$6 = objectDefineProperty.f;





var TO_STRING_TAG = wellKnownSymbol('toStringTag');

var setToStringTag = function (it, TAG, STATIC, SET_METHOD) {
  if (it) {
    var target = STATIC ? it : it.prototype;
    if (!hasOwnProperty_1(target, TO_STRING_TAG)) {
      defineProperty$6(target, TO_STRING_TAG, { configurable: true, value: TAG });
    }
    if (SET_METHOD && !toStringTagSupport) {
      createNonEnumerableProperty(target, 'toString', objectToString);
    }
  }
};

var IteratorPrototype = iteratorsCore.IteratorPrototype;





var returnThis$1 = function () { return this; };

var createIteratorConstructor = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = objectCreate(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  iterators[TO_STRING_TAG] = returnThis$1;
  return IteratorConstructor;
};

var String$2 = global_1.String;
var TypeError$6 = global_1.TypeError;

var aPossiblePrototype = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw TypeError$6("Can't set " + String$2(argument) + ' as a prototype');
};

/* eslint-disable no-proto -- safe */




// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    setter = functionUncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

var PROPER_FUNCTION_NAME = functionName.PROPER;
var BUGGY_SAFARI_ITERATORS = iteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$2 = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$2]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return functionCall(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((FORCED) && IterablePrototype[ITERATOR$2] !== defaultIterator) {
    redefine(IterablePrototype, ITERATOR$2, defaultIterator, { name: DEFAULT });
  }
  iterators[NAME] = defaultIterator;

  return methods;
};

objectDefineProperty.f;




var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState$3 = internalState.set;
var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState$3(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState$1(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
iterators.Arguments = iterators.Array;

var FAILS_ON_PRIMITIVES$1 = fails(function () { objectKeys$1(1); });

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
  keys: function keys(it) {
    return objectKeys$1(toObject(it));
  }
});

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
var f$1 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return objectKeysInternal(O, hiddenKeys);
};

var objectGetOwnPropertyNames = {
	f: f$1
};

var createProperty = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

var Array$2 = global_1.Array;
var max = Math.max;

var arraySliceSimple = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = Array$2(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};

/* eslint-disable es/no-object-getownpropertynames -- safe */


var $getOwnPropertyNames = objectGetOwnPropertyNames.f;


var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySliceSimple(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var f = function getOwnPropertyNames(it) {
  return windowNames && classofRaw(it) == 'Window'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};

var objectGetOwnPropertyNamesExternal = {
	f: f
};

// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it


var arrayBufferNonExtensible = fails(function () {
  if (typeof ArrayBuffer == 'function') {
    var buffer = new ArrayBuffer(8);
    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
  }
});

// eslint-disable-next-line es/no-object-isextensible -- safe
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { $isExtensible(1); });

// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
var objectIsExtensible = (FAILS_ON_PRIMITIVES || arrayBufferNonExtensible) ? function isExtensible(it) {
  if (!isObject(it)) return false;
  if (arrayBufferNonExtensible && classofRaw(it) == 'ArrayBuffer') return false;
  return $isExtensible ? $isExtensible(it) : true;
} : $isExtensible;

var freezing = !fails(function () {
  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});

var internalMetadata = createCommonjsModule$2(function (module) {
var defineProperty = objectDefineProperty.f;






var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + id++, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!hasOwnProperty_1(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!objectIsExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!hasOwnProperty_1(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!objectIsExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (freezing && REQUIRED && objectIsExtensible(it) && !hasOwnProperty_1(it, METADATA)) setMetadata(it);
  return it;
};

var enable = function () {
  meta.enable = function () { /* empty */ };
  REQUIRED = true;
  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
  var splice = functionUncurryThis([].splice);
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    objectGetOwnPropertyNames.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice(result, i, 1);
          break;
        }
      } return result;
    };

    _export({ target: 'Object', stat: true, forced: true }, {
      getOwnPropertyNames: objectGetOwnPropertyNamesExternal.f
    });
  }
};

var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys$1[METADATA] = true;
});
internalMetadata.enable;
internalMetadata.fastKey;
internalMetadata.getWeakData;
internalMetadata.onFreeze;

var ITERATOR$1 = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
var isArrayIteratorMethod = function (it) {
  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR$1] === it);
};

var ITERATOR = wellKnownSymbol('iterator');

var getIteratorMethod = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || iterators[classof(it)];
};

var TypeError$5 = global_1.TypeError;

var getIterator = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(functionCall(iteratorMethod, argument));
  throw TypeError$5(tryToString(argument) + ' is not iterable');
};

var iteratorClose = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = functionCall(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};

var TypeError$4 = global_1.TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

var iterate = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = functionBindContext(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw TypeError$4(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && objectIsPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = iterator.next;
  while (!(step = functionCall(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && objectIsPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};

var TypeError$3 = global_1.TypeError;

var anInstance = function (it, Prototype) {
  if (objectIsPrototypeOf(Prototype, it)) return it;
  throw TypeError$3('Incorrect invocation');
};

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
var isArray = Array.isArray || function isArray(argument) {
  return classofRaw(argument) == 'Array';
};

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = functionUncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING$2 = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING$2 || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
var isConstructor = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;

var SPECIES$1 = wellKnownSymbol('species');
var Array$1 = global_1.Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
var arraySpeciesConstructor = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === Array$1 || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES$1];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array$1 : C;
};

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
var arraySpeciesCreate = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

var push$1 = functionUncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = indexedObject(O);
    var boundFunction = functionBindContext(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push$1(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push$1(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

var arrayIteration = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};

var defineProperty$5 = objectDefineProperty.f;
var forEach = arrayIteration.forEach;



var setInternalState$2 = internalState.set;
var internalStateGetterFor$1 = internalState.getterFor;

var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var exported = {};
  var Constructor;

  if (!descriptors || !isCallable(NativeConstructor)
    || !(IS_WEAK || NativePrototype.forEach && !fails(function () { new NativeConstructor().entries().next(); }))
  ) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    internalMetadata.enable();
  } else {
    Constructor = wrapper(function (target, iterable) {
      setInternalState$2(anInstance(target, Prototype), {
        type: CONSTRUCTOR_NAME,
        collection: new NativeConstructor()
      });
      if (iterable != undefined) iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

    forEach(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) {
        createNonEnumerableProperty(Prototype, KEY, function (a, b) {
          var collection = getInternalState(this).collection;
          if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
          var result = collection[KEY](a === 0 ? 0 : a, b);
          return IS_ADDER ? this : result;
        });
      }
    });

    IS_WEAK || defineProperty$5(Prototype, 'size', {
      configurable: true,
      get: function () {
        return getInternalState(this).collection.size;
      }
    });
  }

  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);

  exported[CONSTRUCTOR_NAME] = Constructor;
  _export({ global: true, forced: true }, exported);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};

var redefineAll = function (target, src, options) {
  for (var key in src) {
    if (options && options.unsafe && target[key]) target[key] = src[key];
    else redefine(target, key, src[key], options);
  } return target;
};

var SPECIES = wellKnownSymbol('species');

var setSpecies = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = objectDefineProperty.f;

  if (descriptors && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

var defineProperty$4 = objectDefineProperty.f;








var fastKey = internalMetadata.fastKey;


var setInternalState$1 = internalState.set;
var internalStateGetterFor = internalState.getterFor;

var collectionStrong = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState$1(that, {
        type: CONSTRUCTOR_NAME,
        index: objectCreate(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!descriptors) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (descriptors) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (descriptors) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (descriptors) state.size--;
          else that.size--;
        } return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (descriptors) defineProperty$4(Prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState$1(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};
collectionStrong.getConstructor;
collectionStrong.setStrong;

// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

// `Set` constructor
// https://tc39.es/ecma262/#sec-set-objects
collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

var engineIsNode = classofRaw(global_1.process) == 'process';

var tryNodeRequire = function (name) {
  try {
    // eslint-disable-next-line no-new-func -- safe
    if (engineIsNode) return Function('return require("' + name + '")')();
  } catch (error) { /* empty */ }
};

var String$1 = global_1.String;

var toString_1 = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return String$1(argument);
};

var normalizeStringArgument = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString_1(argument);
};

var nativeErrorToString = Error.prototype.toString;

var INCORRECT_TO_STRING$1 = fails(function () {
  if (descriptors) {
    // Chrome 32- incorrectly call accessor
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    var object = objectCreate(Object.defineProperty({}, 'name', { get: function () {
      return this === object;
    } }));
    if (nativeErrorToString.call(object) !== 'true') return true;
  }
  // FF10- does not properly handle non-strings
  return nativeErrorToString.call({ message: 1, name: 2 }) !== '2: 1'
    // IE8 does not properly handle defaults
    || nativeErrorToString.call({}) !== 'Error';
});

var errorToString = INCORRECT_TO_STRING$1 ? function toString() {
  var O = anObject(this);
  var name = normalizeStringArgument(O.name, 'Error');
  var message = normalizeStringArgument(O.message);
  return !name ? message : !message ? name : name + ': ' + message;
} : nativeErrorToString;

var domExceptionConstants = {
  IndexSizeError: { s: 'INDEX_SIZE_ERR', c: 1, m: 1 },
  DOMStringSizeError: { s: 'DOMSTRING_SIZE_ERR', c: 2, m: 0 },
  HierarchyRequestError: { s: 'HIERARCHY_REQUEST_ERR', c: 3, m: 1 },
  WrongDocumentError: { s: 'WRONG_DOCUMENT_ERR', c: 4, m: 1 },
  InvalidCharacterError: { s: 'INVALID_CHARACTER_ERR', c: 5, m: 1 },
  NoDataAllowedError: { s: 'NO_DATA_ALLOWED_ERR', c: 6, m: 0 },
  NoModificationAllowedError: { s: 'NO_MODIFICATION_ALLOWED_ERR', c: 7, m: 1 },
  NotFoundError: { s: 'NOT_FOUND_ERR', c: 8, m: 1 },
  NotSupportedError: { s: 'NOT_SUPPORTED_ERR', c: 9, m: 1 },
  InUseAttributeError: { s: 'INUSE_ATTRIBUTE_ERR', c: 10, m: 1 },
  InvalidStateError: { s: 'INVALID_STATE_ERR', c: 11, m: 1 },
  SyntaxError: { s: 'SYNTAX_ERR', c: 12, m: 1 },
  InvalidModificationError: { s: 'INVALID_MODIFICATION_ERR', c: 13, m: 1 },
  NamespaceError: { s: 'NAMESPACE_ERR', c: 14, m: 1 },
  InvalidAccessError: { s: 'INVALID_ACCESS_ERR', c: 15, m: 1 },
  ValidationError: { s: 'VALIDATION_ERR', c: 16, m: 0 },
  TypeMismatchError: { s: 'TYPE_MISMATCH_ERR', c: 17, m: 1 },
  SecurityError: { s: 'SECURITY_ERR', c: 18, m: 1 },
  NetworkError: { s: 'NETWORK_ERR', c: 19, m: 1 },
  AbortError: { s: 'ABORT_ERR', c: 20, m: 1 },
  URLMismatchError: { s: 'URL_MISMATCH_ERR', c: 21, m: 1 },
  QuotaExceededError: { s: 'QUOTA_EXCEEDED_ERR', c: 22, m: 1 },
  TimeoutError: { s: 'TIMEOUT_ERR', c: 23, m: 1 },
  InvalidNodeTypeError: { s: 'INVALID_NODE_TYPE_ERR', c: 24, m: 1 },
  DataCloneError: { s: 'DATA_CLONE_ERR', c: 25, m: 1 }
};
domExceptionConstants.IndexSizeError;
domExceptionConstants.DOMStringSizeError;
domExceptionConstants.HierarchyRequestError;
domExceptionConstants.WrongDocumentError;
domExceptionConstants.InvalidCharacterError;
domExceptionConstants.NoDataAllowedError;
domExceptionConstants.NoModificationAllowedError;
domExceptionConstants.NotFoundError;
domExceptionConstants.NotSupportedError;
domExceptionConstants.InUseAttributeError;
domExceptionConstants.InvalidStateError;
domExceptionConstants.InvalidModificationError;
domExceptionConstants.NamespaceError;
domExceptionConstants.InvalidAccessError;
domExceptionConstants.ValidationError;
domExceptionConstants.TypeMismatchError;
domExceptionConstants.SecurityError;
domExceptionConstants.NetworkError;
domExceptionConstants.AbortError;
domExceptionConstants.URLMismatchError;
domExceptionConstants.QuotaExceededError;
domExceptionConstants.TimeoutError;
domExceptionConstants.InvalidNodeTypeError;
domExceptionConstants.DataCloneError;

var replace = functionUncurryThis(''.replace);

var TEST = (function (arg) { return String(Error(arg).stack); })('zxcasd');
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

var clearErrorStack = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string') {
    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  } return stack;
};

var defineProperty$3 = objectDefineProperty.f;
var defineProperties = objectDefineProperties.f;












var DOM_EXCEPTION$2 = 'DOMException';
var DATA_CLONE_ERR = 'DATA_CLONE_ERR';
var Error$3 = getBuiltIn('Error');
// NodeJS < 17.0 does not expose `DOMException` to global
var NativeDOMException$1 = getBuiltIn(DOM_EXCEPTION$2) || (function () {
  try {
    // NodeJS < 15.0 does not expose `MessageChannel` to global
    var MessageChannel = getBuiltIn('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel;
    // eslint-disable-next-line es/no-weak-map, unicorn/require-post-message-target-origin -- safe
    new MessageChannel().port1.postMessage(new WeakMap());
  } catch (error) {
    if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;
  }
})();
var NativeDOMExceptionPrototype = NativeDOMException$1 && NativeDOMException$1.prototype;
var ErrorPrototype = Error$3.prototype;
var setInternalState = internalState.set;
var getInternalState = internalState.getterFor(DOM_EXCEPTION$2);
var HAS_STACK = 'stack' in Error$3(DOM_EXCEPTION$2);

var codeFor = function (name) {
  return hasOwnProperty_1(domExceptionConstants, name) && domExceptionConstants[name].m ? domExceptionConstants[name].c : 0;
};

var $DOMException$1 = function DOMException() {
  anInstance(this, DOMExceptionPrototype$1);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var code = codeFor(name);
  setInternalState(this, {
    type: DOM_EXCEPTION$2,
    name: name,
    message: message,
    code: code
  });
  if (!descriptors) {
    this.name = name;
    this.message = message;
    this.code = code;
  }
  if (HAS_STACK) {
    var error = Error$3(message);
    error.name = DOM_EXCEPTION$2;
    defineProperty$3(this, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  }
};

var DOMExceptionPrototype$1 = $DOMException$1.prototype = objectCreate(ErrorPrototype);

var createGetterDescriptor = function (get) {
  return { enumerable: true, configurable: true, get: get };
};

var getterFor = function (key) {
  return createGetterDescriptor(function () {
    return getInternalState(this)[key];
  });
};

if (descriptors) defineProperties(DOMExceptionPrototype$1, {
  name: getterFor('name'),
  message: getterFor('message'),
  code: getterFor('code')
});

defineProperty$3(DOMExceptionPrototype$1, 'constructor', createPropertyDescriptor(1, $DOMException$1));

// FF36- DOMException is a function, but can't be constructed
var INCORRECT_CONSTRUCTOR = fails(function () {
  return !(new NativeDOMException$1() instanceof Error$3);
});

// Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs
var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails(function () {
  return ErrorPrototype.toString !== errorToString || String(new NativeDOMException$1(1, 2)) !== '2: 1';
});

// Deno 1.6.3- DOMException.prototype.code just missed
var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails(function () {
  return new NativeDOMException$1(1, 'DataCloneError').code !== 25;
});

// Deno 1.6.3- DOMException constants just missed
var MISSED_CONSTANTS = INCORRECT_CONSTRUCTOR
  || NativeDOMException$1[DATA_CLONE_ERR] !== 25
  || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;

var FORCED_CONSTRUCTOR$1 = INCORRECT_TO_STRING || INCORRECT_CODE || MISSED_CONSTANTS ;

// `DOMException` constructor
// https://webidl.spec.whatwg.org/#idl-DOMException
_export({ global: true, forced: FORCED_CONSTRUCTOR$1 }, {
  DOMException: FORCED_CONSTRUCTOR$1 ? $DOMException$1 : NativeDOMException$1
});

var PolyfilledDOMException$1 = getBuiltIn(DOM_EXCEPTION$2);
var PolyfilledDOMExceptionPrototype$1 = PolyfilledDOMException$1.prototype;

if (INCORRECT_TO_STRING && (isPure )) {
  redefine(PolyfilledDOMExceptionPrototype$1, 'toString', errorToString);
}

if (INCORRECT_CODE && descriptors && NativeDOMException$1 === PolyfilledDOMException$1) {
  defineProperty$3(PolyfilledDOMExceptionPrototype$1, 'code', createGetterDescriptor(function () {
    return codeFor(anObject(this).name);
  }));
}

for (var key$1 in domExceptionConstants) if (hasOwnProperty_1(domExceptionConstants, key$1)) {
  var constant$1 = domExceptionConstants[key$1];
  var constantName$1 = constant$1.s;
  var descriptor = createPropertyDescriptor(6, constant$1.c);
  if (!hasOwnProperty_1(PolyfilledDOMException$1, constantName$1)) {
    defineProperty$3(PolyfilledDOMException$1, constantName$1, descriptor);
  }
  if (!hasOwnProperty_1(PolyfilledDOMExceptionPrototype$1, constantName$1)) {
    defineProperty$3(PolyfilledDOMExceptionPrototype$1, constantName$1, descriptor);
  }
}

// makes subclassing work correct for wrapped built-ins
var inheritIfRequired = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    objectSetPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) objectSetPrototypeOf($this, NewTargetPrototype);
  return $this;
};

var defineProperty$2 = objectDefineProperty.f;








var DOM_EXCEPTION$1 = 'DOMException';
var Error$2 = getBuiltIn('Error');
var NativeDOMException = getBuiltIn(DOM_EXCEPTION$1);

var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var that = new NativeDOMException(message, name);
  var error = Error$2(message);
  error.name = DOM_EXCEPTION$1;
  defineProperty$2(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  inheritIfRequired(that, this, $DOMException);
  return that;
};

var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;

var ERROR_HAS_STACK = 'stack' in Error$2(DOM_EXCEPTION$1);
var DOM_EXCEPTION_HAS_STACK = 'stack' in new NativeDOMException(1, 2);
var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK;

// `DOMException` constructor patch for `.stack` where it's required
// https://webidl.spec.whatwg.org/#es-DOMException-specialness
_export({ global: true, forced: isPure  }, { // TODO: fix export logic
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});

var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION$1);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {

  for (var key in domExceptionConstants) if (hasOwnProperty_1(domExceptionConstants, key)) {
    var constant = domExceptionConstants[key];
    var constantName = constant.s;
    if (!hasOwnProperty_1(PolyfilledDOMException, constantName)) {
      defineProperty$2(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));
    }
  }
}

var DOM_EXCEPTION = 'DOMException';

setToStringTag(getBuiltIn(DOM_EXCEPTION), DOM_EXCEPTION);

var TypeError$2 = global_1.TypeError;

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError$2('Not enough arguments');
  return passed;
};

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
var regexpFlags = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

var errorStackInstallable = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});

var Object$1 = global_1.Object;
var Date = global_1.Date;
var Error$1 = global_1.Error;
var EvalError = global_1.EvalError;
var RangeError = global_1.RangeError;
var ReferenceError = global_1.ReferenceError;
var SyntaxError$1 = global_1.SyntaxError;
var TypeError$1 = global_1.TypeError;
var URIError = global_1.URIError;
var PerformanceMark = global_1.PerformanceMark;
var WebAssembly = global_1.WebAssembly;
var CompileError = WebAssembly && WebAssembly.CompileError || Error$1;
var LinkError = WebAssembly && WebAssembly.LinkError || Error$1;
var RuntimeError = WebAssembly && WebAssembly.RuntimeError || Error$1;
var DOMException = getBuiltIn('DOMException');
var Set$1 = getBuiltIn('Set');
var Map = getBuiltIn('Map');
var MapPrototype = Map.prototype;
var mapHas = functionUncurryThis(MapPrototype.has);
var mapGet = functionUncurryThis(MapPrototype.get);
var mapSet = functionUncurryThis(MapPrototype.set);
var setAdd = functionUncurryThis(Set$1.prototype.add);
var objectKeys = getBuiltIn('Object', 'keys');
var push = functionUncurryThis([].push);
var booleanValueOf = functionUncurryThis(true.valueOf);
var numberValueOf = functionUncurryThis(1.0.valueOf);
var stringValueOf = functionUncurryThis(''.valueOf);
var getFlags = functionUncurryThis(regexpFlags);
var getTime = functionUncurryThis(Date.prototype.getTime);
var PERFORMANCE_MARK = uid('structuredClone');
var DATA_CLONE_ERROR = 'DataCloneError';
var TRANSFERRING = 'Transferring';

var checkBasicSemantic = function (structuredCloneImplementation) {
  return !fails(function () {
    var set1 = new global_1.Set([7]);
    var set2 = structuredCloneImplementation(set1);
    var number = structuredCloneImplementation(Object$1(7));
    return set2 == set1 || !set2.has(7) || typeof number != 'object' || number != 7;
  }) && structuredCloneImplementation;
};

// FF94+, Safari TP134+, Chrome Canary 98+, NodeJS 17.0+, Deno 1.13+
// current FF and Safari implementations can't clone errors
// https://bugzilla.mozilla.org/show_bug.cgi?id=1556604
// no one of current implementations supports new (html/5749) error cloning semantic
var nativeStructuredClone = global_1.structuredClone;

var FORCED_REPLACEMENT = isPure ;

// Chrome 82+, Safari 14.1+, Deno 1.11+
// Chrome 78-81 implementation swaps `.name` and `.message` of cloned `DOMException`
// Safari 14.1 implementation doesn't clone some `RegExp` flags, so requires a workaround
// current Safari implementation can't clone errors
// Deno 1.2-1.10 implementations too naive
// NodeJS 16.0+ does not have `PerformanceMark` constructor, structured cloning implementation
//   from `performance.mark` is too naive and can't clone, for example, `RegExp` or some boxed primitives
//   https://github.com/nodejs/node/issues/40840
// no one of current implementations supports new (html/5749) error cloning semantic
var structuredCloneFromMark = !nativeStructuredClone && checkBasicSemantic(function (value) {
  return new PerformanceMark(PERFORMANCE_MARK, { detail: value }).detail;
});

var nativeRestrictedStructuredClone = checkBasicSemantic(nativeStructuredClone) || structuredCloneFromMark;

var throwUncloneable = function (type) {
  throw new DOMException('Uncloneable type: ' + type, DATA_CLONE_ERROR);
};

var throwUnpolyfillable = function (type, kind) {
  throw new DOMException((kind || 'Cloning') + ' of ' + type + ' cannot be properly polyfilled in this engine', DATA_CLONE_ERROR);
};

var structuredCloneInternal = function (value, map) {
  if (isSymbol(value)) throwUncloneable('Symbol');
  if (!isObject(value)) return value;
  // effectively preserves circular references
  if (map) {
    if (mapHas(map, value)) return mapGet(map, value);
  } else map = new Map();

  var type = classof(value);
  var deep = false;
  var C, name, cloned, dataTransfer, i, length, keys, key, source, target;

  switch (type) {
    case 'Array':
      cloned = [];
      deep = true;
      break;
    case 'Object':
      cloned = {};
      deep = true;
      break;
    case 'Map':
      cloned = new Map();
      deep = true;
      break;
    case 'Set':
      cloned = new Set$1();
      deep = true;
      break;
    case 'RegExp':
      // in this block because of a Safari 14.1 bug
      // old FF does not clone regexes passed to the constructor, so get the source and flags directly
      cloned = new RegExp(value.source, 'flags' in value ? value.flags : getFlags(value));
      break;
    case 'Error':
      name = value.name;
      switch (name) {
        case 'AggregateError':
          cloned = getBuiltIn('AggregateError')([]);
          break;
        case 'EvalError':
          cloned = EvalError();
          break;
        case 'RangeError':
          cloned = RangeError();
          break;
        case 'ReferenceError':
          cloned = ReferenceError();
          break;
        case 'SyntaxError':
          cloned = SyntaxError$1();
          break;
        case 'TypeError':
          cloned = TypeError$1();
          break;
        case 'URIError':
          cloned = URIError();
          break;
        case 'CompileError':
          cloned = CompileError();
          break;
        case 'LinkError':
          cloned = LinkError();
          break;
        case 'RuntimeError':
          cloned = RuntimeError();
          break;
        default:
          cloned = Error$1();
      }
      deep = true;
      break;
    case 'DOMException':
      cloned = new DOMException(value.message, value.name);
      deep = true;
      break;
    case 'DataView':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'BigInt64Array':
    case 'BigUint64Array':
      C = global_1[type];
      // in some old engines like Safari 9, typeof C is 'object'
      // on Uint8ClampedArray or some other constructors
      if (!isObject(C)) throwUnpolyfillable(type);
      cloned = new C(
        // this is safe, since arraybuffer cannot have circular references
        structuredCloneInternal(value.buffer, map),
        value.byteOffset,
        type === 'DataView' ? value.byteLength : value.length
      );
      break;
    case 'DOMQuad':
      try {
        cloned = new DOMQuad(
          structuredCloneInternal(value.p1, map),
          structuredCloneInternal(value.p2, map),
          structuredCloneInternal(value.p3, map),
          structuredCloneInternal(value.p4, map)
        );
      } catch (error) {
        if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else throwUnpolyfillable(type);
      }
      break;
    case 'FileList':
      C = global_1.DataTransfer;
      if (isConstructor(C)) {
        dataTransfer = new C();
        for (i = 0, length = lengthOfArrayLike(value); i < length; i++) {
          dataTransfer.items.add(structuredCloneInternal(value[i], map));
        }
        cloned = dataTransfer.files;
      } else if (nativeRestrictedStructuredClone) {
        cloned = nativeRestrictedStructuredClone(value);
      } else throwUnpolyfillable(type);
      break;
    case 'ImageData':
      // Safari 9 ImageData is a constructor, but typeof ImageData is 'object'
      try {
        cloned = new ImageData(
          structuredCloneInternal(value.data, map),
          value.width,
          value.height,
          { colorSpace: value.colorSpace }
        );
      } catch (error) {
        if (nativeRestrictedStructuredClone) {
          cloned = nativeRestrictedStructuredClone(value);
        } else throwUnpolyfillable(type);
      } break;
    default:
      if (nativeRestrictedStructuredClone) {
        cloned = nativeRestrictedStructuredClone(value);
      } else switch (type) {
        case 'BigInt':
          // can be a 3rd party polyfill
          cloned = Object$1(value.valueOf());
          break;
        case 'Boolean':
          cloned = Object$1(booleanValueOf(value));
          break;
        case 'Number':
          cloned = Object$1(numberValueOf(value));
          break;
        case 'String':
          cloned = Object$1(stringValueOf(value));
          break;
        case 'Date':
          cloned = new Date(getTime(value));
          break;
        case 'ArrayBuffer':
          C = global_1.DataView;
          // `ArrayBuffer#slice` is not available in IE10
          // `ArrayBuffer#slice` and `DataView` are not available in old FF
          if (!C && typeof value.slice != 'function') throwUnpolyfillable(type);
          // detached buffers throws in `DataView` and `.slice`
          try {
            if (typeof value.slice == 'function') {
              cloned = value.slice(0);
            } else {
              length = value.byteLength;
              cloned = new ArrayBuffer(length);
              source = new C(value);
              target = new C(cloned);
              for (i = 0; i < length; i++) {
                target.setUint8(i, source.getUint8(i));
              }
            }
          } catch (error) {
            throw new DOMException('ArrayBuffer is detached', DATA_CLONE_ERROR);
          } break;
        case 'SharedArrayBuffer':
          // SharedArrayBuffer should use shared memory, we can't polyfill it, so return the original
          cloned = value;
          break;
        case 'Blob':
          try {
            cloned = value.slice(0, value.size, value.type);
          } catch (error) {
            throwUnpolyfillable(type);
          } break;
        case 'DOMPoint':
        case 'DOMPointReadOnly':
          C = global_1[type];
          try {
            cloned = C.fromPoint
              ? C.fromPoint(value)
              : new C(value.x, value.y, value.z, value.w);
          } catch (error) {
            throwUnpolyfillable(type);
          } break;
        case 'DOMRect':
        case 'DOMRectReadOnly':
          C = global_1[type];
          try {
            cloned = C.fromRect
              ? C.fromRect(value)
              : new C(value.x, value.y, value.width, value.height);
          } catch (error) {
            throwUnpolyfillable(type);
          } break;
        case 'DOMMatrix':
        case 'DOMMatrixReadOnly':
          C = global_1[type];
          try {
            cloned = C.fromMatrix
              ? C.fromMatrix(value)
              : new C(value);
          } catch (error) {
            throwUnpolyfillable(type);
          } break;
        case 'AudioData':
        case 'VideoFrame':
          if (!isCallable(value.clone)) throwUnpolyfillable(type);
          try {
            cloned = value.clone();
          } catch (error) {
            throwUncloneable(type);
          } break;
        case 'File':
          try {
            cloned = new File([value], value.name, value);
          } catch (error) {
            throwUnpolyfillable(type);
          } break;
        case 'CryptoKey':
        case 'GPUCompilationMessage':
        case 'GPUCompilationInfo':
        case 'ImageBitmap':
        case 'RTCCertificate':
        case 'WebAssembly.Module':
          throwUnpolyfillable(type);
          // break omitted
        default:
          throwUncloneable(type);
      }
  }

  mapSet(map, value, cloned);

  if (deep) switch (type) {
    case 'Array':
    case 'Object':
      keys = objectKeys(value);
      for (i = 0, length = lengthOfArrayLike(keys); i < length; i++) {
        key = keys[i];
        createProperty(cloned, key, structuredCloneInternal(value[key], map));
      } break;
    case 'Map':
      value.forEach(function (v, k) {
        mapSet(cloned, structuredCloneInternal(k, map), structuredCloneInternal(v, map));
      });
      break;
    case 'Set':
      value.forEach(function (v) {
        setAdd(cloned, structuredCloneInternal(v, map));
      });
      break;
    case 'Error':
      createNonEnumerableProperty(cloned, 'message', structuredCloneInternal(value.message, map));
      if (hasOwnProperty_1(value, 'cause')) {
        createNonEnumerableProperty(cloned, 'cause', structuredCloneInternal(value.cause, map));
      }
      if (name == 'AggregateError') {
        cloned.errors = structuredCloneInternal(value.errors, map);
      } // break omitted
    case 'DOMException':
      if (errorStackInstallable) {
        createNonEnumerableProperty(cloned, 'stack', structuredCloneInternal(value.stack, map));
      }
  }

  return cloned;
};

var PROPER_TRANSFER = nativeStructuredClone && !fails(function () {
  var buffer = new ArrayBuffer(8);
  var clone = nativeStructuredClone(buffer, { transfer: [buffer] });
  return buffer.byteLength != 0 || clone.byteLength != 8;
});

var tryToTransfer = function (rawTransfer, map) {
  if (!isObject(rawTransfer)) throw TypeError$1('Transfer option cannot be converted to a sequence');

  var transfer = [];

  iterate(rawTransfer, function (value) {
    push(transfer, anObject(value));
  });

  var i = 0;
  var length = lengthOfArrayLike(transfer);
  var value, type, C, transferredArray, transferred, canvas, context;

  if (PROPER_TRANSFER) {
    transferredArray = nativeStructuredClone(transfer, { transfer: transfer });
    while (i < length) mapSet(map, transfer[i], transferredArray[i++]);
  } else while (i < length) {
    value = transfer[i++];
    if (mapHas(map, value)) throw new DOMException('Duplicate transferable', DATA_CLONE_ERROR);

    type = classof(value);

    switch (type) {
      case 'ImageBitmap':
        C = global_1.OffscreenCanvas;
        if (!isConstructor(C)) throwUnpolyfillable(type, TRANSFERRING);
        try {
          canvas = new C(value.width, value.height);
          context = canvas.getContext('bitmaprenderer');
          context.transferFromImageBitmap(value);
          transferred = canvas.transferToImageBitmap();
        } catch (error) { /* empty */ }
        break;
      case 'AudioData':
      case 'VideoFrame':
        if (!isCallable(value.clone) || !isCallable(value.close)) throwUnpolyfillable(type, TRANSFERRING);
        try {
          transferred = value.clone();
          value.close();
        } catch (error) { /* empty */ }
        break;
      case 'ArrayBuffer':
      case 'MessagePort':
      case 'OffscreenCanvas':
      case 'ReadableStream':
      case 'TransformStream':
      case 'WritableStream':
        throwUnpolyfillable(type, TRANSFERRING);
    }

    if (transferred === undefined) throw new DOMException('This object cannot be transferred: ' + type, DATA_CLONE_ERROR);
    mapSet(map, value, transferred);
  }
};

_export({ global: true, enumerable: true, sham: !PROPER_TRANSFER, forced: FORCED_REPLACEMENT }, {
  structuredClone: function structuredClone(value /* , { transfer } */) {
    var options = validateArgumentsLength(arguments.length, 1) > 1 ? anObject(arguments[1]) : undefined;
    var transfer = options ? options.transfer : undefined;
    var map;

    if (transfer !== undefined) {
      map = new Map();
      tryToTransfer(transfer, map);
    }

    return structuredCloneInternal(value, map);
  }
});

var structuredClone$1 = path$1.structuredClone;

var structuredClone = structuredClone$1;

var _data, _keyField$1;

function _classPrivateFieldInitSpec$6(obj, privateMap, value) { _checkPrivateRedeclaration$6(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration$6(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
/**
* An extensible Proxy object which allows Proxys to play nice with classes. This opens up a world of possibilities that
* are compatible with classes. I.e., it is no longer necessary to create proxies for objects as a separate step:
* ```
* // the old way
* const Foo = class { ... }
* const foo = new Foo()
* const fooProxy = new Proxy(foo)
* // with Item
* const Bar = class extends Item { ... }
* const bar = new Bar() // and you're done! Bar is a proxy which also behaves (mostly) like a regular class.
* ```
*
* By default, Item ensures that incoming and outgoing data is safely copied. E.g.:
* ```
* const Foo = class extends Item { field }
* const data = { a: 1 }
* const foo = new Foo()
* foo.a = data
* data.a = 2
* console.log(`${data.a} - ${foo.a}`) // prints: '2 - 1'
* ```
*
* ## Implementation notes
*
* - If we just wrap and return the 'this' in the Item constructor, it will not find any sub-class functions. It would be
*   good to understand exactly why that is
*
* ## Next steps
*
* - Support configuration allowing support for non-copied incoming and/or outgoing data on a field by field basis.
* - Support configuration allowing custom transformation of incoming and/or outgoing data on a field by field basis.
*
* ## Known issues
*
* - `object.bar = new Function(...)` may mean "remember this function", but is treated as "callable function"; need to
*   implement configuration to avoid. The current workaround is to define a getter and/or setter for such a field, which
*   will force it to be treated like a field property rather than a function property.
*
* ## Credits
*
* The inspiration for this implementation came from [this post](https://stackoverflow.com/a/40714458/929494) by
* [John L.](https://stackoverflow.com/users/2437716/john-l). I'm blown away this technique isn't more widely cited.
*/
// TODO: more robust to build from 'Object.prototype'?

const SKIP_METHODS = ['constructor', '__defineGetter__', '__defineSetter__', 'hasOwnProperty', '__lookupGetter__', '__lookupSetter__', '__proto__', 'isPrototypeOf'];

const indexAllProperties = obj => {
  const propIndex = {};
  const methodIndex = {};

  while (obj
  /* && obj !== Object.prototype <- any use for hiding? */
  ) {
    const propDescriptors = Object.getOwnPropertyDescriptors(obj); // eslint-disable-next-line guard-for-in

    for (const propKey in propDescriptors) {
      const descriptor = propDescriptors[propKey];
      const propValue = descriptor.value;
      const isFunction = !!(propValue && typeof propValue === 'function');
      const hasGetter = !!descriptor.get;
      const hasSetter = !!descriptor.set;
      const isField = hasGetter || hasSetter; // probably not necessary, but to keep from confusion we don't override the Proxy functions

      if (!isField && propValue && obj !== Object && isFunction && !SKIP_METHODS.includes(propKey)) {
        methodIndex[propKey] = descriptor;
        /* {
        func: propValue,
        descriptor:
        } */
      } else if (isField) {
        propIndex[propKey] = {
          hasGetter: !!descriptor.get,
          hasSetter: !!descriptor.set
        };
      }
    }

    obj = Object.getPrototypeOf(obj);
  }

  return [propIndex, methodIndex];
};

const handler = ({
  data,
  propIndex,
  methodIndex
}) => ({
  get: (object, key) => {
    var _propIndex$key;

    if (key === 'isProxy') return true; // the 'if (key in object)' syntax is nice... but how to distinguish between getters and setters?

    if (((_propIndex$key = propIndex[key]) === null || _propIndex$key === void 0 ? void 0 : _propIndex$key.hasGetter) === true) return object[key]; // object method calls go through the handler first

    if (methodIndex[key]) return object[key];
    const localValue = object[key]; // else

    const dataValue = data[key];
    const value = localValue || dataValue; // TODO: try switch

    return value && typeof value === 'object' ? structuredClone(value) : value;
  },
  set: (object, key, value) => {
    var _propIndex$key2;

    if (((_propIndex$key2 = propIndex[key]) === null || _propIndex$key2 === void 0 ? void 0 : _propIndex$key2.hasSetter) === true) {
      object[key] = value && typeof value === 'object' ? object[key] = structuredClone(value) : object[key] = value;
    }

    if (methodIndex[key]) {
      object[key] = value;
    }

    throw new Error(`Setting '${key}' is not supported.`);
  },
  ownKeys: target => {
    return Reflect.ownKeys(target).concat(Reflect.ownKeys(data));
  },
  has: (target, key) => {
    return key in target || key in data;
  },
  getOwnPropertyDescriptor: (target, key) => {
    return Object.getOwnPropertyDescriptor(target, key) // TODO: modify the prop definitions so that the 'data' items are indeed non-configurable
    || Object.assign(Object.getOwnPropertyDescriptor(data, key), {
      writable: false,
      configurable: true
    });
  }
});

const defaultNormalizer = id => id;

const Item = (_data = /*#__PURE__*/new WeakMap(), _keyField$1 = /*#__PURE__*/new WeakMap(), class Item {
  constructor(data, {
    idNormalizer = defaultNormalizer,
    itemName,
    keyField,
    ...rest
  } = {}) {
    _classPrivateFieldInitSpec$6(this, _data, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$6(this, _keyField$1, {
      writable: true,
      value: void 0
    });

    if (keyField === undefined) {
      throw new Error('Key field must be specified. ' + "Note, 'Item' is not typically created directly. Create a subclass or specify 'options.keyField' directly.");
    }

    _classPrivateFieldSet(this, _data, data);

    _classPrivateFieldSet(this, _keyField$1, keyField);

    if (!data[keyField]) {
      throw new Error(`Key field '${keyField}' value '${data[keyField]}' is non-truthy!`);
    } // The 'id' is normally set at the resource level which gives us a chance to do a quick duplicate check. However,
    // if an item is created through some other route, let's support setting an explicit ID


    if (!data.id) {
      data.id = idNormalizer(data[keyField]);
    } else if (data.id !== idNormalizer(data[keyField])) {
      throw new Error(`Error creating${itemName === undefined ? '' : ` '${itemName}'`} item; 'id' (${data.id}) and${idNormalizer === defaultNormalizer ? '' : ' normalized'} key field (${idNormalizer === defaultNormalizer ? '' : 'raw: '}${data[keyField]}) do not match.`);
    }

    const [propIndex, methodIndex] = indexAllProperties(this);
    const proxy = new Proxy(this, handler({
      data: _classPrivateFieldGet(this, _data),
      propIndex,
      methodIndex
    }));
    return proxy;
  }

  get id() {
    return _classPrivateFieldGet(this, _data).id;
  }

  get data() {
    return structuredClone(_classPrivateFieldGet(this, _data));
  }

  get rawData() {
    return _classPrivateFieldGet(this, _data);
  }

});

const AuditRecord = class extends Item {
  constructor(data, options) {
    super(data, Object.assign(options, {
      keyField: 'id'
    }));
  }

};

function unwrapExports$1 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule$1(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classCallCheck = createCommonjsModule$1(function (module) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _classCallCheck = unwrapExports$1(classCallCheck);

var createClass = createCommonjsModule$1(function (module) {
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _createClass = unwrapExports$1(createClass);

var defineProperty$1 = createCommonjsModule$1(function (module) {
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _defineProperty$1 = unwrapExports$1(defineProperty$1);

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var paramRe = /(^|[ (!&=|+-])([A-Z_][A-Z0-9_]*)/g; // start with: (, number, bool, or unary op !
// at least on space or param
// then maybe 0+ safe stuff
// Note that this RE relies on the intentional spacing
// TODO: we could lock down further by requring expressions on eithre side of dual operators

var safeEvalRe = /^ *(\(|[0-9]+|false|true|!)(( |\()+([0-9]+|true|false|!|&&|[|]{2}|==|!=|\+|-|%|\*|<|>|<=|>=)( |\)*))* *$/;
/**
* A safe-ish (TODO: developed based on a Stackexchange post; find and link?) boolean expression evaluator.
*/

var Evaluator = /*#__PURE__*/function () {
  // declare recognized internal parameters

  /**
  * Recogrizes 'parameters' and 'zeroRes' field.
  *
  * 'parameters' maps strings to values. E.g.: parameters `{ "IS_CONTRACTOR": 1 }` would cause the condition
  * `IS_CONTRACTOR` to evaluate true.
  *
  * 'zeroRes' is an array of RegExps used to match against a condition string *after* resolving all the parameters. If a
  *    match is made, then that value is set to zero. I.e., `zeroRes` determines which parameters are default zero.
  */
  function Evaluator(settings) {
    _classCallCheck(this, Evaluator);

    _defineProperty$1(this, "parameters", void 0);

    _defineProperty$1(this, "zeroRes", void 0);

    Object.assign(this, settings);
    this.parameters = this.parameters || {};
    this.zeroRes = this.zeroRes || [];
  }

  _createClass(Evaluator, [{
    key: "evalTruth",
    value: function evalTruth(origExpression) {
      var _this = this;

      if (typeof origExpression !== 'string') {
        throw new Error("Expression must be a string. Got: '".concat(origExpression, "'."));
      }

      var expression = origExpression; // save original expression in case we need to reflect to user on error
      // replace all the parameters in the expression

      var results = expression.matchAll(paramRe);

      var _iterator = _createForOfIteratorHelper$2(results),
          _step;

      try {
        var _loop = function _loop() {
          var result = _step.value;
          var param = result[2];
          var val = _this.parameters[param]; // look on the parameter object

          if (val === undefined) {
            // if not defined, look on process.env
            val = process.env[param];
          }

          if (val === undefined) {
            if (_this.zeroRes.some(function (re) {
              return param.match(re);
            })) {
              val = 0;
            } else {
              throw new Error("Condition parameter '".concat(param, "' is not defined. Update settings and/or check expression."));
            }
          } // 'replaceAll' not supported on node (TODO: add Babel tform); though 'replace' does replace all *if* first arg is
          // RE... so... maybe not necessary?)


          expression = expression.replace(new RegExp("(^|[^A-Z0-9_])".concat(param, "([^A-Z0-9_]|$)"), 'g'), "$1 ".concat(val, " $2"));
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        } // check that everything is save

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (!expression.match(safeEvalRe)) {
        throw new Error("Invalid expression does not fully resolve or has unsafe code: ".concat(origExpression, " => ").concat(expression));
      } // else, let's eval it


      return Function("\"use strict\";return (".concat(expression, ") ? true : false"))(); // eslint-disable-line no-new-func
    }
  }]);

  return Evaluator;
}();

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var arrayLikeToArray = createCommonjsModule(function (module) {
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(arrayLikeToArray);

var arrayWithoutHoles = createCommonjsModule(function (module) {
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(arrayWithoutHoles);

var iterableToArray = createCommonjsModule(function (module) {
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(iterableToArray);

var unsupportedIterableToArray = createCommonjsModule(function (module) {
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(unsupportedIterableToArray);

var nonIterableSpread = createCommonjsModule(function (module) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

unwrapExports(nonIterableSpread);

var toConsumableArray = createCommonjsModule(function (module) {
function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _toConsumableArray = unwrapExports(toConsumableArray);

var defineProperty = createCommonjsModule(function (module) {
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _defineProperty = unwrapExports(defineProperty);

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;
});

var _typeof = unwrapExports(_typeof_1);

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
* Package internal utility functions.
*/
var replaceRE = /\$\{([A-Za-z_][A-Za-z0-9_]*)\}/g;
/**
* Replaces constructs like '${FOO}' with the environment value of 'FOO' (or whatever key is used). Will raise an
* exception if no value is found for a given key.
*/

var envTemplateString = function envTemplateString(path) {
  var origPath = path; // used for error messages

  var matches; // A replaced var may itself reference vars, so we keep processing until everything is resolved.

  while ((matches = _toConsumableArray(path.matchAll(replaceRE))).length > 0) {
    // const matches = [...path.matchAll(replaceRE)]
    matches.reverse(); // The reverse allows us to use the start and end indexes without messing up the string.

    var _iterator = _createForOfIteratorHelper$1(matches),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var matchInfo = _step.value;
        var match = matchInfo[0];
        var key = matchInfo[1];
        var value = process.env[key];
        var matchStart = matchInfo.index;

        if (value === undefined) {
          throw new Error("No such environment parameter '".concat(key, "' found in path replacement: '").concat(origPath, "'."));
        }

        path = path.substring(0, matchStart) + value + path.substring(matchStart + match.length);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return path;
};

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var FJSON_META_DATA_KEY = 'com.liquid-labs.federated-json';

var jsonRE = /\.json$/;
/**
* Reads a JSON file and processes for federated mount points to construct a composite JSON object from one or more
* files.
*/

var readFJSON = function readFJSON() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var file, overrides, rememberSource, separateMeta, _metaData, _metaPaths, _rootPath;

  if (!args || args.length === 0) throw new Error("Invalid 'no argument' call to readFJSON.");else if (typeof args[0] === 'string') {
    file = args[0];

    if (args.length === 2) {
      if (_typeof(args[1]) === 'object') {
        var _args$ = args[1];
        overrides = _args$.overrides;
        rememberSource = _args$.rememberSource;
        separateMeta = _args$.separateMeta;
        _metaData = _args$._metaData;
        _metaPaths = _args$._metaPaths;
        _rootPath = _args$._rootPath;
      } else throw new Error("Unexpected second argument to readFJSON; expects options object.");
    } else if (args.length !== 1) throw new Error("Invalid call to readFJSON; try expects (string, options) or (options).");
  } else {
    // treat args[0] as object and see what happens!
    if (args.length > 1) {
      throw new Error("Invalid call to readFJSON; when passing options as first arg, it must be the only arg.");
    }
    var _args$2 = args[0];
    file = _args$2.file;
    overrides = _args$2.overrides;
    rememberSource = _args$2.rememberSource;
    separateMeta = _args$2.separateMeta;
    _metaData = _args$2._metaData;
    _metaPaths = _args$2._metaPaths;
    _rootPath = _args$2._rootPath;
  }

  if (!file) {
    throw new Error("File path invalid. (".concat(file, ")"));
  }

  var processedPath = envTemplateString(file);

  if (!fs__namespace.existsSync(processedPath)) {
    var msg = "No such file: '".concat(file, "'") + (file !== processedPath ? " ('".concat(processedPath, "')") : '');
    throw new Error(msg);
  }

  var dataBits = fs__namespace.readFileSync(processedPath);
  var data; // actually, would love 'const', but need to set inside try block and don'w want to expand scope of the try.

  try {
    data = JSON.parse(dataBits);
  } catch (e) {
    if (e instanceof SyntaxError) {
      throw new SyntaxError("".concat(e.message, " while processing ").concat(file));
    }
  }

  if (rememberSource === true) {
    if (_typeof(data) === 'object' && !Array.isArray(data)) setSource({
      data: data,
      file: file
    });else if (Array.isArray(data)) data.sourceFile = file;
  }
  // process the sub-files

  if (_metaData === undefined) {
    _metaData = {};
    _metaPaths = [];
  }

  var myMeta = getMyMeta(data);

  if (myMeta !== undefined) {
    var myPath = _rootPath || '.';

    _metaPaths.push(myPath); // TODO: currently limited to mount paths traversing objects only


    var currMetaRef = _metaData;

    if (myPath !== '.') {
      var currPath = myPath.split('.');
      currPath.shift();

      var _iterator = _createForOfIteratorHelper(currPath),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;
          currMetaRef[entry] = {};
          currMetaRef = currMetaRef[entry];
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else if (separateMeta === true) {
      delete data._meta;
    }

    currMetaRef._meta = _defineProperty({}, FJSON_META_DATA_KEY, myMeta);
    _metaData = currMetaRef;
  }

  var _iterator2 = _createForOfIteratorHelper((myMeta === null || myMeta === void 0 ? void 0 : myMeta.mountSpecs) || []),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var mntSpec = _step2.value;

      var _processMountSpec = processMountSpec({
        mntSpec: mntSpec,
        data: data,
        overrides: overrides,
        sourceFile: _file
      }),
          _file = _processMountSpec.file,
          dir = _processMountSpec.dir,
          path = _processMountSpec.path,
          mountPoint = _processMountSpec.mountPoint,
          finalKey = _processMountSpec.finalKey;

      if (_file) {
        var subData = readFJSON({
          file: _file,
          overrides: overrides,
          rememberSource: rememberSource,
          separateMeta: separateMeta,
          _metaData: _metaData,
          _metaPaths: _metaPaths,
          _rootPath: "".concat(_rootPath || '').concat(path)
        });

        if (separateMeta === true) {
          subData = subData[0];
          delete subData._meta;
        }

        mountPoint[finalKey] = subData;
      } else {
        // 'dir' is good because we expect processMountSpec() to raise an exception if neither specified.
        var mntObj = {};
        mountPoint[finalKey] = mntObj;
        var files = fs__namespace.readdirSync(dir, {
          withFileTypes: true
        }).filter(function (item) {
          return !item.isDirectory() && jsonRE.test(item.name);
        }).map(function (item) {
          return item.name;
        }); // note 'name' is the simple/basename, not the whole path.

        var _iterator4 = _createForOfIteratorHelper(files),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var dirFile = _step4.value;
            var mntPnt = dirFile.replace(jsonRE, '');

            var _subData = readFJSON({
              file: fsPath__namespace.join(dir, dirFile),
              overrides: overrides,
              rememberSource: rememberSource,
              separateMeta: separateMeta,
              _metaData: _metaData,
              _metaPaths: _metaPaths,
              _rootPath: "".concat(_rootPath || '').concat(path)
            });

            if (separateMeta === true) {
              _subData = _subData[0];
              delete _subData._meta;
            }

            mntObj[mntPnt] = _subData;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var _iterator3 = _createForOfIteratorHelper((myMeta === null || myMeta === void 0 ? void 0 : myMeta.linkSpecs) || []),
      _step3;

  try {
    var _loop = function _loop() {
      var lnkSpec = _step3.value;

      var _processLinkSpec = processLinkSpec(lnkSpec, data),
          finalRef = _processLinkSpec.finalRef,
          source = _processLinkSpec.source,
          keyName = _processLinkSpec.keyName,
          penultimateRef = _processLinkSpec.penultimateRef,
          finalKey = _processLinkSpec.finalKey;

      var getRealItem = function getRealItem(soure, keyName, key) {
        return source.find(function (candidate) {
          return candidate[keyName] === key;
        }) || function (e) {
          throw e;
        }(new Error("Cannot find link '".concat(key, "' in '").concat(lnkSpec.linkTo, "'.")));
      };

      if (Array.isArray(finalRef)) {
        // replace the contents
        var realItems = finalRef.map(function (key) {
          return getRealItem(source, keyName, key);
        });
        finalRef.splice.apply(finalRef, [0, finalRef.length].concat(_toConsumableArray(realItems)));
      } else if (_typeof(finalRef) === 'object') {
        for (var _i = 0, _Object$keys = Object.keys(finalRef); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          finalRef[key] = getRealItem(source, keyName, key);
        }
      } else {
        // it's a single key
        penultimateRef[finalKey] = getRealItem(source, keyName, finalRef);
      }
    };

    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return separateMeta ? [data, _metaData] : data;
};
/**
* Set's the meta source information.
*/


var setSource = function setSource(_ref2) {
  var data = _ref2.data,
      file = _ref2.file;
  var myMeta = ensureMyMeta(data);
  myMeta.sourceFile = file;
};

var getMyMeta = function getMyMeta(data) {
  var _data$_meta;

  return data === null || data === void 0 ? void 0 : (_data$_meta = data._meta) === null || _data$_meta === void 0 ? void 0 : _data$_meta[FJSON_META_DATA_KEY];
};

var ensureMyMeta = function ensureMyMeta(data) {
  var myMeta = getMyMeta(data);

  if (!myMeta) {
    if (data._meta === undefined) {
      data._meta = {};
    }

    if (data._meta[FJSON_META_DATA_KEY] === undefined) {
      data._meta[FJSON_META_DATA_KEY] = {};
    }

    myMeta = getMyMeta(data);
  }

  return myMeta;
};

var getSourceFile = function getSourceFile(data) {
  if (_typeof(data) === 'object' && !Array.isArray(data)) {
    var myMeta = getMyMeta(data);
    return myMeta === null || myMeta === void 0 ? void 0 : myMeta.sourceFile;
  } else if (Array.isArray(data)) {
    return data.sourceFile;
  }

  return undefined;
};
/**
* Internal function to process a mount spec into useful components utilized by the `readFJSON` and `writeFJSON`.
*/


var processMountSpec = function processMountSpec(_ref4) {
  var mntSpec = _ref4.mntSpec,
      data = _ref4.data,
      overrides = _ref4.overrides,
      preserveOriginal = _ref4.preserveOriginal,
      sourceFile = _ref4.sourceFile;
  var path = mntSpec.path,
      file = mntSpec.file,
      dir = mntSpec.dir;

  if (overrides !== undefined && path in overrides) {
    var override = overrides[path];

    if (override.startsWith('file:')) {
      file = override.substring(5);
      dir = undefined;
    } else if (override.startsWith('dir:')) {
      dir = override.substring(4);
      file = undefined;
    } else throw new Error("Cannot parse override spec '".concat(override, "'. Override spec must start with 'file:' or 'dir:'."));
  } else {
    file && dir // eslint-disable-line no-unused-expressions
    && function (e) {
      throw e;
    }(new Error("Bad mount spec; cannot specify both data file (".concat(file, ") and directory (").concat(dir, ")").concat(sourceFile ? "; source file: ".concat(sourceFile) : '')));
    !file && !dir // eslint-disable-line no-unused-expressions
    && function (e) {
      throw e;
    }(new Error("Bad mount spec; neither data file nor directory".concat(sourceFile ? "; source file: ".concat(sourceFile) : '', ".")));
  }

  file && (file = envTemplateString(file));
  dir && (dir = envTemplateString(dir));

  var _processJSONPath = processJSONPath({
    path: path,
    data: data,
    preserveOriginal: preserveOriginal
  }),
      mountPoint = _processJSONPath.penultimateRef,
      finalKey = _processJSONPath.finalKey,
      newData = _processJSONPath.newData;

  return {
    file: file,
    dir: dir,
    path: path,
    mountPoint: mountPoint,
    finalKey: finalKey,
    newData: newData
  };
};
/**
* Internal function to process a link spec into useful components utilized by the `readFJSON` and `writeFJSON`.
*/


var processLinkSpec = function processLinkSpec(lnkSpec, data) {
  var linkRefs = lnkSpec.linkRefs,
      linkTo = lnkSpec.linkTo,
      keyName = lnkSpec.linkKey;

  var _processJSONPath2 = processJSONPath({
    path: linkRefs,
    data: data
  }),
      finalRef = _processJSONPath2.finalRef,
      penultimateRef = _processJSONPath2.penultimateRef,
      finalKey = _processJSONPath2.finalKey;

  var _processJSONPath3 = processJSONPath({
    path: linkTo,
    data: data
  }),
      source = _processJSONPath3.finalRef;

  return {
    finalRef: finalRef,
    source: source,
    keyName: keyName,
    penultimateRef: penultimateRef,
    finalKey: finalKey
  };
};

var shallowCopy = function shallowCopy(input) {
  return Array.isArray(input) ? input.slice() : _typeof(input) === 'object' && input !== null ? Object.assign({}, input) : input;
};

var processJSONPath = function processJSONPath(_ref5) {
  var path = _ref5.path,
      data = _ref5.data,
      preserveOriginal = _ref5.preserveOriginal;

  if (!path) {
    throw new Error("No 'path' specified for mount spec mount point.");
  }

  var pathTrail = path.split('.');
  pathTrail.shift();
  var finalKey = pathTrail.pop();
  var newData = preserveOriginal ? shallowCopy(data) : data;
  var penultimateRef = newData; // not necessarily penultimate yet, but will be...

  var _iterator6 = _createForOfIteratorHelper(pathTrail),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var key = _step6.value;

      if (preserveOriginal) {
        var result = shallowCopy(penultimateRef[key]);
        penultimateRef[key] = result;
        penultimateRef = result;
      } else {
        penultimateRef = penultimateRef[key];
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return {
    finalRef: penultimateRef[finalKey],
    penultimateRef: penultimateRef,
    finalKey: finalKey,
    newData: newData
  };
}; // aliases for 'import * as fjson; fjson.write()' style
var read = readFJSON;

/**
* Constants used to identify the index key-record relationships. These effect how the indexSpecs are handled.
*
* Note that that you could interogate the value as a binary number made of 'key value' and "record value". A "one" is encoded as binary zero and "many" as binary 1. E.g.: "one to one" => '00` = 0 (base 10); one-to-many =# '01' = 2 (base 10).
*/
const ONE_TO_ONE = 0; // 00

const ONE_TO_MANY = 2; // 01

var _indexSpecs, _specIndex, _items, _idIndex, _idField, _className, _getIndexSpec, _getIdIndexKey, _annotateList;

function _classPrivateMethodInitSpec$2(obj, privateSet) { _checkPrivateRedeclaration$5(obj, privateSet); privateSet.add(obj); }

function _classPrivateFieldInitSpec$5(obj, privateMap, value) { _checkPrivateRedeclaration$5(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration$5(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateMethodGet$2(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
/**
* Manages simple a set of items and value-field one-to-one and one-to-many indexes. Intended for use with a set of items
* of the same "class". It is essential that items retrieved are cloned before modification and the class provides
* 'getItem' to retrieve by the ID and 'getByIndex' which will retrieve items from any named or anonymous index.
*
* Because 'getByIndex' may return a list of associated objects, it will, by default, return an NON-cloned array. The
* array will, however, have the function '.getSafe(index)' which will clone safely clone the objects for modification.
*
* An implicit 'byId' index, which can be retrieved via `listManager.getIndex('byId')` (or whatever you configure as
* the `idIndexName`) is implicitly created and cannot be deleted. Items can be read, but be careful when using items
* from the index directly changing fields could pollute the indexes and result in inconsistent and erroneous behavior.
* Instead, use the access methods mentioned above.
*
* ## Usage requirements
*
* - Items must have an ID field which uniquely identifies each item in the set.
* - The ID field _*must*_ be effectively immutable.
* - Items returned to the user _*must*_ be copied.
*
* ## Implementation notes
*
* The implicity 'byId' index is necessary to manage item updates where it is necessary to identify the previous item
* in order to properly update the non-ID indexes.
*/

const ListManager = (_indexSpecs = /*#__PURE__*/new WeakMap(), _specIndex = /*#__PURE__*/new WeakMap(), _items = /*#__PURE__*/new WeakMap(), _idIndex = /*#__PURE__*/new WeakMap(), _idField = /*#__PURE__*/new WeakMap(), _className = /*#__PURE__*/new WeakMap(), _getIndexSpec = /*#__PURE__*/new WeakSet(), _getIdIndexKey = /*#__PURE__*/new WeakSet(), _annotateList = /*#__PURE__*/new WeakSet(), class ListManager {
  /**
  * #### Parameters
  *
  * - items: The list of items to build our index manager around. Note that the list will NOT be copied and will be used
  *     as is. External modifications to the list or any items within it will break and cause undefined behavior. Copy
  *     the incoming list with something like `items: [...items]` unless you can guarantee that the array will not be
  *     modified.
  */
  constructor({
    items,
    idField = 'id',
    idIndexName = 'byId',
    className
  }) {
    _classPrivateMethodInitSpec$2(this, _annotateList);

    _classPrivateMethodInitSpec$2(this, _getIdIndexKey);

    _classPrivateMethodInitSpec$2(this, _getIndexSpec);

    _classPrivateFieldInitSpec$5(this, _indexSpecs, {
      writable: true,
      value: []
    });

    _classPrivateFieldInitSpec$5(this, _specIndex, {
      writable: true,
      value: {}
    });

    _classPrivateFieldInitSpec$5(this, _items, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$5(this, _idIndex, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$5(this, _idField, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$5(this, _className, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _items, items);

    _classPrivateFieldSet(this, _idField, idField);

    _classPrivateFieldSet(this, _idIndex, this.addIndex({
      name: 'byId',
      keyField: idField,
      relationship: ONE_TO_ONE
    }));

    _classPrivateFieldSet(this, _className, className);
  }

  get idField() {
    return _classPrivateFieldGet(this, _idField);
  }
  /**
  * ## Retriewal functions
  */

  /**
  * Retrieves the list. By default, the list is copied but the items are not. However, a 'getSafe(listIndex)' function
  * is attached to the array which can be used to make update safe copies of the items in the list.
  *
  * #### Parameters
  *
  * - `cloneAll`: Preimptively deep-clones all items in the list. Both the list and items will be unique and
  *      independent. The `getSafe` function is not attached since everything is already cloned.
  * - `noClone`: returns the underlying list itself. `noClone` is ignored if `cloneAll` is `true`.
  */


  getItems({
    cloneAll,
    cloneList,
    noClone
  } = {}) {
    if (cloneAll === true) {
      return structuredClone(_classPrivateFieldGet(this, _items));
    }

    if (cloneList === true) {
      return [..._classPrivateFieldGet(this, _items)];
    }

    if (noClone === true) {
      return _classPrivateFieldGet(this, _items);
    } // else return default


    return structuredClone(_classPrivateFieldGet(this, _items));
  }
  /**
  * Retrieves a singel item by id.
  *
  * #### Parameters
  *
  * - id: the ID of the item to be retrieved.
  * - className: (optional) the name item class; e.g. 'car', 'animal', etc. Used to produce error messages and defaults *     to the class name set when creating listManager Generally, it's recommended to set the class name when
  *     creating the ListManager instance rather than here, though there may be some cases where it is useful to
  *     override the default value.
  * - noClone: (optional) when set 'true', skips cloning the returned item. This should generally only be used when it
  *     can be guaranteed that the returned object will not be modified in any way.
  * - requried: (optional) when set `true`, causes an error to be thrown if no item is found with the given `id`.
  */


  getItem(id, {
    noClone = false,
    required = false,
    className = _classPrivateFieldGet(this, _className)
  } = {}) {
    const item = _classPrivateFieldGet(this, _idIndex)[id];

    if (item === undefined && required === true) {
      throw new Error(`No such ${className || 'item'} with id '${id}' found.`);
    }

    return noClone ? item : structuredClone(item);
  }
  /**
  * Returns the index value, which may be a single item (for one-to-one indexes) or a list of items (for one-to-many
  * indexes). In the one-to-one case, the item returned is cloned by default. To avoid unecessary expense, the list is
  * not cloned in the one-to-many case unless 'cloneAll' is set to true. Rather, a 'getSafe(listIndex)' function is
  * attached to the array for convenience.
  *
  * #### Parameters
  *
  * - `index`: a reference to the index to use; either `index` or `indexName` must be specified and `index` is
  *      preferred if both are specified.
  * - `indexName`: the name of the index to use. See `index`.
  * - `key`: the index key to lookup.
  * - className: (optional) the name item class; e.g. 'car', 'animal', etc. Used to produce error messages and defaults *     to the class name set when creating listManager Generally, it's recommended to set the class name when
  *     creating the ListManager instance rather than here, though there may be some cases where it is useful to
  *     override the default value.
  * - `cloneAll`: (optional) preemptively clones each member in a one-to-many list. `cloneAll` supercedes `noClone` and
  *      will also cause single items (from a one-to-one index) to be cloned even if `noClone` is `true`.
  * - `noClone`: (optional) will skip item cloning or attaching `getSafe` to list results unless `cloneAll` is also
  *     `true`.
  * - `required`: (optional) will raise an error if the index value is undefined.
  */


  getByIndex({
    index,
    indexName,
    key,
    noClone = false,
    required = false,
    cloneAll = true,
    cloneList,
    className = _classPrivateFieldGet(this, _className)
  }) {
    // Note, indicating a valid index is always required and '#getIndex' spec will throw an error if no match is found.
    const {
      index: indexActual,
      name,
      relationship
    } = _classPrivateMethodGet$2(this, _getIndexSpec, _getIndexSpec2).call(this, index || indexName);

    const value = indexActual[key]; // value requied?

    if (value === undefined && required === true) {
      indexName = indexName || name;
      throw new Error(`Did not find ${className ? `${className} for ` : ''}key '${key}' in index${indexName ? ` '${indexName}'` : ''}.`);
    }

    if (relationship === ONE_TO_ONE) {
      if (cloneAll === true) return structuredClone(value);else if (noClone === true) return value;else return structuredClone(value);
    } else {
      // list
      if (value === undefined) {
        return [];
      } else if (cloneAll === true) {
        return value.map(i => structuredClone(i));
      } else if (cloneList === true) {
        return [...value];
      } else if (noClone === true) {
        return value;
      } else {
        return value.map(i => structuredClone(i));
      }
    }
  }

  addIndex(indexSpec) {
    for (const reqField of ['relationship', 'keyField']) {
      if (indexSpec[reqField] === undefined) {
        throw new Error(`Index spec lacks required field '${reqField}'.`);
      }
    }

    const index = {};
    indexSpec = {
      index,
      ...indexSpec
    };

    _classPrivateFieldGet(this, _indexSpecs).push(indexSpec);

    if (indexSpec.name !== undefined) {
      _classPrivateFieldGet(this, _specIndex)[indexSpec.name] = indexSpec;
    }

    this.rebuild(indexSpec);
    return index;
  }

  getIndex(name) {
    return _classPrivateMethodGet$2(this, _getIndexSpec, _getIndexSpec2).call(this, name).index;
  }

  getNamedIndexCount() {
    return Object.keys(_classPrivateFieldGet(this, _specIndex)).length;
  }

  getTotalIndexCount() {
    return _classPrivateFieldGet(this, _indexSpecs).length;
  }

  rebuild(specOrIndex) {
    const indexSpec = typeof specOrIndex === 'string' ? _classPrivateMethodGet$2(this, _getIndexSpec, _getIndexSpec2).call(this, specOrIndex) : specOrIndex;
    routeByRelationship({
      items: _classPrivateFieldGet(this, _items),
      indexSpec,
      one2oneFunc: rebuildOneToOne,
      one2manyFunc: rebuildOneToMany
    });
  }

  rebuildAll() {
    routeByRelationships({
      items: _classPrivateFieldGet(this, _items),
      indexSpecs: _classPrivateFieldGet(this, _indexSpecs),
      one2oneFunc: rebuildOneToOne,
      one2manyFunc: rebuildOneToMany
    });
  }

  addItem(item) {
    _classPrivateFieldGet(this, _items).push(item);

    routeByRelationships({
      item,
      indexSpecs: _classPrivateFieldGet(this, _indexSpecs),
      one2oneFunc: addOneToOne,
      one2manyFunc: addOneToMany
    });
  }

  updateItem(item) {
    // this.getItem(item[this.#idIndex])
    // check that this is a valid update
    this.getItem(item[_classPrivateFieldGet(this, _idField)], {
      required: true,
      noClone: true
    }); // In future, we could keep the base list sorted by ID and then use quick-sort insertion and update techniques. For
    // now, we just brute force it.

    const itemIndex = _classPrivateFieldGet(this, _items).findIndex(i => i.id === item.id);

    _classPrivateFieldGet(this, _items).splice(itemIndex, 1, item);

    routeByRelationships({
      item,
      idField: _classPrivateFieldGet(this, _idField),
      idIndex: _classPrivateFieldGet(this, _idIndex),
      indexSpecs: _classPrivateFieldGet(this, _indexSpecs),
      one2oneFunc: updateOneToOne,
      one2manyFunc: updateOneToMany
    });
  }

  deleteItem(item) {
    // check that this is a valid delete
    this.getItem(item[_classPrivateFieldGet(this, _idField)], {
      required: true,
      noClone: true
    });

    const itemIndex = _classPrivateFieldGet(this, _items).findIndex(i => i.id === item.id);

    _classPrivateFieldGet(this, _items).splice(itemIndex, 1);

    routeByRelationships({
      item,
      idField: _classPrivateFieldGet(this, _idField),
      idIndex: _classPrivateFieldGet(this, _idIndex),
      indexSpecs: _classPrivateFieldGet(this, _indexSpecs),
      one2oneFunc: deleteOneToOne,
      one2manyFunc: deleteOneToMany
    });
  }

});
/**
* ## Helpers
* ### Internal plumbing
*/

function _getIndexSpec2(nameOrIndex) {
  const indexSpec = typeof nameOrIndex === 'string' ? _classPrivateFieldGet(this, _specIndex)[nameOrIndex] : _classPrivateFieldGet(this, _indexSpecs).find(spec => spec.index === nameOrIndex);

  if (indexSpec === undefined) {
    const msg = typeof nameOrIndex === 'string' ? `No such index '${nameOrIndex}' found.` : 'Could not find matching index.';
    throw new Error(msg);
  }

  return indexSpec;
}

const truncateObject = o => {
  for (const key of Object.getOwnPropertyNames(o)) {
    delete o[key];
  }
};

const routeByRelationship = ({
  indexSpec,
  one2oneFunc,
  one2manyFunc,
  ...rest
}) => {
  switch (indexSpec.relationship) {
    case ONE_TO_ONE:
      one2oneFunc({ ...indexSpec,
        ...rest
      });
      break;

    case ONE_TO_MANY:
      one2manyFunc({ ...indexSpec,
        ...rest
      });
      break;
    // TODO: include this check in 'addIndex'

    default:
      throw new Error(`Unknown index relationship spec ('${indexSpec.relationship}')`);
  }
};

const routeByRelationships = ({
  indexSpecs,
  ...args
}) => {
  // the reversal is necessary to preserve the original item stored in the implicit, first ID index
  for (const indexSpec of indexSpecs.reverse()) {
    routeByRelationship({
      indexSpec,
      ...args
    });
  }
}; // ### Rebuild helpers


const rebuildOneToOne = ({
  items,
  index,
  keyField
}) => {
  truncateObject(index);
  items.reduce((newIdx, item) => {
    newIdx[item[keyField]] = item;
    return newIdx;
  }, index);
};

const rebuildOneToMany = ({
  items,
  index,
  keyField
}) => {
  truncateObject(index);
  items.reduce((newIdx, item) => {
    const indexValue = item[keyField];
    const list = newIdx[indexValue] || [];
    list.push(item);
    newIdx[indexValue] = list;
    return newIdx;
  }, index);
};
/**
* Any "is this a valid add" checks are assumed to be performed by the caller.
*/


const addOneToOne = ({
  item,
  index,
  keyField
}) => {
  index[item[keyField]] = item;
};
/**
* Any "is this a valid add" checks are assumed to be performed by the caller.
*/


const addOneToMany = ({
  item,
  index,
  keyField
}) => {
  const indexValue = item[keyField];
  const list = index[indexValue] || [];
  list.push(item);
  index[indexValue] = list;
};
/**
* Any "is this a valid update" checks are assumed to be performed by the caller.
*/


const updateOneToOne = ({
  item,
  index,
  keyField,
  idField,
  idIndex
}) => {
  if (idIndex !== index) {
    // then we have to remove the original entry before adding the new entry
    const origItem = idIndex[item[idField]];
    delete index[origItem[keyField]];
  }

  index[item[keyField]] = item;
};
/**
* Any "is this a valid update" checks are assumed to be performed by the caller.
*/


const updateOneToMany = ({
  item,
  keyField,
  index,
  idField,
  idIndex
}) => {
  const {
    origItem,
    origList,
    origListIndex
  } = getOrigData({
    item,
    idField,
    idIndex,
    keyField,
    index
  });

  if (origItem[keyField] === item[keyField]) {
    // then the key value of this index hasn't changed and we can simply replace
    origList.splice(origListIndex, 1, item);
  } else {
    // the key value has changed and we need to delete the original and re-add the new value
    origList.splice(origListIndex, 1);
    addOneToMany({
      item,
      keyField,
      index
    });
  }
};
/**
* Any "is this a valid delete" checks are assumed to be performed by the caller. Currently, deletion just looks at the
* ID field and will happily delete an item from the index even if it is changed. Future versions will suport a
* 'requireClean' parameter.
*/


const deleteOneToOne = ({
  item,
  keyField,
  index,
  idField,
  idIndex
}) => {
  const origItem = idIndex[item[idField]]; // the current item may have had the index value changed, so we delete based on the origItem

  delete index[origItem[keyField]];
};
/**
* Any "is this a valid delete" checks are assumed to be performed by the caller. Currently, deletion just looks at the
* ID field and will happily delete an item from the index even if it is changed. Future versions will suport a
* 'requireClean' parameter.
*/


const deleteOneToMany = ({
  item,
  idField,
  idIndex,
  index,
  keyField
}) => {
  const {
    origList,
    origListIndex
  } = getOrigData({
    item,
    idField,
    idIndex,
    keyField,
    index
  });
  origList.splice(origListIndex, 1);
};
/**
* Helper for update and delete 'one2many' functions.
*/


const getOrigData = ({
  item,
  idField,
  idIndex,
  index,
  keyField
}) => {
  const origItem = idIndex[item[idField]];
  const origIndexValue = origItem[keyField];
  const origList = index[origIndexValue];
  if (!origList) console.log(index, origItem, origIndexValue); // debug
  // We compare keys rather than objects as returned objects must be copied to preserve the integrity of the original
  // items along with the indexes.

  const origListIndex = origList.findIndex(i => i[idField] === origItem[idField]);
  return {
    origItem,
    origList,
    origListIndex
  };
};

var _idNormalizer, _itemCreationOptions, _fileName, _indexById, _itemClass, _itemName, _keyField, _dataCleaner, _resourceName, _addIndexes, _createItem, _dataToItem, _dataToList, _getByIndex;

function _classPrivateMethodInitSpec$1(obj, privateSet) { _checkPrivateRedeclaration$4(obj, privateSet); privateSet.add(obj); }

function _classPrivateFieldInitSpec$4(obj, privateMap, value) { _checkPrivateRedeclaration$4(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration$4(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateMethodGet$1(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
/**
* Common class for base resources support simple get and list functions.
*/

const Resources = (_idNormalizer = /*#__PURE__*/new WeakMap(), _itemCreationOptions = /*#__PURE__*/new WeakMap(), _fileName = /*#__PURE__*/new WeakMap(), _indexById = /*#__PURE__*/new WeakMap(), _itemClass = /*#__PURE__*/new WeakMap(), _itemName = /*#__PURE__*/new WeakMap(), _keyField = /*#__PURE__*/new WeakMap(), _dataCleaner = /*#__PURE__*/new WeakMap(), _resourceName = /*#__PURE__*/new WeakMap(), _addIndexes = /*#__PURE__*/new WeakSet(), _createItem = /*#__PURE__*/new WeakSet(), _dataToItem = /*#__PURE__*/new WeakSet(), _dataToList = /*#__PURE__*/new WeakSet(), _getByIndex = /*#__PURE__*/new WeakSet(), class Resources {
  /**
  * Used to transform incoming ID into a standard format. Must be a function that takes a single argument of the raw ID
  * and returns a normalized ID. This can be used, for example, to lowercase string IDs.
  */

  /**
  * Internal 'by ID' index.
  */

  /**
  * Our 'keyField'. We will always annotate incoming objcts with 'id', but the resource may use another field for it's
  * canonical ID.
  */
  constructor({
    fileName,
    idNormalizer = id => id,
    indexes: _indexes = [],
    itemClass = Item,
    itemCreationOptions = {},
    // TODO: if itemName not specified, deduce from 'itemClass'
    itemName,
    // TODO: really more 'itemTypeName' or 'itemClassName' or something
    items = [],
    keyField,
    dataCleaner,
    readFromFile = false,
    resourceName
  }) {
    _classPrivateMethodInitSpec$1(this, _getByIndex);

    _classPrivateMethodInitSpec$1(this, _dataToList);

    _classPrivateMethodInitSpec$1(this, _dataToItem);

    _classPrivateMethodInitSpec$1(this, _createItem);

    _classPrivateMethodInitSpec$1(this, _addIndexes);

    _classPrivateFieldInitSpec$4(this, _idNormalizer, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _itemCreationOptions, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _fileName, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _indexById, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _itemClass, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _itemName, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _keyField, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _dataCleaner, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$4(this, _resourceName, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _fileName, fileName || getSourceFile(items));

    _classPrivateFieldSet(this, _idNormalizer, idNormalizer);

    _classPrivateFieldSet(this, _itemClass, itemClass);

    _classPrivateFieldSet(this, _itemName, itemName);

    _classPrivateFieldSet(this, _keyField, keyField);

    _classPrivateFieldSet(this, _resourceName, resourceName);

    _classPrivateFieldSet(this, _dataCleaner, dataCleaner);

    if (readFromFile === true && items && items.length > 0) {
      throw new Error(`Cannot specify both 'readFromFile : true' and 'items' when loading ${resourceName}.`);
    }

    if (readFromFile === true && !fileName) {
      throw new Error(`Must specify 'fileName' when 'readFromFile : true' while loading ${resourceName}.`);
    }

    if (readFromFile === true) {
      items = JSON.parse(fs__namespace.readFileSync(fileName));
    } // add standard 'id' field if not present.


    items = items || [];
    const seen = {};
    items.forEach(item => {
      item.id = _classPrivateFieldGet(this, _idNormalizer).call(this, item.id || item[keyField]);

      if (seen[item.id] === true) {
        throw new Error(`Found items with duplicate key field '${keyField}' values ('${item.id}') in the ${this.resourceName} list.`);
      }

      seen[item.id] = true;
    });
    this.listManager = new ListManager({
      className: resourceName,
      idField: keyField,
      idNormalizer,
      items
    });

    _classPrivateFieldSet(this, _indexById, this.listManager.getIndex('byId'));

    _classPrivateFieldSet(this, _itemCreationOptions, Object.assign({}, itemCreationOptions, {
      idNormalizer,
      itemName,
      keyField
    }));

    _classPrivateMethodGet$1(this, _addIndexes, _addIndexes2).call(this, _indexes);
  }

  get keyField() {
    return _classPrivateFieldGet(this, _keyField);
  }

  get itemName() {
    return _classPrivateFieldGet(this, _itemName);
  }

  get resourceName() {
    return _classPrivateFieldGet(this, _resourceName);
  }

  add(data) {
    data = ensureRaw(data);
    if (data.id === undefined) data.id = _classPrivateFieldGet(this, _idNormalizer).call(this, data[_classPrivateFieldGet(this, _keyField)]);

    if (this.has(data.id)) {
      throw new Error(`Cannot add ${this.itemName} with existing key '${data.id}'; try 'update'.`);
    }

    this.listManager.addItem(data);
  }
  /**
  * Retrieves a single vendor/product entry by name.
  */


  get(id, options) {
    const data = _classPrivateFieldGet(this, _indexById)[id];

    return _classPrivateMethodGet$1(this, _dataToItem, _dataToItem2).call(this, data, Object.assign({}, options || {}, {
      id
    }));
  }

  has(name) {
    return !!_classPrivateFieldGet(this, _indexById)[name];
  }

  update(data, {
    skipGet = false,
    ...rest
  } = {}) {
    data = ensureRaw(data);

    const id = data[_classPrivateFieldGet(this, _keyField)];

    if (!this.has(id) === undefined) {
      throw new Error(`No such ${_classPrivateFieldGet(this, _itemName)} with key '${id}' to update; try 'add'.`);
    }

    this.listManager.updateItem(data);
    if (skipGet === true) return; // else

    return this.get(id, rest);
  }

  delete(itemId, {
    required = false
  } = {}) {
    itemId = _classPrivateFieldGet(this, _idNormalizer).call(this, itemId);

    const item = _classPrivateFieldGet(this, _indexById)[itemId];

    if (required === true && item === undefined) {
      throw new Error(`No such item with id '${item.id}' found.`);
    }

    this.listManager.deleteItem(item);
  }
  /**
  * Returns a list of the resource items.
  *
  * ### Parameters
  *
  * - `sort`: the field to sort on. Defaults to 'id'. Set to falsy unsorted and slightly faster results.
  */


  list({
    sort = _classPrivateFieldGet(this, _keyField),
    ...rest
  } = {}) {
    // 'noClone' provides teh underlying list itself; since we sort, let's copy the arry (with 'slice()')
    const items = this.constructor.sort({
      sort,
      items: [...this.listManager.getItems({
        noClone: true
      })]
    });
    return _classPrivateMethodGet$1(this, _dataToList, _dataToList2).call(this, items, rest);
  }

  write({
    fileName = _classPrivateFieldGet(this, _fileName)
  } = {}) {
    if (!fileName) {
      throw new Error(`Cannot write '${this.resourceName}' database no file name specified. Ideally, the file name is captured when the DB is initialized. Alternatively, it can be passed to this function as an option.`);
    }

    let itemList = this.list({
      rawData: true
    }); // now we have a deep copy, so we don't have to worry about changes

    if (_classPrivateFieldGet(this, _dataCleaner)) {
      itemList = itemList.map(i => _classPrivateFieldGet(this, _dataCleaner).call(this, i));
    }

    fs__namespace.writeFileSync(fileName, JSON.stringify(itemList, null, '  '));
  }

  static sort({
    sort = 'id',
    items
  }) {
    if (sort) items.sort((a, b) => a[sort].localeCompare(b[sort])); // TODO: check if sort field is valid

    return items;
  }

});

function _addIndexes2(indexes) {
  for (const {
    indexField,
    relationship
  } of indexes) {
    this.listManager.addIndex({
      name: indexField,
      keyField: indexField,
      relationship
    });
    const functionName = `getBy${indexField[0].toUpperCase() + indexField.slice(1)}`;
    this[functionName] = _classPrivateMethodGet$1(this, _getByIndex, _getByIndex2).bind(this, indexField);
  }
}

function _createItem2(data) {
  return new (_classPrivateFieldGet(this, _itemClass))(data, _classPrivateFieldGet(this, _itemCreationOptions));
}

function _dataToItem2(data, {
  clean = false,
  required = false,
  rawData = false,
  id,
  errMsgGen,
  ...rest
} = {}) {
  if (clean === true && rawData === false) {
    throw new Error('Incompatible options; \'clean = true\' requires \'raw data = true\'');
  }

  if (required === true && data === undefined) {
    errMsgGen = errMsgGen || (() => `Did not find required ${_classPrivateFieldGet(this, _itemName)}${id ? ` '${id}'.` : ''}.`);

    throw new Error(errMsgGen(data[_classPrivateFieldGet(this, _keyField)]));
  }

  if (data === undefined) return undefined;

  if (rawData === true) {
    data = structuredClone(data);
    data.id = data[_classPrivateFieldGet(this, _keyField)];
    return clean === true ? _classPrivateFieldGet(this, _dataCleaner).call(this, data) : data;
  } // else


  return _classPrivateMethodGet$1(this, _createItem, _createItem2).call(this, data);
}

function _dataToList2(data, {
  clean = false,
  rawData = false
} = {}) {
  return rawData !== true ? data.map(data => _classPrivateMethodGet$1(this, _createItem, _createItem2).call(this, data)) : clean === true ? data.map(i => structuredClone(_classPrivateFieldGet(this, _dataCleaner).call(this, i))) : structuredClone(data);
}

function _getByIndex2(indexName, key, options) {
  const result = this.listManager.getByIndex({
    indexName,
    key,
    noClone: true
  });

  if (Array.isArray(result)) {
    return _classPrivateMethodGet$1(this, _dataToList, _dataToList2).call(this, result, options);
  } else {
    return _classPrivateMethodGet$1(this, _dataToItem, _dataToItem2).call(this, result, Object.assign(options || {}, {
      id: key
    }));
  }
}

const ensureRaw = data => data instanceof Item ? data.rawData : structuredClone(data);

/**
* Basic class for accessing the audit record data.
*/

const AuditRecords = class extends Resources {
  constructor(options) {
    super(Object.assign(options, {
      indexes: [{
        indexField: 'auditId',
        relationship: ONE_TO_MANY
      }, {
        indexField: 'domain',
        relationship: ONE_TO_MANY
      }, {
        indexField: 'targetId',
        relationship: ONE_TO_MANY
      }],
      itemClass: AuditRecord,
      itemName: 'audit record',
      keyField: 'id',
      resourceName: 'audit records'
    }));
    this.checkCondition = AuditRecords.checkCondition;
  }

};
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Account targets in
* an audit. We do this weird 'defineProperty' thing because it effectively gives us a 'static const'
*/

const checkCondition$5 = (condition, productRec) => {
  const parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0,
    NONE: 0,
    LOW: 1,
    MODERATE: 2,
    HIGH: 3,
    EXISTENTIAL: 4
  }, productRec.parameters);
  const zeroRes = [];
  const evaluator = new Evaluator({
    parameters,
    zeroRes
  });
  return evaluator.evalTruth(condition);
};

Object.defineProperty(AuditRecords, 'checkCondition', {
  value: checkCondition$5,
  writable: false,
  enumerable: true,
  configurable: false
});

const Node = class {
  constructor([name, primaryManagerNodeName, possibleMngrNames], implied = false) {
    this.name = name;
    this.implied = implied;
    this.primaryManagerNodeName = primaryManagerNodeName;
    this.primaryManagerNode = undefined;
    this.possibleMngrNames = possibleMngrNames || [];
    if (primaryManagerNodeName) this.possibleMngrNames.unshift(primaryManagerNodeName);
    this.possibleManagerNodes = [];
    this.children = [];
  }

  getName() {
    return this.name;
  }

  getPrimaryManagerNode() {
    return this.primaryManagerNode;
  }

  getPossibleManagerNodes() {
    return this.possibleManagerNodes;
  }

  getChildren() {
    return this.children;
  }

  getDescendents() {
    return this.children.reduce((desc, child) => desc.concat(child.getDescendents()), [...this.children]);
  }

  getTreeNodes() {
    return this.children.reduce((desc, child) => desc.concat(child.getTreeNodes()), [this]);
  }

};
const OrgStructure = class {
  constructor(fileName, roles) {
    const nodes = JSON.parse(fs__namespace.readFileSync(fileName)).map(r => new Node(r));
    this.roots = [];

    const processNode = node => {
      if (node.primaryManagerNodeName === null) {
        node.primaryManagerNode = null; // which is not undefined, but positively null

        this.roots.push(node);
      } else {
        const primaryManagerNode = nodes.find(n => n.name === node.primaryManagerNodeName);

        if (primaryManagerNode === undefined) {
          throw new Error(`Invalid org structure. Role '${node.name}' references ` + `non-existent primary manager role '${node.primaryManagerNodeName}'.`);
        }

        node.primaryManagerNode = primaryManagerNode; // console.error(`Adding ${node.name} as child of ${primaryManagerNode.name}`) // DEBUG

        primaryManagerNode.children.push(node);
        node.possibleMngrNames.forEach(mngrName => {
          const mngr = nodes.find(n => n.name === mngrName);

          if (mngr === undefined) {
            throw new Error(`Invalid org structure. Role '${node.name}' references ` + `non-existent possible manager role '${mngrName}'.`);
          }

          node.possibleManagerNodes.push(mngr);
        });
      }

      const role = roles.get(node.name, {
        errMsgGen: name => `Could not retrieve ${node.implied ? 'implied ' : ''}role '${name}' while building org structure.`
      });

      if (!role) {
        throw new Error(`Could not find '${node.name}' of:\n${JSON.stringify(node, key => `${key} {}`, '  ')}`);
      }

      node.singular = role.singular;

      for (const {
        name: impliedRoleName,
        mngrProtocol
      } of role.implies || []) {
        // implied roles are handled by inserting the implied roles as managed by the super-role. When the org chart is
        // generated, these will collapse into a single entry listing multiple roles and using the super role as the
        // title.
        // TODO: this is a little messy
        const impRole = roles.get(impliedRoleName, {
          required: true,
          errMsgGen: name => `Could not find implied role '${name}' while building org structure.`
        }); // console.error(`Processing implied role: ${impRole.name}...`) // DEBUG

        if (impRole.titular && !nodes.find(n => n.name === impRole.name)) {
          // only titular roles not already defined are implied into the org structure
          // console.error("I'm in!") // DEBUG
          // TODO: in theroy, I believe if the current node has no manager, then implied role's don't either.
          // Otheriwse, the primary manager is effectively one's self, in the 'super' role or the same manager as the
          // super role, depending on the manager protocol.
          // console.error("\n\nHey:\n", role, node, "\n\n")// DEBUG
          const managingRoleName = mngrProtocol === 'self' ? role.name : mngrProtocol === 'same' ? node.primaryManagerNodeName : function (e) {
            throw e;
          }(new Error(`Unkown (or undefined?) manager protocol '${mngrProtocol}' found while processing org structure.`)); // TODO: support optional managers.

          processNode(new Node([impliedRoleName, managingRoleName, null], true));
        }
      }
    }; // end func processNode


    for (const node of nodes) {
      processNode(node);
    }

    const orgRoles = this.getNodes().map(n => n.getName()); // check all org role names reference defined roles

    const undefinedRoles = orgRoles.filter(roleName => roles.get(roleName) === undefined);

    if (undefinedRoles.length > 0) {
      throw new Error('Found undefined role reference' + `${undefinedRoles.length > 1 ? 's' : ''}: ${undefinedRoles.join(', ')}`);
    } // check for duplicate org roles


    const dupeRoles = orgRoles.filter((name, index) => orgRoles.indexOf(name) !== index);

    if (dupeRoles.length > 0) {
      throw new Error(`Found non-unique role${dupeRoles.length > 1 ? 's' : ''} ` + `references in org structure: ${dupeRoles.join(', ')}`);
    } // TODO: for now, we limit roots to a single entry; the original idea was to support multiple roots (use case not remembered/clear), but it causes problems in generating the org chart in that there's an assumption of a single root somewhere


    if (this.roots.length > 1) {
      throw new Error(`Multiple non-managed (root) entries found. We currently only support a single non-managed entry. (${this.roots.map(r => r.name).join(', ')})`);
    }
  }

  getRoots() {
    return [...this.roots];
  }

  getNodes() {
    return this.roots.reduce((nodes, root) => nodes.concat(root.getTreeNodes()), []);
  }

  getNodeByRoleName(name) {
    return this.getNodes().find(n => n.getName() === name);
  }

};

// JSONLoop is a trivial rework of https://github.com/dabeng/JSON-Loop cc9bf8d3ec9d366160
let nodes = []; // used as temp workpad

const JSONLoop = class {
  constructor(obj, idPropertyName, childrenPropertyName) {
    this.id = idPropertyName;
    this.children = childrenPropertyName;
    this.count = 0;
    this.countNodes(obj);
    this.total = this.count + 0;
  }

  isEmpty(obj) {
    return Object.keys(obj).length === 0;
  }

  countNodes(obj) {
    const that = this;
    this.count++;
    return function () {
      if (!obj || that.isEmpty(obj)) {
        return false;
      } else {
        if (obj[that.children]) {
          obj[that.children].forEach(function (child) {
            that.countNodes(child);
          });
        }
      }
    }();
  }

  generateClone(obj) {
    const target = {};

    for (const i in obj) {
      if (i !== this.children) {
        target[i] = obj[i];
      }
    }

    return target;
  }

  findNodeById(obj, id, callback) {
    if (obj[this.id] === id || obj.ids.some(testId => testId === id)) {
      this.count = this.total + 0;
      callback(null, obj);
    } else {
      if (this.count === 1) {
        this.count = this.total + 0;
        callback(new Error('the node does not exist'));
      } else {
        this.count--;

        if (obj[this.children]) {
          const that = this;
          obj[this.children].forEach(function (node) {
            that.findNodeById(node, id, callback);
          });
        }
      }
    }
  }

  matchConditions(obj, conditions) {
    let flag = true;
    Object.keys(conditions).forEach(function (item) {
      if (typeof conditions[item] === 'string' || typeof conditions[item] === 'number') {
        if (obj[item] !== conditions[item]) {
          flag = false;
          return false;
        }
      } else if (conditions[item] instanceof RegExp) {
        if (!conditions[item].test(obj[item])) {
          flag = false;
          return false;
        }
      } else if (typeof conditions[item] === 'object') {
        Object.keys(conditions[item]).forEach(function (subitem) {
          switch (subitem) {
            case '>':
              {
                if (!(obj[item] > conditions[item][subitem])) {
                  flag = false;
                  return false;
                }

                break;
              }

            case '<':
              {
                if (!(obj[item] < conditions[item][subitem])) {
                  flag = false;
                  return false;
                }

                break;
              }

            case '>=':
              {
                if (!(obj[item] >= conditions[item][subitem])) {
                  flag = false;
                  return false;
                }

                break;
              }

            case '<=':
              {
                if (!(obj[item] <= conditions[item][subitem])) {
                  flag = false;
                  return false;
                }

                break;
              }

            case '!==':
              {
                if (!(obj[item] !== conditions[item][subitem])) {
                  flag = false;
                  return false;
                }

                break;
              }
          }
        });

        if (!flag) {
          return false;
        }
      }
    });

    if (!flag) {
      return false;
    }

    return true;
  }

  findNodes(obj, conditions, callback) {
    const that = this;
    let copy = []; // ths shallow copy of nodes array

    return function (obj, conditions, callback) {
      if (that.matchConditions(obj, conditions)) {
        nodes.push(obj);

        if (that.count === 1) {
          that.count = that.total + 0;
          copy = nodes.slice(0);
          nodes = [];
          callback(null, copy);
        }

        that.count--;
      } else {
        if (that.count === 1) {
          that.count = that.total + 0;
          copy = nodes.slice(0);
          nodes = [];
          callback(null, copy);
        }

        that.count--;

        if (obj[that.children]) {
          obj[that.children].forEach(function (child) {
            that.findNodes(child, conditions, callback);
          });
        }
      }
    }(obj, conditions, callback);
  }

  findParent(obj, node, callback, needCleanNode) {
    const that = this;
    this.findNodeById(obj, node.parent_id, (err, parent) => {
      if (err) callback(new Error(`Could not find parent. ${err}`));else {
        if (needCleanNode) {
          callback(null, that.generateClone(parent));
        } else {
          callback(null, parent);
        }
      }
    });
  }

  findSiblings(obj, node, callback) {
    const that = this;
    this.findParent(obj, node, function (err, parent) {
      if (err) {
        callback(new Error('its sibling nodes do not exist'));
      } else {
        const siblings = [];
        parent[that.children].forEach(function (item) {
          if (item[that.id] !== node[that.id]) {
            siblings.push(that.generateClone(item));
          }
        });
        callback(null, siblings);
      }
    }, false);
  }

  findAncestors(obj, node, callback) {
    const that = this;

    if (node[this.id] === obj[this.id]) {
      const copy = nodes.slice(0);
      nodes = [];
      callback(null, copy);
    } else {
      this.findParent(obj, node, function (err, parent) {
        if (err) {
          callback(new Error('its ancestor nodes do not exist'));
        } else {
          nodes.push(parent);
          that.findAncestors(obj, parent, callback);
        }
      });
    }
  }

};

const Account = class extends Item {
  constructor(data, options) {
    super(data, Object.assign(options, {
      keyField: 'directEmail'
    }));
  }

};

/**
* Public API for managing third-party account records. Uses the `Accounts` library, which actually implements the
* functions. The library is split like this to make testing easier.
*/

const Accounts = class extends Resources {
  constructor(options) {
    super(Object.assign(options, {
      idNormalizer: directEmail => directEmail.toLowerCase(),
      indexes: [{
        indexField: 'department',
        relationship: ONE_TO_MANY
      }],
      itemClass: Account,
      itemName: 'third-party account',
      keyField: 'directEmail',
      resourceName: 'third-party accounts'
    }));
    this.checkCondition = Accounts.checkCondition;
  }

};
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Account targets in
* an audit. We do this weird 'defineProperty' thing because it effectively gives us a 'static const'
*/

const checkCondition$4 = (condition, acct) => {
  const parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0,
    NONE: 0,
    LOW: 1,
    MODERATE: 2,
    HIGH: 3,
    EXISTENTIAL: 4
  }, acct.parameters); // TODO: create a handly conversion class/lib for the sensitivity codes; SensitivityCode?

  const sensitivityCode = acct.sensitivity || 'EXISTENTIAL';

  switch (sensitivityCode) {
    case 'NONE':
      parameters.SENSITIVITY = 0;
      break;

    case 'LOW':
      parameters.SENSITIVITY = 1;
      break;

    case 'MODERATE':
      parameters.SENSITIVITY = 2;
      break;

    case 'HIGH':
      parameters.SENSITIVITY = 3;
      break;

    case 'EXISTENTIAL':
      parameters.SENSITIVITY = 4;
      break;

    default:
      throw new Error(`Unknown sensitivity code: '${sensitivityCode}'.`);
  } // configure the non-existent tags to 'zero' out


  const zeroRes = [/BUSINESS|NETWORKING/];
  const evaluator = new Evaluator({
    parameters,
    zeroRes
  });
  return evaluator.evalTruth(condition);
};

Object.defineProperty(Accounts, 'checkCondition', {
  value: checkCondition$4,
  writable: false,
  enumerable: false,
  configurable: false
});

/**
* Basic class wrapping technology items. Functionality is split between 'Technology' and 'Technologies' to simplify
* testing.
*/

const Audits = class extends Resources {
  constructor(options) {
    super(Object.assign(options, {
      indexes: [{
        indexField: 'target',
        relationship: ONE_TO_MANY
      }],
      itemName: 'audit',
      keyField: 'name',
      resourceName: 'audits'
    }));
  }

};

const Role = class extends Item {
  constructor(rec) {
    super(rec, {
      keyField: 'name'
    });
  }

  getName() {
    return this.name;
  }

  getManager() {
    return this.manager;
  }

  isTitular() {
    return !!this.titular;
  }

  isDesignated() {
    return !!this.designated;
  }

  isQualifiable() {
    return !!this.qualifiable;
  }

};

const Roles = class extends Resources {
  constructor({
    org,
    ...rest
  }) {
    super(Object.assign({ ...rest,
      // idNormalizer        : (name) => name.toLowerCase(),
      itemClass: Role,
      itemName: 'role',
      keyField: 'name',
      resourceName: 'roles'
    }));
    this.org = org;
    this.checkCondition = checkCondition$3;
  }

  get(name, {
    fuzzy = false,
    ...options
  } = {}) {
    const superOptions = fuzzy === true // then we need to generate matching options but with required guaranteed false because if there's not an exact
    // match, we'll use the fuzzy matching logic.
    ? Object.assign({}, options, {
      required: false
    }) : options;
    let result = super.get(name, superOptions);
    const {
      errMsgGen,
      includeQualifier = false,
      required = false,
      rawData = false
    } = options;

    if (includeQualifier === true || result === undefined && fuzzy === true) {
      let qualifier; // now fuzzy match if desired

      if (result === undefined && fuzzy === true) {
        const matchingRoles = this.list({
          rawData: true
        }).filter(role => {
          if (role.matcher !== undefined) {
            const {
              antiPattern,
              pattern,
              qualifierGroup
            } = role.matcher;
            const match = name.match(new RegExp(pattern, 'i'));

            if (match) {
              // check anti-pattern first and bail out to avoid setting qualifier for disqualified match
              if (antiPattern && name.match(new RegExp(antiPattern, 'i'))) {
                return false;
              }

              if (qualifierGroup) {
                qualifier = match[qualifierGroup]; // console.error(`qualifier group: ${qualifierGroup}/${qualifier}`) // DEBUG
              }

              return true;
            }
          }

          return false;
        });

        if (matchingRoles.length === 1) {
          result = matchingRoles[0];
        } else if (matchingRoles.length > 1) {
          throw new Error(`Ambiguous role '${name}' matched to '${matchingRoles.map(r => r.name).join("', '")}'`);
        }
      }

      if (result === undefined && required === true) {
        throw new Error((errMsgGen === null || errMsgGen === void 0 ? void 0 : errMsgGen(name)) || `Did not find requried role '${name}'.`);
      }

      if (rawData !== true && result) result = new Role(result);

      if (includeQualifier === true) {
        return [result, qualifier];
      } else {
        return result;
      }
    }

    return result;
  }

  getStaffInRole(roleName) {
    return this.org.staff.list({
      rawData: true
    }).filter(s => s.roles.some(r => r.name === roleName));
  }

};
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Roles targets in
* an audit.
*/

const checkCondition$3 = (condition, role) => {
  const parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0
  }, role.parameters); // TODO: test if leaving it 'true'/'false' works.

  parameters.DESIGNATED = role.designated ? 1 : 0;
  parameters.SINGULAR = role.singular ? 1 : 0;
  const zeroRes = [];
  const evaluator = new Evaluator({
    parameters,
    zeroRes
  });
  return evaluator.evalTruth(condition);
};

var _memberEmail, _org;

function _classPrivateFieldInitSpec$3(obj, privateMap, value) { _checkPrivateRedeclaration$3(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration$3(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
const StaffRole = (_memberEmail = /*#__PURE__*/new WeakMap(), _org = /*#__PURE__*/new WeakMap(), class StaffRole extends Role {
  constructor({
    org,
    data,
    memberEmail
  }) {
    super(Object.assign(org.roles.get(data.name, {
      fuzzy: true,
      rawData: true
    }), data));

    _classPrivateFieldInitSpec$3(this, _memberEmail, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$3(this, _org, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _memberEmail, memberEmail);

    _classPrivateFieldSet(this, _org, org);
  }

  getManager() {
    return _classPrivateFieldGet(this, _org).staff.get(this.managerEmail);
  }

  get managerEmail() {
    return this.rawData.manager;
  }

  get memberEmail() {
    return _classPrivateFieldGet(this, _memberEmail);
  }

  get getQualifiedName() {
    return `${this.qualifier} ${this.name}`;
  }

  get isActing() {
    return this.rawData.acting;
  }

  static validateData({
    data,
    errors = [],
    memberEmail,
    org
  }) {
    if (data.name) {
      const orgRole = org.roles.get(data.name, {
        fuzzy: true,
        rawData: true
      });

      if (orgRole === undefined) {
        errors.push(validationMsg({
          name: data.name,
          memberEmail,
          reason: 'references an invalid role'
        }));
      } else if (orgRole.qualifiable !== true && data.qualifier) {
        errors.push(validationMsg({
          name: data.name,
          memberEmail,
          reason: `specifies qualifier '${data.qualifier}', but the role is not qualifiable`
        }));
      }
    } else {
      errors.push(validationMsg({
        name: data.name,
        memberEmail,
        reason: 'is missing required field \'name\''
      }));
    }

    if (data.manager) {
      const manager = org.staff.get(data.manager, {
        rawData: true
      });

      if (manager === undefined) {
        errors.push(validationMsg({
          name: data.name,
          memberEmail,
          reason: `references invalid manager '${data.manager}'`
        }));
      }
    }

    return errors;
  }

});

const validationMsg = ({
  memberEmail,
  name,
  reason
}) => `Staff role ${name} ${reason}${memberEmail ? ` for member '${memberEmail}'` : ''}.`;

var _allRoles, _reportsByRoleName, _reports, _initializeAllRoles, _initializeReports;

function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration$2(obj, privateSet); privateSet.add(obj); }

function _classPrivateFieldInitSpec$2(obj, privateMap, value) { _checkPrivateRedeclaration$2(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration$2(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
const StaffMember = (_allRoles = /*#__PURE__*/new WeakMap(), _reportsByRoleName = /*#__PURE__*/new WeakMap(), _reports = /*#__PURE__*/new WeakMap(), _initializeAllRoles = /*#__PURE__*/new WeakSet(), _initializeReports = /*#__PURE__*/new WeakSet(), class StaffMember {
  constructor(data, {
    org
  }) {
    _classPrivateMethodInitSpec(this, _initializeReports);

    _classPrivateMethodInitSpec(this, _initializeAllRoles);

    _classPrivateFieldInitSpec$2(this, _allRoles, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$2(this, _reportsByRoleName, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec$2(this, _reports, {
      writable: true,
      value: void 0
    });

    const errors = StaffMember.validateData({
      data,
      org
    });

    if (errors.length > 0) {
      throw new Error(`Invalid data while creating 'staff member'; ${errors.join(' ')}`);
    }

    Object.assign(this, structuredClone(data));
    this.org = org;
    this.id = this.email.toLowerCase();

    _classPrivateFieldSet(this, _reportsByRoleName, {});
  }

  getEmail() {
    return this.email;
  }

  setEmail(v) {
    this.email = v;
  }
  /**
  * Combines the given and family name (if any) to produce the full name. The default is to display using 'common
  * format'. Supports option field 'officialFormat'. The function does NOT currently support i18n variations, so for
  * now 'common format' is '<first> <last>' and 'officialFormat' is '<last>, <first>'.
  */


  getFullName({
    officialFormat = false
  } = {}) {
    // TODO: i18n the display order
    const {
      givenName,
      familyName
    } = this;

    if (familyName && givenName) {
      if (officialFormat === true) {
        return `${familyName}, ${givenName}`;
      } else {
        return `${givenName} ${familyName}`;
      }
    } else if (familyName) {
      return familyName;
    } else {
      return givenName;
    }
  }

  getFamilyName() {
    return this.familyName;
  }

  setFamilyName(v) {
    this.familyName = v;
  }

  getGivenName() {
    return this.givenName;
  }

  setGivenName(v) {
    this.givenName = v;
  }

  getStartDate() {
    return this.startDate;
  }

  setStartDate(v) {
    this.startDate = v;
  }

  getEmploymentStatus() {
    return this.employmentStatus;
  }

  setEmploymentStatus(v) {
    this.employmentStatus = v;
  }
  /**
  * Returns the role names granted directly.
  */


  getOwnRoleNames() {
    return this.roles.map(r => r.name);
  }

  getOwnRoles({
    rawData = false
  } = {}) {
    return rawData === true ? [...this.roles] : this.roles.map(data => new StaffRole({
      data,
      memberEmail: this.email,
      org: this.org
    }));
  }

  getAllRoleNames() {
    return this.allRolesData.map(r => r.name);
  }

  hasRole(roleName) {
    return !!this.roles.some(r => r.name === roleName) // let's avoid building '#allRoles' if we don't have to
    || !!this.allRolesData.some(r => r.name === roleName);
  }

  getRole(roleName) {
    const data = this.roles.find(r => r.name === roleName) // let's avoid building '#allRoles' if we don't have to
    || this.allRolesData.find(r => r.name === roleName);

    if (data === undefined) {
      return undefined;
    }

    return new StaffRole({
      data,
      memberEmail: this.email,
      org: this.org
    });
  }

  getManagers() {
    return [...new Set(this.roles.map(r => r.manager))];
  }

  get allRoles() {
    if (_classPrivateFieldGet(this, _allRoles) === undefined) _classPrivateMethodGet(this, _initializeAllRoles, _initializeAllRoles2).call(this);
    return _classPrivateFieldGet(this, _allRoles).map(data => new StaffRole({
      data,
      memberEmail: this.email,
      org: this.org
    }));
  }

  get allRolesData() {
    if (_classPrivateFieldGet(this, _allRoles) === undefined) _classPrivateMethodGet(this, _initializeAllRoles, _initializeAllRoles2).call(this);
    return structuredClone(_classPrivateFieldGet(this, _allRoles));
  }

  getReportsByRoleName(roleName) {
    const cachedReports = _classPrivateFieldGet(this, _reportsByRoleName)[roleName];

    if (cachedReports !== undefined) return cachedReports.slice(); // else, need to build the entry

    const reports = [];

    for (const member of this.org.staff.list()) {
      if (member.email !== this.email && member.allRolesData.some(r => r.name === roleName && r.manager === this.email)) {
        reports.push(member.email);
      }
    }

    _classPrivateFieldGet(this, _reportsByRoleName)[roleName] = reports;
    return reports.slice();
  }

  getReports() {
    if (_classPrivateFieldGet(this, _reports) === undefined) _classPrivateMethodGet(this, _initializeReports, _initializeReports2).call(this);
    return _classPrivateFieldGet(this, _reports).slice();
  }

  getParameters() {
    return this.parameters;
  }

  static validateData({
    data,
    errors = [],
    org
  }) {
    if (!data) {
      errors.push('Data provided to \'staff member\' is not truthy.');
      return errors;
    }

    const requireFields = (fields, errMsgFunc) => {
      fields.reduce((acc, field) => {
        if (data[field] === undefined) acc.push(errMsgFunc(field, data));
        return acc;
      }, errors);
    };

    requireFields(['email', 'employmentStatus'], (field, data) => `'${data.email || data.familyName}' is missing required field '${field}'.`);
    const {
      employmentStatus,
      roles
    } = data;

    if (employmentStatus !== 'logical') {
      requireFields(['familyName', 'givenName', 'roles', 'startDate'], (field, data) => `'${data.email || data.familyName}' is missing field '${field}' required for non-logical staff.`);
    }

    for (const roleData of roles || []) {
      StaffRole.validateData({
        data: roleData,
        errors,
        memberEmail: data.email,
        org
      });
    }

    return errors;
  }

});

function _initializeAllRoles2() {
  _classPrivateFieldSet(this, _allRoles, this.roles.slice());

  for (let i = 0; i < _classPrivateFieldGet(this, _allRoles).length; i += 1) {
    const staffRole = _classPrivateFieldGet(this, _allRoles)[i]; // verify the role is valid


    const orgRole = this.org.roles.get(staffRole.name, {
      fuzzy: true,
      required: true,
      errMsgGen: name => `Staff member '${this.email}' claims unknown role '${name}'.`
    });

    for (const {
      name: impliedRoleName,
      mngrProtocol
    } of orgRole.implies || []) {
      // An implied role can come from multiple sources, so let's check if it's already in place
      const impliedStaffRole = _classPrivateFieldGet(this, _allRoles).find(r => r.name === impliedRoleName);

      if (impliedStaffRole) {
        // we still want to track the implications, so we update the data
        if (!hasOwn(impliedStaffRole, 'impliedBy')) impliedStaffRole.impliedBy = [];

        if (!impliedStaffRole.impliedBy.includes(staffRole.name)) {
          impliedStaffRole.impliedBy.push(staffRole.name);
        }

        continue;
      }

      const impliedOrgRole = this.org.roles.get(impliedRoleName, {
        required: true,
        errMsgGen: name => {
          console.error(`Unknown role '${name}'...`);
          return `Role '${orgRole.name}' implies unknown role '${name}' (triggered while processing staff member '${this.email}').`;
        }
      });
      const impliedStaffRoleData = {
        name: impliedOrgRole.name,
        impliedBy: [staffRole.name]
      };

      for (const inheritedField of ['acting', 'display', 'tbd']) {
        if (staffRole[inheritedField] !== undefined) {
          impliedStaffRoleData[inheritedField] = staffRole[inheritedField];
        }
      }

      if (mngrProtocol === 'self') {
        impliedStaffRoleData.manager = this.email;
      } else if (mngrProtocol === 'same') {
        impliedStaffRoleData.manager = staffRole.manager;
      } else {
        throw new Error(`Unknown manager protocol '${mngrProtocol}' in implication for role '${staffRole.name}'.`);
      }

      _classPrivateFieldGet(this, _allRoles).push(impliedStaffRoleData);
    } // implies loop

  }
}

function _initializeReports2() {
  _classPrivateFieldSet(this, _reports, this.org.staff.list().reduce((reports, member) => {
    if (this.email !== member.email && member.getOwnRoles().some(r => r.managerEmail === this.email)) {
      reports.push(member.email);
    }

    return reports;
  }, []));
}

const hasOwn = (obj, fieldName) => Object.getOwnPropertyNames(obj).some(n => n === fieldName);

const Staff = class extends Resources {
  constructor({
    org,
    ...rest
  }) {
    super(Object.assign(rest, {
      idNormalizer: email => email.toLowerCase(),
      indexes: [{
        indexField: 'employmentStatus',
        relationship: ONE_TO_MANY
      }],
      itemClass: StaffMember,
      itemCreationOptions: {
        org
      },
      itemName: 'staff member',
      keyField: 'email',
      dataCleaner: item => {
        delete item._sourceFileName;
        delete item.id;
        return item;
      },
      resourceName: 'staff'
    }));
    this.org = org;
    this.checkCondition = checkCondition$2;
  }

  getByRoleName(role) {
    return this.list().filter(s => s.hasRole(role));
  }

  validate({
    required = false
  } = {}) {
    const errors = [];
    const list = this.list({
      rawData: true
    });

    for (const data of list) {
      StaffMember.validateData({
        data,
        errors,
        org: this.org
      });
    }

    if (errors.length > 0 && required) {
      throw new Error(`Error${errors.length > 1 ? 's' : ''}: ${errors.join(' ')}`);
    }

    return errors.length === 0 ? true : errors;
  }

}; // Setup 'zeroRes' matchers for 'checkCondition'. If matching parameters are missing, treated as false rather than an
// error

const roleRe = /^HAS_[A-Z_]+_ROLE$/;
const staffParameters = ['^USES_CENTRALIZED_ANTIVIRUS$', '^USES_CENTRALIZED_FIREWALL$'];
const zeroRes = staffParameters.map(p => new RegExp(p));
zeroRes.push(roleRe);
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Staff targets in
* an audit.
*/

const checkCondition$2 = (condition, member) => {
  const parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0
  }, member.parameters); // TODO: test if leaving it 'true'/'false' works.

  parameters.IS_EMPLOYEE = member.employmentStatus === 'employee' ? 1 : 0;
  parameters.IS_CONTRACTOR = member.employmentStatus === 'contractor' ? 1 : 0;
  member.getOwnRoleNames().forEach(role => {
    parameters[`HAS_${role.toUpperCase().replace(/ /g, '_')}_ROLE`] = 1;
  });
  const evaluator = new Evaluator({
    parameters,
    zeroRes
  });
  return evaluator.evalTruth(condition);
};

Staff.checkCondition = checkCondition$2;

const Technology = class extends Item {
  constructor(data) {
    super(data, {
      keyField: 'name'
    });
  }

};

/**
* Basic class wrapping technology items.
*/

const Technologies = class extends Resources {
  // add (and override) basic 'tehnology' item configurations
  constructor(options) {
    super(Object.assign(options, {
      itemClass: Technology,
      itemName: 'technology',
      keyField: 'name',
      resourceName: 'technologies'
    }));
    this.checkCondition = checkCondition$1;
  }

};
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Technology targets
* in an audit.
*/

const checkCondition$1 = (condition, productRec) => {
  const parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0,
    NONE: 0,
    LOW: 1,
    MODERATE: 2,
    HIGH: 3,
    EXISTENTIAL: 4
  }, productRec.parameters); // TODO: create a handly conversion class/lib for the sensitivity codes; SensitivityCode?

  const sensitivityCode = productRec['Sensitivity approval'] || 'quarantined only';

  switch (sensitivityCode) {
    case 'top secret use':
      parameters.SENSITIVITY = 0;
      break;

    case 'secret use':
      parameters.SENSITIVITY = 1;
      break;

    case 'sensitive use':
      parameters.SENSITIVITY = 2;
      break;

    case 'general use':
      parameters.SENSITIVITY = 3;
      break;

    case 'quarantined only':
      parameters.SENSITIVITY = 4;
      break;

    default:
      throw new Error(`Unknown sensitivity approval code: '${sensitivityCode}'.`);
  } // configure the non-existent tags to 'zero' out
  // const zeroRes = [/BUSINESS|NETWORKING/]


  const zeroRes = [];
  const evaluator = new Evaluator({
    parameters,
    zeroRes
  });
  return evaluator.evalTruth(condition);
};

const Vendor = class extends Item {
  constructor(data) {
    super(data, {
      keyField: 'legalName'
    });
  }

};

var _indexByCommonName;

function _classPrivateFieldInitSpec$1(obj, privateMap, value) { _checkPrivateRedeclaration$1(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration$1(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
/**
* Basic class wrapping vendor items. Functionality is split between 'Vendors' and 'Vendors' to simplify testing.
*/

const Vendors = (_indexByCommonName = /*#__PURE__*/new WeakMap(), class Vendors extends Resources {
  constructor(options) {
    // add (and override) basic 'vendor' item configurations
    super(Object.assign(options, {
      idNormalizer: id => id.toLowerCase(),
      indexes: [{
        indexField: 'commonName',
        relationship: ONE_TO_MANY
      }],
      itemClass: Vendor,
      itemName: 'vendor',
      keyField: 'legalName',
      resourceName: 'vendors'
    }));

    _classPrivateFieldInitSpec$1(this, _indexByCommonName, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _indexByCommonName, this.listManager.addIndex({
      name: 'byCommonName',
      keyField: 'commonName',
      relationship: ONE_TO_MANY
    }));

    this.checkCondition = checkCondition;
  }

});
/**
* Obligitory 'checkCondition' function provided by the API for processing inclusion or exclusion of Technology targets
* in an audit.
*/

const checkCondition = (condition, productRec) => {
  const parameters = Object.assign({
    SEC_TRIVIAL: 1,
    ALWAYS: 1,
    NEVER: 0,
    NONE: 0,
    LOW: 1,
    MODERATE: 2,
    HIGH: 3,
    EXISTENTIAL: 4
  }, productRec.parameters); // configure the non-existent tags to 'zero' out
  // const zeroRes = [/BUSINESS|NETWORKING/]

  const zeroRes = [];
  const evaluator = new Evaluator({
    parameters,
    zeroRes
  });
  return evaluator.evalTruth(condition);
};

const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;

// Parser src into an Object
function parse (src) {
  const obj = {};

  // Convert buffer to string
  let lines = src.toString();

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n');

  let match;
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1];

    // Default undefined or null to empty string
    let value = (match[2] || '');

    // Remove whitespace
    value = value.trim();

    // Check if double quoted
    const maybeQuote = value[0];

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2');

    // Expand newlines if double quoted
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n');
      value = value.replace(/\\r/g, '\r');
    }

    // Add to object
    obj[key] = value;
  }

  return obj
}

function _log (message) {
  console.log(`[dotenv][DEBUG] ${message}`);
}

function _resolveHome (envPath) {
  return envPath[0] === '~' ? fsPath__default.default.join(os__default.default.homedir(), envPath.slice(1)) : envPath
}

// Populates process.env from .env file
function config (options) {
  let dotenvPath = fsPath__default.default.resolve(process.cwd(), '.env');
  let encoding = 'utf8';
  const debug = Boolean(options && options.debug);
  const override = Boolean(options && options.override);

  if (options) {
    if (options.path != null) {
      dotenvPath = _resolveHome(options.path);
    }
    if (options.encoding != null) {
      encoding = options.encoding;
    }
  }

  try {
    // Specifying an encoding returns a string instead of a buffer
    const parsed = DotenvModule.parse(fs__default.default.readFileSync(dotenvPath, { encoding }));

    Object.keys(parsed).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
        process.env[key] = parsed[key];
      } else {
        if (override === true) {
          process.env[key] = parsed[key];
        }

        if (debug) {
          if (override === true) {
            _log(`"${key}" is already defined in \`process.env\` and WAS overwritten`);
          } else {
            _log(`"${key}" is already defined in \`process.env\` and was NOT overwritten`);
          }
        }
      }
    });

    return { parsed }
  } catch (e) {
    if (debug) {
      _log(`Failed to load ${dotenvPath} ${e.message}`);
    }

    return { error: e }
  }
}

const DotenvModule = {
  config,
  parse
};

var config_1 = DotenvModule.config;
var parse_1 = DotenvModule.parse;
var main = DotenvModule;
main.config = config_1;
main.parse = parse_1;

const loadBashSettings = (settingsPath, ...requiredParams) => {
  if (!fs__namespace.existsSync(settingsPath)) {
    throw new Error(`Did not find expected settings file: '${settingsPath}'`);
  } // else continue


  const envResult = main.config({
    path: settingsPath
  });

  if (envResult.error) {
    throw envResult.error;
  }

  for (const reqParam of requiredParams) {
    if (process.env[reqParam] === undefined) {
      throw new Error(`Did not find expected '${reqParam}' value in settings file: ${settingsPath}`);
    }
  }
};

const loadOrgState = ({
  dataPath,
  ...fjsonOptions
}) => {
  if (!dataPath) {
    throw new Error('Data path cannot be non-truthy. Must be a string pointing to the root org direcotry.');
  }

  const liqSettingsPath = `${process.env.HOME}/.liq/settings.sh`; // console.error(`Loading settings from '${liqSettingsPath}'.`) // DEBUG / TODO: this is useful, but we can't output blindly to stdout because sometimes that output is being captured.

  loadBashSettings(liqSettingsPath, 'LIQ_PLAYGROUND'); // first, we handle the original bash-centric approach, centered on individual settings

  const orgSettingsPath = `${dataPath}/orgs/settings.sh`; // TODO: the 'ORG_ID' is expected to be set from the old style settings.sh; we should take this in the constructor

  loadBashSettings(orgSettingsPath, 'ORG_ID'); // the 'settings.sh' values are now availale on process.env
  // and here's the prototype new approach; the read function handles the 'exists' check

  const rootJsonPath = `${dataPath}/orgs/${process.env.ORG_ID}.json`;
  process.env.ORG_DATA_PATH = dataPath;
  process.env.ORG_ROOT_JSON_PATH = rootJsonPath; // console.error(`Loading root JSON from '${rootJsonPath}'.`) // DEBUG / TODO: this is useful, but we can't output
  // blindly to stdout because sometimes that output is being captured.

  fjsonOptions = Object.assign({}, fjsonOptions, {
    rememberSource: true
  });
  return read(rootJsonPath, fjsonOptions);
};

var _innerState;

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
const Organization = (_innerState = /*#__PURE__*/new WeakMap(), class Organization {
  constructor({
    dataPath,
    ...rest
  }) {
    _classPrivateFieldInitSpec(this, _innerState, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _innerState, loadOrgState({
      dataPath,
      ...rest
    }));

    this.dataPath = dataPath;
    this.roles = new Roles({
      items: _classPrivateFieldGet(this, _innerState).roles,
      org: this
    });
    this.orgStructure = new OrgStructure(`${dataPath}/orgs/org_structure.json`, this.roles);
    this.staff = new Staff({
      items: _classPrivateFieldGet(this, _innerState).staff,
      org: this
    });
    this.accounts = new Accounts({
      items: _classPrivateFieldGet(this, _innerState).auditRecords
    });
    this.auditRecords = new AuditRecords({
      items: _classPrivateFieldGet(this, _innerState).auditRecords
    });
    this.audits = new Audits({
      items: _classPrivateFieldGet(this, _innerState).audits
    });
    this.technologies = new Technologies({
      items: _classPrivateFieldGet(this, _innerState).technologies
    });
    this.vendors = new Vendors({
      items: _classPrivateFieldGet(this, _innerState).vendors
    }); // TODO: quick workaround; need to implement model plugins

    this.alerts = _classPrivateFieldGet(this, _innerState).alerts;
    this.staff.validate({
      required: true
    });
  } // TODO: some external code relies on access to inner state; remove this once that's fixed


  get innerState() {
    return _classPrivateFieldGet(this, _innerState);
  } // TODO: deprecated; just use 'org.roles'


  getRoles() {
    return this.roles;
  } // TODO: deprecated; just use 'org.staff'


  getStaff() {
    return this.staff;
  }

  getSetting(key) {
    return process.env[key];
  }

  requireSetting(key) {
    const value = this.getSetting(key);

    if (value === undefined) {
      throw new Error(`No such company setting '${key}'.`);
    }

    return value;
  }

  hasStaffInRole(email, roleName) {
    return this.staff.getByRoleName(roleName).some(s => s.getEmail() === email);
  }

  getManagingRolesByManagedRoleName(roleName) {
    return this.orgStructure.getNodeByRoleName(roleName).getPossibleManagerNodes();
  }

  generateOrgChartData(style = 'debang/OrgChart') {
    // Implementation notes:
    // The overall structure is generated per the 'google-chart' style by processing each role of each titular role of
    // each staff member. At the moment, 'google-chart' style is more of an intermediate step than a final format as it
    // does not support the full range of desired features. The resulting data format is:
    //
    //    [ '<individual email>/role', '<manager email>/role', '<role qualifier>' ]
    if (style === 'google-chart') {
      const result = []; // luckily, the google org chart doesn't care whether we specify the nodes in order or not, so it's a simple
      // transform

      Object.values(this.staff.list()).forEach(s => {
        s.getOwnRoles().forEach(r => {
          if (r.isTitular() && r.display !== false) {
            const myKey = `${s.getEmail()}/${r.getName()}`;
            const manager = s.getRole(r.getName()).getManager();
            if (!manager) result.push([myKey, '', r.qualifier]);else {
              const mngrEmail = manager.getEmail();
              const managingRoles = this.getManagingRolesByManagedRoleName(r.getName());
              const managingRole = managingRoles.find(mngrRole => this.hasStaffInRole(mngrEmail, mngrRole.getName()));
              /* `${mngrEmail}/${r.getName()}` === myKey
                ? r
                : this.getManagingRolesByManagedRoleName(r.getName()).find(mngrRole =>
                    this.hasStaffInRole(mngrEmail, mngrRole.getName())
                  ) */

              if (!managingRole) {
                throw new Error(`Could not find manager ${managingRoles.map(r => `${mngrEmail}/${r.name}`).join('|')} for ${myKey}.`);
              }

              const managerKey = `${mngrEmail}/${managingRole.getName()}`;
              result.push([myKey, managerKey, r.qualifier]);
            }
          }
        });
      }); // console.error(result) // DEBUG

      return result;
    } else if (style === 'debang/OrgChart') {
      // Converts array-based/tabular '[staff, manager, qualifier] to a JSON tree, allowing for the same staff member
      // to appear at multiple nodes using conversion algorithm from debang demos: https://codepen.io/dabeng/pen/mRZpLK
      const seedData = this.generateOrgChartData('google-chart').map(row => {
        const [email, roleName] = row[0].split(/\//); // if there's a qualifier, we create the 'effective' role name here

        const qualifier = row[2];
        const title = qualifier ? roleName.replace(/^((Head|Lead|Senior|Junior) )?/, `$1${qualifier} `) : roleName;
        const role = this.roles.get(roleName);
        const staffMember = this.staff.get(email);
        const chartDatum = {
          id: row[0],
          ids: [row[0]],
          parent_id: row[1],
          email: email,
          name: staffMember.getFullName(),
          titles: [title],
          roles: [role]
        };
        const staffRole = staffMember.getRole(roleName);

        for (const optField of ['acting', 'tbd']) {
          if (staffRole[optField] !== undefined) {
            chartDatum[optField] = staffRole[optField];
          }
        }

        return chartDatum;
      });
      const data = {};
      const childNodes = []; // build out the full tree with each titualar role being it's own thing

      let item;
      let countSinceUpdate = 0; // Builds up data by finding the root (no parent_id) and then adding children until everything is added into the
      // graph.

      while ((item = seedData.shift()) !== undefined) {
        const jsonloop = new JSONLoop(data, 'id', 'children');

        if (!item.parent_id) {
          // jsonloop counts the {} as one
          if (jsonloop.count > 1) throw new Error(`Found multiple roots. data: ${JSON.stringify(data, null, '  ')}; item: ${JSON.stringify(item, null, '  ')}`);
          Object.assign(data, item);
        } else {
          if (!('ids' in data)) {
            data.ids = [];
          } // Search the built up data graph for a matching parent. If found, attach item into data. If not, stick it
          // back on the seedData and process the next item.


          jsonloop.findNodeById(data, item.parent_id, function (err, node) {
            if (err) {
              // try deferring the processing till the needed node is added...
              countSinceUpdate += 1;

              if (countSinceUpdate === seedData.length) {
                throw new Error(`${seedData.length} entries could not be connected to parent. ${JSON.stringify(seedData, null, '  ')}\ndata: ${JSON.stringify(seedData, null, '  ')}`);
              }

              seedData.push(item);
            } else {
              countSinceUpdate = 0;
              childNodes.push(item);

              if ('children' in node) {
                node.children.push(item);
              } else {
                node.children = [item];
              }
            }
          });
        }
      }

      const mergeNodes = (target, source) => {
        target.titles.push(...source.titles);
        target.ids.push(...source.ids);
        target.roles.push(...source.roles);
      }; // collapse/merge nodes where appropriate


      childNodes.forEach(node => {
        const jsonloop = new JSONLoop(data, 'id', 'children');
        jsonloop.findParent(data, node, (err, parent) => {
          if (err) throw new Error(`Could not find parent for '${node.id}'; is chart valid?`);

          if (parent) {
            // merge sideways
            for (const role of node.roles) {
              /* OK, wanted to do:
              const sibblingsRoleNamesToMerge = role.implies?.filter(impSpec =>
                  impSpec.mngrProtocol === 'same' && node.ids.indexOf(`${node.email}/${impSpec.mergeWith}`) >= 0 )
                .map(i => i.name)
               But eslint chokes... on the question mark? It's not clear. It talks about an undefined range.
              Tried updating eslint and babel components 2021-03-28 with no success.
              TODO: look into this and report bug if nothing found.
              */
              const sibblingsRoleNamesToMerge = role.implies && role.implies.filter(impSpec => impSpec.display !== false && impSpec.mngrProtocol === 'same' && node.ids.indexOf(`${node.email}/${impSpec.mergeWith}`) >= 0).map(i => i.name); // const trimRoles = (n) => { const { roles, ...rest } = n; return rest; } // DEBUG

              /* if (sibblingsRoleNamesToMerge) {// DEBUG
                console.error(`Side merging to ${node.titles[0]}\n`, sibblingsRoleNamesToMerge)
              } */

              for (const mergeMeName of sibblingsRoleNamesToMerge || []) {
                const key = `${node.email}/${mergeMeName}`; // console.error(`Looking for '${key}' to merge in: `, parent.children.map(trimRoles))// DEBUG

                const mergeMeNode = parent.children.find(c => c.ids.find(id => id === key));

                if (mergeMeNode) {
                  // console.error('Found: ', trimRoles(mergeMeNode)) // DEBUG
                  mergeNodes(node, mergeMeNode);
                  parent.children.splice(parent.children.findIndex(t => t === mergeMeNode), 1);
                }
              }
            } // merge up


            if (node.email === parent.email) {
              // It may be the case that we have a node with multiple roles and a sub-role has reports. The sub-node
              // will be rendered in order to clarify the nature of the reports, but we hide the email which is
              // appearent in the parent node.
              node.hideName = true; // collapse staff member roles to same staff in parent role if only child or sub-node has no children.

              if (parent.children.length === 1 || node.children === undefined) {
                mergeNodes(parent, node); // If 'node' is only child collapsing into parrent, just cut it out

                if (parent.children.length === 1) parent.children = node.children;else {
                  // Else, just cut the child out
                  parent.children.splice(parent.children.findIndex(t => t === node), 1);
                }
              }
            }
          }
        });
      });
      return data;
    } else throw new Error(`Org chart style '${style}' is not supported.`);
  }

});

exports.AuditRecord = AuditRecord;
exports.AuditRecords = AuditRecords;
exports.OrgStructure = OrgStructure;
exports.Organization = Organization;
exports.Role = Role;
exports.Roles = Roles;
exports.Staff = Staff;
exports.StaffMember = StaffMember;
exports.StaffRole = StaffRole;
exports.Technologies = Technologies;

});

unwrapExports(orgsModel);
orgsModel.AuditRecord;
orgsModel.AuditRecords;
orgsModel.OrgStructure;
var orgsModel_4 = orgsModel.Organization;
orgsModel.Role;
orgsModel.Roles;
orgsModel.Staff;
orgsModel.StaffMember;
orgsModel.StaffRole;
orgsModel.Technologies;

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var nameSorter = function nameSorter(name) {
  return function (a, b) {
    if (name in a && name in b) {
      return a[name].toLowerCase().localeCompare(b[name].toLowerCase());
    } else if (!(name in a)) return 1;else
      /* not in b */
      return -1;
  };
};

var getPrimaryRole = function getPrimaryRole(staff) {
  return staff.roles[0].getName();
};

var staffRef = function staffRef(staff) {
  return "".concat(staff.familyName, ", ").concat(staff.givenName, " _").concat(staff.email, "_");
};

var roleRef = function roleRef(roleName) {
  var roleLink = roleName.toLowerCase().replace(/[^a-z ]*/g, '').replace(/ /g, '-');
  return "[".concat(roleName, "](#").concat(roleLink, ")");
};

var noteManager = function noteManager(staff, role) {
  var attachedRole = staff.getAttachedRole(role.name);
  var manager = attachedRole.getManager();

  if (manager !== null && attachedRole.managerRole === undefined) {
    throw new Error("Did not find expected 'manager role' for '".concat(staff.email, "' as '").concat(role.name, "'."));
  }

  var managerRef = manager === null && 'self' || manager.email === staff.email && "self as ".concat(roleRef(attachedRole.managerRole.getName())) || "".concat(staffRef(manager), " as ").concat(roleRef(attachedRole.managerRole.getName()));
  return "(managed by ".concat(managerRef, ")");
};

var noteDesignationSource = function noteDesignationSource(staff, role) {
  // It's possible to be designatd through multiple routes. I.e., the "Head of Administration" and "Head of Human
  // Resources" could be the same individual.
  var attachedRoles = staff.getAttachedRoles().filter(function (r) {
    return r.name === role.name;
  });
  var implications = attachedRoles // reduce to list of implied role names
  .map(function (r) {
    return r.impliedBy;
  }).filter(function (ir) {
    return ir !== undefined;
  }).map(function (ir) {
    return roleRef(ir.getName());
  });

  if (implications.length > 0) {
    return "(implied by ".concat(implications.join(', '), ")");
  } else {
    return "(as ".concat(getPrimaryRole(staff), ")");
  }
};

var genDoc = function genDoc(_ref) {
  var dataPath = _ref.dataPath;
  var org = new orgsModel_4({
    dataPath: dataPath
  });
  var companyRoles = org.orgStructure.getNodes().reduce(function (acc, node) {
    if (!node.implied) {
      acc.push(node.name);
    }
    /* else { // DEBUG
      console.error(`skipping role ${node.name}`)
    } */


    return acc;
  }, []);
  companyRoles.sort(function (a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase());
  }); // console.error(companyRoles) // DEBUG

  var getRole = function getRole(roleName) {
    return org.roles.get(roleName, {
      required: true,
      errMsgGen: function errMsgGen(name) {
        return "Role '".concat(name, "' defined in organization structure is not defined.");
      }
    });
  };

  var processImpliedRoles = function processImpliedRoles(role, duties) {
    var _iterator = _createForOfIteratorHelper$1(role.implies || []),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var impName = _step.value.name;
        var impRole = getRole(impName);
        duties = duties.concat(impRole.duties || []);
        duties = processImpliedRoles(impRole, duties);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return duties;
  };

  var sb = []; // Note: we expect each line to be terminated with a '\n' when output, so the ending '\n' has the effect of adding an
  // empty line.

  sb.push('# Company Jobs and Roles Reference\n');
  sb.push('## Purpose and scope\n');
  sb.push('Here we find all Company job descriptions.\n');
  sb.push('## Job descriptions\n');

  var _iterator2 = _createForOfIteratorHelper$1(companyRoles),
      _step2;

  try {
    var _loop = function _loop() {
      var roleName = _step2.value;
      var role = getRole(roleName);
      sb.push("### ".concat(role.name, "\n"));
      sb.push("".concat(role.description, "\n"));
      var duties = role.duties || [];
      duties = processImpliedRoles(role, duties);

      if (duties) {
        var origCount = duties.length;
        duties.slice().reverse().forEach(function (duty, rI) {
          var expectI = origCount - rI - 1;
          var foundI = duties.findIndex(function (td) {
            return td.description === duty.description;
          });

          if (expectI !== foundI) {
            duties.splice(expectI, 1);
          }
        });
        sb.push('Duties:');

        var _iterator4 = _createForOfIteratorHelper$1(duties || []),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var duty = _step4.value;
            sb.push("* ".concat(duty.description));
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        sb.push('');
      }

      var staffInRole = org.roles.getStaffInRole(role.name).sort(nameSorter('familyName'));
      var hasMembers = staffInRole && staffInRole.length > 0;

      if (role.singular) {
        var staff = staffInRole[0]; // TODO: check that we don't have multiples.

        hasMembers ? sb.push("".concat(staffRef(staff), " is the current ").concat(role.name, " ").concat(noteManager(staff, role), "\n")) : sb.push('_*This position is currently vacant.*_\n');
      } else {
        sb.push('#### Members\n'); // TODO: something like '${role.namePluralized}'

        if (hasMembers) {
          var _iterator5 = _createForOfIteratorHelper$1(staffInRole),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _staff = _step5.value;
              sb.push("* ".concat(staffRef(_staff), " ").concat(noteManager(_staff, role)));
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }

          sb.push('');
        } else {
          sb.push('_*NONE*_\n');
        }
      }
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  sb.push('## Designated roles:\n');

  var designationsReducer = function designationsReducer(designations, role) {
    if (role.designated) {
      designations.push(role);
    }

    return designations;
  };

  var _iterator3 = _createForOfIteratorHelper$1(org.roles.list().reduce(designationsReducer, []).sort(nameSorter('name'))),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var role = _step3.value;
      sb.push("### ".concat(role.name, "\n"));
      sb.push("".concat(role.description, "\n"));
      sb.push('#### Members\n');
      var staffInRole = org.roles.getStaffInRole(role.name).sort(nameSorter('familyName'));

      if (staffInRole && staffInRole.length > 0) {
        var _iterator6 = _createForOfIteratorHelper$1(staffInRole),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var staff = _step6.value;
            sb.push("* ".concat(staffRef(staff), " ").concat(noteDesignationSource(staff, role)));
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        sb.push('');
      } else {
        sb.push('_*NONE*_\n');
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return sb;
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _iterator = _createForOfIteratorHelper(genDoc(_objectSpread({}, process.argv[2]))),
    _step;

try {
  for (_iterator.s(); !(_step = _iterator.n()).done;) {
    var line = _step.value;
    console.log(line);
  }
} catch (err) {
  _iterator.e(err);
} finally {
  _iterator.f();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
